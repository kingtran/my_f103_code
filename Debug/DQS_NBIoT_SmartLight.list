
DQS_NBIoT_SmartLight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005578  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08005684  08005684  00015684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056ec  080056ec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080056ec  080056ec  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080056ec  080056ec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056ec  080056ec  000156ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056f0  080056f0  000156f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080056f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d4  2000000c  08005700  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e0  08005700  000205e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010976  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a92  00000000  00000000  000309ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  00033440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001028  00000000  00000000  000345d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019065  00000000  00000000  000355f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012e05  00000000  00000000  0004e65d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fd97  00000000  00000000  00061462  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f11f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046a8  00000000  00000000  000f124c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800566c 	.word	0x0800566c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800566c 	.word	0x0800566c

0800014c <DBUG_u8Init>:
 * @pre
 * @post
 * @return
 */
uint8_t DBUG_u8Init()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	PHY_u8Uart3Init();
 8000150:	f000 fda4 	bl	8000c9c <PHY_u8Uart3Init>
	return HAL_OK;
 8000154:	2300      	movs	r3, #0
}
 8000156:	4618      	mov	r0, r3
 8000158:	bd80      	pop	{r7, pc}

0800015a <DBUG_u8RxEnb>:
 * @pre
 * @post
 * @return
 */
uint8_t DBUG_u8RxEnb()
{
 800015a:	b580      	push	{r7, lr}
 800015c:	af00      	add	r7, sp, #0
	PHY_u8Uart3EnbInterrupt();
 800015e:	f001 f8cd 	bl	80012fc <PHY_u8Uart3EnbInterrupt>
	return HAL_OK;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	bd80      	pop	{r7, pc}

08000168 <DBUG_u8SendByte>:
 * @post
 * @param u8Byte
 * @return
 */
uint8_t DBUG_u8SendByte(uint8_t* pu8Data, uint16_t u16Len)
{
 8000168:	b580      	push	{r7, lr}
 800016a:	b082      	sub	sp, #8
 800016c:	af00      	add	r7, sp, #0
 800016e:	6078      	str	r0, [r7, #4]
 8000170:	460b      	mov	r3, r1
 8000172:	807b      	strh	r3, [r7, #2]
	PHY_u8Uart3SendByte(pu8Data, u16Len);
 8000174:	887b      	ldrh	r3, [r7, #2]
 8000176:	4619      	mov	r1, r3
 8000178:	6878      	ldr	r0, [r7, #4]
 800017a:	f001 f8f9 	bl	8001370 <PHY_u8Uart3SendByte>
	return HAL_OK;
 800017e:	2300      	movs	r3, #0
}
 8000180:	4618      	mov	r0, r3
 8000182:	3708      	adds	r7, #8
 8000184:	46bd      	mov	sp, r7
 8000186:	bd80      	pop	{r7, pc}

08000188 <DBUG_u8GetCmdState>:
 * @pre
 * @post
 * @return
 */
uint8_t DBUG_u8GetCmdState()
{
 8000188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800018a:	b083      	sub	sp, #12
 800018c:	af00      	add	r7, sp, #0
	//07 <crc> 03 <1 byte day of week> <3 bytes day/month/year>
	//07070301010101
	//-> 04 Scheduler Data
	//07 <crc> 04 <1 byte no of Slot> <3 bytes Hour/Minute/Value>
	//07070301010101
	uint8_t u8Item = 0;
 800018e:	2300      	movs	r3, #0
 8000190:	71fb      	strb	r3, [r7, #7]
	u8RxByte = PHY_u8Uart3ReturnRxByte();
 8000192:	f001 f8d7 	bl	8001344 <PHY_u8Uart3ReturnRxByte>
 8000196:	4603      	mov	r3, r0
 8000198:	4a84      	ldr	r2, [pc, #528]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 800019a:	6013      	str	r3, [r2, #0]

	if(u8RxByte[0] == 0 && u8RxByte[1] == 0 && u8RxByte[1] == 0)
 800019c:	4b83      	ldr	r3, [pc, #524]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	781b      	ldrb	r3, [r3, #0]
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d10d      	bne.n	80001c2 <DBUG_u8GetCmdState+0x3a>
 80001a6:	4b81      	ldr	r3, [pc, #516]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	3301      	adds	r3, #1
 80001ac:	781b      	ldrb	r3, [r3, #0]
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d107      	bne.n	80001c2 <DBUG_u8GetCmdState+0x3a>
 80001b2:	4b7e      	ldr	r3, [pc, #504]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	3301      	adds	r3, #1
 80001b8:	781b      	ldrb	r3, [r3, #0]
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d101      	bne.n	80001c2 <DBUG_u8GetCmdState+0x3a>
		return 0;
 80001be:	2300      	movs	r3, #0
 80001c0:	e22e      	b.n	8000620 <DBUG_u8GetCmdState+0x498>

	for(u8Item = 0; u8Item < MAX_OF_LEN; u8Item++)
 80001c2:	2300      	movs	r3, #0
 80001c4:	71fb      	strb	r3, [r7, #7]
 80001c6:	e226      	b.n	8000616 <DBUG_u8GetCmdState+0x48e>
	{

		if((u8RxByte[u8Item] == 0x03)
 80001c8:	4b78      	ldr	r3, [pc, #480]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 80001ca:	681a      	ldr	r2, [r3, #0]
 80001cc:	79fb      	ldrb	r3, [r7, #7]
 80001ce:	4413      	add	r3, r2
 80001d0:	781b      	ldrb	r3, [r3, #0]
 80001d2:	2b03      	cmp	r3, #3
 80001d4:	d119      	bne.n	800020a <DBUG_u8GetCmdState+0x82>
			&& (u8RxByte[u8Item+1] ==  u8RxByte[u8Item+2])
 80001d6:	4b75      	ldr	r3, [pc, #468]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 80001d8:	681a      	ldr	r2, [r3, #0]
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	3301      	adds	r3, #1
 80001de:	4413      	add	r3, r2
 80001e0:	781a      	ldrb	r2, [r3, #0]
 80001e2:	4b72      	ldr	r3, [pc, #456]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 80001e4:	6819      	ldr	r1, [r3, #0]
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	3302      	adds	r3, #2
 80001ea:	440b      	add	r3, r1
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	429a      	cmp	r2, r3
 80001f0:	d10b      	bne.n	800020a <DBUG_u8GetCmdState+0x82>
			&& (u8RxByte[u8Item+2] == 0x64))
 80001f2:	4b6e      	ldr	r3, [pc, #440]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 80001f4:	681a      	ldr	r2, [r3, #0]
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	3302      	adds	r3, #2
 80001fa:	4413      	add	r3, r2
 80001fc:	781b      	ldrb	r3, [r3, #0]
 80001fe:	2b64      	cmp	r3, #100	; 0x64
 8000200:	d103      	bne.n	800020a <DBUG_u8GetCmdState+0x82>
		{
			PHY_u8Uart3EnbInterrupt();
 8000202:	f001 f87b 	bl	80012fc <PHY_u8Uart3EnbInterrupt>
			return MA_STA_RUN_AUT1;
 8000206:	2364      	movs	r3, #100	; 0x64
 8000208:	e20a      	b.n	8000620 <DBUG_u8GetCmdState+0x498>
		}
		else if((u8RxByte[u8Item] == 0x03)
 800020a:	4b68      	ldr	r3, [pc, #416]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 800020c:	681a      	ldr	r2, [r3, #0]
 800020e:	79fb      	ldrb	r3, [r7, #7]
 8000210:	4413      	add	r3, r2
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	2b03      	cmp	r3, #3
 8000216:	d119      	bne.n	800024c <DBUG_u8GetCmdState+0xc4>
			&& (u8RxByte[u8Item+1] ==  u8RxByte[u8Item+2])
 8000218:	4b64      	ldr	r3, [pc, #400]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 800021a:	681a      	ldr	r2, [r3, #0]
 800021c:	79fb      	ldrb	r3, [r7, #7]
 800021e:	3301      	adds	r3, #1
 8000220:	4413      	add	r3, r2
 8000222:	781a      	ldrb	r2, [r3, #0]
 8000224:	4b61      	ldr	r3, [pc, #388]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 8000226:	6819      	ldr	r1, [r3, #0]
 8000228:	79fb      	ldrb	r3, [r7, #7]
 800022a:	3302      	adds	r3, #2
 800022c:	440b      	add	r3, r1
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	429a      	cmp	r2, r3
 8000232:	d10b      	bne.n	800024c <DBUG_u8GetCmdState+0xc4>
			&& (u8RxByte[u8Item+2] == 0x65))
 8000234:	4b5d      	ldr	r3, [pc, #372]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 8000236:	681a      	ldr	r2, [r3, #0]
 8000238:	79fb      	ldrb	r3, [r7, #7]
 800023a:	3302      	adds	r3, #2
 800023c:	4413      	add	r3, r2
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	2b65      	cmp	r3, #101	; 0x65
 8000242:	d103      	bne.n	800024c <DBUG_u8GetCmdState+0xc4>
		{
			PHY_u8Uart3EnbInterrupt();
 8000244:	f001 f85a 	bl	80012fc <PHY_u8Uart3EnbInterrupt>
			return MA_STA_RUN_AUT2;
 8000248:	2365      	movs	r3, #101	; 0x65
 800024a:	e1e9      	b.n	8000620 <DBUG_u8GetCmdState+0x498>
		}
		else if((u8RxByte[u8Item] == 0x04)
 800024c:	4b57      	ldr	r3, [pc, #348]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 800024e:	681a      	ldr	r2, [r3, #0]
 8000250:	79fb      	ldrb	r3, [r7, #7]
 8000252:	4413      	add	r3, r2
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	2b04      	cmp	r3, #4
 8000258:	d13e      	bne.n	80002d8 <DBUG_u8GetCmdState+0x150>
			&& (u8RxByte[u8Item+1] ==  (uint8_t)(u8RxByte[u8Item+2] + u8RxByte[u8Item+3]))
 800025a:	4b54      	ldr	r3, [pc, #336]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 800025c:	681a      	ldr	r2, [r3, #0]
 800025e:	79fb      	ldrb	r3, [r7, #7]
 8000260:	3301      	adds	r3, #1
 8000262:	4413      	add	r3, r2
 8000264:	781a      	ldrb	r2, [r3, #0]
 8000266:	4b51      	ldr	r3, [pc, #324]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 8000268:	6819      	ldr	r1, [r3, #0]
 800026a:	79fb      	ldrb	r3, [r7, #7]
 800026c:	3302      	adds	r3, #2
 800026e:	440b      	add	r3, r1
 8000270:	7819      	ldrb	r1, [r3, #0]
 8000272:	4b4e      	ldr	r3, [pc, #312]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 8000274:	6818      	ldr	r0, [r3, #0]
 8000276:	79fb      	ldrb	r3, [r7, #7]
 8000278:	3303      	adds	r3, #3
 800027a:	4403      	add	r3, r0
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	440b      	add	r3, r1
 8000280:	b2db      	uxtb	r3, r3
 8000282:	429a      	cmp	r2, r3
 8000284:	d128      	bne.n	80002d8 <DBUG_u8GetCmdState+0x150>
			&& (u8RxByte[u8Item+2] == 0x01)
 8000286:	4b49      	ldr	r3, [pc, #292]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 8000288:	681a      	ldr	r2, [r3, #0]
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	3302      	adds	r3, #2
 800028e:	4413      	add	r3, r2
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	2b01      	cmp	r3, #1
 8000294:	d120      	bne.n	80002d8 <DBUG_u8GetCmdState+0x150>
			&& (u8RxByte[u8Item+3] > 0))
 8000296:	4b45      	ldr	r3, [pc, #276]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 8000298:	681a      	ldr	r2, [r3, #0]
 800029a:	79fb      	ldrb	r3, [r7, #7]
 800029c:	3303      	adds	r3, #3
 800029e:	4413      	add	r3, r2
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d018      	beq.n	80002d8 <DBUG_u8GetCmdState+0x150>
		{
			u8DataCmd[0] = u8RxByte[u8Item+3] >> 4;
 80002a6:	4b41      	ldr	r3, [pc, #260]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 80002a8:	681a      	ldr	r2, [r3, #0]
 80002aa:	79fb      	ldrb	r3, [r7, #7]
 80002ac:	3303      	adds	r3, #3
 80002ae:	4413      	add	r3, r2
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	091b      	lsrs	r3, r3, #4
 80002b4:	b2da      	uxtb	r2, r3
 80002b6:	4b3e      	ldr	r3, [pc, #248]	; (80003b0 <DBUG_u8GetCmdState+0x228>)
 80002b8:	701a      	strb	r2, [r3, #0]
			u8DataCmd[1] = u8RxByte[u8Item+3] & 0x0F;
 80002ba:	4b3c      	ldr	r3, [pc, #240]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 80002bc:	681a      	ldr	r2, [r3, #0]
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	3303      	adds	r3, #3
 80002c2:	4413      	add	r3, r2
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	f003 030f 	and.w	r3, r3, #15
 80002ca:	b2da      	uxtb	r2, r3
 80002cc:	4b38      	ldr	r3, [pc, #224]	; (80003b0 <DBUG_u8GetCmdState+0x228>)
 80002ce:	705a      	strb	r2, [r3, #1]

			PHY_u8Uart3EnbInterrupt();
 80002d0:	f001 f814 	bl	80012fc <PHY_u8Uart3EnbInterrupt>
			return MA_STA_RUN_MAN_LED;
 80002d4:	230b      	movs	r3, #11
 80002d6:	e1a3      	b.n	8000620 <DBUG_u8GetCmdState+0x498>
		}
		else if((u8RxByte[u8Item] == 0x06)
 80002d8:	4b34      	ldr	r3, [pc, #208]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 80002da:	681a      	ldr	r2, [r3, #0]
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	4413      	add	r3, r2
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	2b06      	cmp	r3, #6
 80002e4:	d166      	bne.n	80003b4 <DBUG_u8GetCmdState+0x22c>
			&& (u8RxByte[u8Item+1] == (uint8_t)(u8RxByte[u8Item+2] + u8RxByte[u8Item+3] + u8RxByte[u8Item+4] + u8RxByte[u8Item+5]))
 80002e6:	4b31      	ldr	r3, [pc, #196]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 80002e8:	681a      	ldr	r2, [r3, #0]
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	3301      	adds	r3, #1
 80002ee:	4413      	add	r3, r2
 80002f0:	781a      	ldrb	r2, [r3, #0]
 80002f2:	4b2e      	ldr	r3, [pc, #184]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 80002f4:	6819      	ldr	r1, [r3, #0]
 80002f6:	79fb      	ldrb	r3, [r7, #7]
 80002f8:	3302      	adds	r3, #2
 80002fa:	440b      	add	r3, r1
 80002fc:	7819      	ldrb	r1, [r3, #0]
 80002fe:	4b2b      	ldr	r3, [pc, #172]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 8000300:	6818      	ldr	r0, [r3, #0]
 8000302:	79fb      	ldrb	r3, [r7, #7]
 8000304:	3303      	adds	r3, #3
 8000306:	4403      	add	r3, r0
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	440b      	add	r3, r1
 800030c:	b2d9      	uxtb	r1, r3
 800030e:	4b27      	ldr	r3, [pc, #156]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 8000310:	6818      	ldr	r0, [r3, #0]
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	3304      	adds	r3, #4
 8000316:	4403      	add	r3, r0
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	440b      	add	r3, r1
 800031c:	b2d9      	uxtb	r1, r3
 800031e:	4b23      	ldr	r3, [pc, #140]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 8000320:	6818      	ldr	r0, [r3, #0]
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	3305      	adds	r3, #5
 8000326:	4403      	add	r3, r0
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	440b      	add	r3, r1
 800032c:	b2db      	uxtb	r3, r3
 800032e:	429a      	cmp	r2, r3
 8000330:	d140      	bne.n	80003b4 <DBUG_u8GetCmdState+0x22c>
			&& (u8RxByte[u8Item+2] == 0x02)
 8000332:	4b1e      	ldr	r3, [pc, #120]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 8000334:	681a      	ldr	r2, [r3, #0]
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	3302      	adds	r3, #2
 800033a:	4413      	add	r3, r2
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	2b02      	cmp	r3, #2
 8000340:	d138      	bne.n	80003b4 <DBUG_u8GetCmdState+0x22c>
			&& (u8RxByte[u8Item+3] > 0)
 8000342:	4b1a      	ldr	r3, [pc, #104]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 8000344:	681a      	ldr	r2, [r3, #0]
 8000346:	79fb      	ldrb	r3, [r7, #7]
 8000348:	3303      	adds	r3, #3
 800034a:	4413      	add	r3, r2
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	2b00      	cmp	r3, #0
 8000350:	d030      	beq.n	80003b4 <DBUG_u8GetCmdState+0x22c>
			&& (u8RxByte[u8Item+4] > 0)
 8000352:	4b16      	ldr	r3, [pc, #88]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 8000354:	681a      	ldr	r2, [r3, #0]
 8000356:	79fb      	ldrb	r3, [r7, #7]
 8000358:	3304      	adds	r3, #4
 800035a:	4413      	add	r3, r2
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	2b00      	cmp	r3, #0
 8000360:	d028      	beq.n	80003b4 <DBUG_u8GetCmdState+0x22c>
			&& (u8RxByte[u8Item+5] > 0))
 8000362:	4b12      	ldr	r3, [pc, #72]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 8000364:	681a      	ldr	r2, [r3, #0]
 8000366:	79fb      	ldrb	r3, [r7, #7]
 8000368:	3305      	adds	r3, #5
 800036a:	4413      	add	r3, r2
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	2b00      	cmp	r3, #0
 8000370:	d020      	beq.n	80003b4 <DBUG_u8GetCmdState+0x22c>
		{
			u8DataCmd[0] = u8RxByte[u8Item+3];
 8000372:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 8000374:	681a      	ldr	r2, [r3, #0]
 8000376:	79fb      	ldrb	r3, [r7, #7]
 8000378:	3303      	adds	r3, #3
 800037a:	4413      	add	r3, r2
 800037c:	781a      	ldrb	r2, [r3, #0]
 800037e:	4b0c      	ldr	r3, [pc, #48]	; (80003b0 <DBUG_u8GetCmdState+0x228>)
 8000380:	701a      	strb	r2, [r3, #0]
			u8DataCmd[1] = u8RxByte[u8Item+4];
 8000382:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 8000384:	681a      	ldr	r2, [r3, #0]
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	3304      	adds	r3, #4
 800038a:	4413      	add	r3, r2
 800038c:	781a      	ldrb	r2, [r3, #0]
 800038e:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <DBUG_u8GetCmdState+0x228>)
 8000390:	705a      	strb	r2, [r3, #1]
			u8DataCmd[2] = u8RxByte[u8Item+5];
 8000392:	4b06      	ldr	r3, [pc, #24]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 8000394:	681a      	ldr	r2, [r3, #0]
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	3305      	adds	r3, #5
 800039a:	4413      	add	r3, r2
 800039c:	781a      	ldrb	r2, [r3, #0]
 800039e:	4b04      	ldr	r3, [pc, #16]	; (80003b0 <DBUG_u8GetCmdState+0x228>)
 80003a0:	709a      	strb	r2, [r3, #2]

			PHY_u8Uart3EnbInterrupt();
 80003a2:	f000 ffab 	bl	80012fc <PHY_u8Uart3EnbInterrupt>
			return MA_STA_RUN_MAN_PWM;
 80003a6:	230c      	movs	r3, #12
 80003a8:	e13a      	b.n	8000620 <DBUG_u8GetCmdState+0x498>
 80003aa:	bf00      	nop
 80003ac:	20000064 	.word	0x20000064
 80003b0:	2000008c 	.word	0x2000008c
		}
		else if((u8RxByte[u8Item] == 0x07)
 80003b4:	4b9c      	ldr	r3, [pc, #624]	; (8000628 <DBUG_u8GetCmdState+0x4a0>)
 80003b6:	681a      	ldr	r2, [r3, #0]
 80003b8:	79fb      	ldrb	r3, [r7, #7]
 80003ba:	4413      	add	r3, r2
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	2b07      	cmp	r3, #7
 80003c0:	d179      	bne.n	80004b6 <DBUG_u8GetCmdState+0x32e>
			&& (u8RxByte[u8Item+1] == (uint8_t)(u8RxByte[u8Item+2] + u8RxByte[u8Item+3] + u8RxByte[u8Item+4] + u8RxByte[u8Item+5] + u8RxByte[u8Item+6]))
 80003c2:	4b99      	ldr	r3, [pc, #612]	; (8000628 <DBUG_u8GetCmdState+0x4a0>)
 80003c4:	681a      	ldr	r2, [r3, #0]
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	3301      	adds	r3, #1
 80003ca:	4413      	add	r3, r2
 80003cc:	781a      	ldrb	r2, [r3, #0]
 80003ce:	4b96      	ldr	r3, [pc, #600]	; (8000628 <DBUG_u8GetCmdState+0x4a0>)
 80003d0:	6819      	ldr	r1, [r3, #0]
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	3302      	adds	r3, #2
 80003d6:	440b      	add	r3, r1
 80003d8:	7819      	ldrb	r1, [r3, #0]
 80003da:	4b93      	ldr	r3, [pc, #588]	; (8000628 <DBUG_u8GetCmdState+0x4a0>)
 80003dc:	6818      	ldr	r0, [r3, #0]
 80003de:	79fb      	ldrb	r3, [r7, #7]
 80003e0:	3303      	adds	r3, #3
 80003e2:	4403      	add	r3, r0
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	440b      	add	r3, r1
 80003e8:	b2d9      	uxtb	r1, r3
 80003ea:	4b8f      	ldr	r3, [pc, #572]	; (8000628 <DBUG_u8GetCmdState+0x4a0>)
 80003ec:	6818      	ldr	r0, [r3, #0]
 80003ee:	79fb      	ldrb	r3, [r7, #7]
 80003f0:	3304      	adds	r3, #4
 80003f2:	4403      	add	r3, r0
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	440b      	add	r3, r1
 80003f8:	b2d9      	uxtb	r1, r3
 80003fa:	4b8b      	ldr	r3, [pc, #556]	; (8000628 <DBUG_u8GetCmdState+0x4a0>)
 80003fc:	6818      	ldr	r0, [r3, #0]
 80003fe:	79fb      	ldrb	r3, [r7, #7]
 8000400:	3305      	adds	r3, #5
 8000402:	4403      	add	r3, r0
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	440b      	add	r3, r1
 8000408:	b2d9      	uxtb	r1, r3
 800040a:	4b87      	ldr	r3, [pc, #540]	; (8000628 <DBUG_u8GetCmdState+0x4a0>)
 800040c:	6818      	ldr	r0, [r3, #0]
 800040e:	79fb      	ldrb	r3, [r7, #7]
 8000410:	3306      	adds	r3, #6
 8000412:	4403      	add	r3, r0
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	440b      	add	r3, r1
 8000418:	b2db      	uxtb	r3, r3
 800041a:	429a      	cmp	r2, r3
 800041c:	d14b      	bne.n	80004b6 <DBUG_u8GetCmdState+0x32e>
			&& (u8RxByte[u8Item+2] == 0x03)
 800041e:	4b82      	ldr	r3, [pc, #520]	; (8000628 <DBUG_u8GetCmdState+0x4a0>)
 8000420:	681a      	ldr	r2, [r3, #0]
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	3302      	adds	r3, #2
 8000426:	4413      	add	r3, r2
 8000428:	781b      	ldrb	r3, [r3, #0]
			&& (u8RxByte[u8Item+3] >= 0)
 800042a:	2b03      	cmp	r3, #3
 800042c:	d143      	bne.n	80004b6 <DBUG_u8GetCmdState+0x32e>
			&& (u8RxByte[u8Item+4] > 0)
 800042e:	4b7e      	ldr	r3, [pc, #504]	; (8000628 <DBUG_u8GetCmdState+0x4a0>)
 8000430:	681a      	ldr	r2, [r3, #0]
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	3304      	adds	r3, #4
 8000436:	4413      	add	r3, r2
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b00      	cmp	r3, #0
 800043c:	d03b      	beq.n	80004b6 <DBUG_u8GetCmdState+0x32e>
			&& (u8RxByte[u8Item+5] > 0)
 800043e:	4b7a      	ldr	r3, [pc, #488]	; (8000628 <DBUG_u8GetCmdState+0x4a0>)
 8000440:	681a      	ldr	r2, [r3, #0]
 8000442:	79fb      	ldrb	r3, [r7, #7]
 8000444:	3305      	adds	r3, #5
 8000446:	4413      	add	r3, r2
 8000448:	781b      	ldrb	r3, [r3, #0]
			&& (u8RxByte[u8Item+6] >= 0))
 800044a:	2b00      	cmp	r3, #0
 800044c:	d033      	beq.n	80004b6 <DBUG_u8GetCmdState+0x32e>
		{

			u8DataCmd[0] = u8RxByte[u8Item+3];
 800044e:	4b76      	ldr	r3, [pc, #472]	; (8000628 <DBUG_u8GetCmdState+0x4a0>)
 8000450:	681a      	ldr	r2, [r3, #0]
 8000452:	79fb      	ldrb	r3, [r7, #7]
 8000454:	3303      	adds	r3, #3
 8000456:	4413      	add	r3, r2
 8000458:	781a      	ldrb	r2, [r3, #0]
 800045a:	4b74      	ldr	r3, [pc, #464]	; (800062c <DBUG_u8GetCmdState+0x4a4>)
 800045c:	701a      	strb	r2, [r3, #0]
			u8DataCmd[1] = u8RxByte[u8Item+4];
 800045e:	4b72      	ldr	r3, [pc, #456]	; (8000628 <DBUG_u8GetCmdState+0x4a0>)
 8000460:	681a      	ldr	r2, [r3, #0]
 8000462:	79fb      	ldrb	r3, [r7, #7]
 8000464:	3304      	adds	r3, #4
 8000466:	4413      	add	r3, r2
 8000468:	781a      	ldrb	r2, [r3, #0]
 800046a:	4b70      	ldr	r3, [pc, #448]	; (800062c <DBUG_u8GetCmdState+0x4a4>)
 800046c:	705a      	strb	r2, [r3, #1]
			u8DataCmd[2] = u8RxByte[u8Item+5];
 800046e:	4b6e      	ldr	r3, [pc, #440]	; (8000628 <DBUG_u8GetCmdState+0x4a0>)
 8000470:	681a      	ldr	r2, [r3, #0]
 8000472:	79fb      	ldrb	r3, [r7, #7]
 8000474:	3305      	adds	r3, #5
 8000476:	4413      	add	r3, r2
 8000478:	781a      	ldrb	r2, [r3, #0]
 800047a:	4b6c      	ldr	r3, [pc, #432]	; (800062c <DBUG_u8GetCmdState+0x4a4>)
 800047c:	709a      	strb	r2, [r3, #2]
			u8DataCmd[3] = u8RxByte[u8Item+6];
 800047e:	4b6a      	ldr	r3, [pc, #424]	; (8000628 <DBUG_u8GetCmdState+0x4a0>)
 8000480:	681a      	ldr	r2, [r3, #0]
 8000482:	79fb      	ldrb	r3, [r7, #7]
 8000484:	3306      	adds	r3, #6
 8000486:	4413      	add	r3, r2
 8000488:	781a      	ldrb	r2, [r3, #0]
 800048a:	4b68      	ldr	r3, [pc, #416]	; (800062c <DBUG_u8GetCmdState+0x4a4>)
 800048c:	70da      	strb	r2, [r3, #3]

			stSchedulerDataSlot.u8DayOfWeek = u8DataCmd[0];
 800048e:	4b67      	ldr	r3, [pc, #412]	; (800062c <DBUG_u8GetCmdState+0x4a4>)
 8000490:	781a      	ldrb	r2, [r3, #0]
 8000492:	4b67      	ldr	r3, [pc, #412]	; (8000630 <DBUG_u8GetCmdState+0x4a8>)
 8000494:	701a      	strb	r2, [r3, #0]
			stSchedulerDataSlot.u8Day 		= u8DataCmd[1];
 8000496:	4b65      	ldr	r3, [pc, #404]	; (800062c <DBUG_u8GetCmdState+0x4a4>)
 8000498:	785a      	ldrb	r2, [r3, #1]
 800049a:	4b65      	ldr	r3, [pc, #404]	; (8000630 <DBUG_u8GetCmdState+0x4a8>)
 800049c:	705a      	strb	r2, [r3, #1]
			stSchedulerDataSlot.u8Month		= u8DataCmd[2];
 800049e:	4b63      	ldr	r3, [pc, #396]	; (800062c <DBUG_u8GetCmdState+0x4a4>)
 80004a0:	789a      	ldrb	r2, [r3, #2]
 80004a2:	4b63      	ldr	r3, [pc, #396]	; (8000630 <DBUG_u8GetCmdState+0x4a8>)
 80004a4:	709a      	strb	r2, [r3, #2]
			stSchedulerDataSlot.u8Year 		= u8DataCmd[3];
 80004a6:	4b61      	ldr	r3, [pc, #388]	; (800062c <DBUG_u8GetCmdState+0x4a4>)
 80004a8:	78da      	ldrb	r2, [r3, #3]
 80004aa:	4b61      	ldr	r3, [pc, #388]	; (8000630 <DBUG_u8GetCmdState+0x4a8>)
 80004ac:	70da      	strb	r2, [r3, #3]

			PHY_u8Uart3EnbInterrupt();
 80004ae:	f000 ff25 	bl	80012fc <PHY_u8Uart3EnbInterrupt>
			return MA_STA_SET_SCH;
 80004b2:	23c8      	movs	r3, #200	; 0xc8
 80004b4:	e0b4      	b.n	8000620 <DBUG_u8GetCmdState+0x498>
		}
		else if((u8RxByte[u8Item] == 0x07)
 80004b6:	4b5c      	ldr	r3, [pc, #368]	; (8000628 <DBUG_u8GetCmdState+0x4a0>)
 80004b8:	681a      	ldr	r2, [r3, #0]
 80004ba:	79fb      	ldrb	r3, [r7, #7]
 80004bc:	4413      	add	r3, r2
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	2b07      	cmp	r3, #7
 80004c2:	f040 80a5 	bne.w	8000610 <DBUG_u8GetCmdState+0x488>
			&& (u8RxByte[u8Item+1] == (uint8_t)(u8RxByte[u8Item+2] + u8RxByte[u8Item+3] + u8RxByte[u8Item+4] + u8RxByte[u8Item+5] + u8RxByte[u8Item+6]))
 80004c6:	4b58      	ldr	r3, [pc, #352]	; (8000628 <DBUG_u8GetCmdState+0x4a0>)
 80004c8:	681a      	ldr	r2, [r3, #0]
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	3301      	adds	r3, #1
 80004ce:	4413      	add	r3, r2
 80004d0:	781a      	ldrb	r2, [r3, #0]
 80004d2:	4b55      	ldr	r3, [pc, #340]	; (8000628 <DBUG_u8GetCmdState+0x4a0>)
 80004d4:	6819      	ldr	r1, [r3, #0]
 80004d6:	79fb      	ldrb	r3, [r7, #7]
 80004d8:	3302      	adds	r3, #2
 80004da:	440b      	add	r3, r1
 80004dc:	7819      	ldrb	r1, [r3, #0]
 80004de:	4b52      	ldr	r3, [pc, #328]	; (8000628 <DBUG_u8GetCmdState+0x4a0>)
 80004e0:	6818      	ldr	r0, [r3, #0]
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	3303      	adds	r3, #3
 80004e6:	4403      	add	r3, r0
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	440b      	add	r3, r1
 80004ec:	b2d9      	uxtb	r1, r3
 80004ee:	4b4e      	ldr	r3, [pc, #312]	; (8000628 <DBUG_u8GetCmdState+0x4a0>)
 80004f0:	6818      	ldr	r0, [r3, #0]
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	3304      	adds	r3, #4
 80004f6:	4403      	add	r3, r0
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	440b      	add	r3, r1
 80004fc:	b2d9      	uxtb	r1, r3
 80004fe:	4b4a      	ldr	r3, [pc, #296]	; (8000628 <DBUG_u8GetCmdState+0x4a0>)
 8000500:	6818      	ldr	r0, [r3, #0]
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	3305      	adds	r3, #5
 8000506:	4403      	add	r3, r0
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	440b      	add	r3, r1
 800050c:	b2d9      	uxtb	r1, r3
 800050e:	4b46      	ldr	r3, [pc, #280]	; (8000628 <DBUG_u8GetCmdState+0x4a0>)
 8000510:	6818      	ldr	r0, [r3, #0]
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	3306      	adds	r3, #6
 8000516:	4403      	add	r3, r0
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	440b      	add	r3, r1
 800051c:	b2db      	uxtb	r3, r3
 800051e:	429a      	cmp	r2, r3
 8000520:	d176      	bne.n	8000610 <DBUG_u8GetCmdState+0x488>
			&& (u8RxByte[u8Item+2] == 0x04)
 8000522:	4b41      	ldr	r3, [pc, #260]	; (8000628 <DBUG_u8GetCmdState+0x4a0>)
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	3302      	adds	r3, #2
 800052a:	4413      	add	r3, r2
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b04      	cmp	r3, #4
 8000530:	d16e      	bne.n	8000610 <DBUG_u8GetCmdState+0x488>
			&& (u8RxByte[u8Item+3] > 0)
 8000532:	4b3d      	ldr	r3, [pc, #244]	; (8000628 <DBUG_u8GetCmdState+0x4a0>)
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	3303      	adds	r3, #3
 800053a:	4413      	add	r3, r2
 800053c:	781b      	ldrb	r3, [r3, #0]
			&& (u8RxByte[u8Item+4] >= 0)
			&& (u8RxByte[u8Item+5] >= 0)
			&& (u8RxByte[u8Item+6] >= 0))
 800053e:	2b00      	cmp	r3, #0
 8000540:	d066      	beq.n	8000610 <DBUG_u8GetCmdState+0x488>
		{

			u8DataCmd[0] = u8RxByte[u8Item+3];
 8000542:	4b39      	ldr	r3, [pc, #228]	; (8000628 <DBUG_u8GetCmdState+0x4a0>)
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	3303      	adds	r3, #3
 800054a:	4413      	add	r3, r2
 800054c:	781a      	ldrb	r2, [r3, #0]
 800054e:	4b37      	ldr	r3, [pc, #220]	; (800062c <DBUG_u8GetCmdState+0x4a4>)
 8000550:	701a      	strb	r2, [r3, #0]
			u8DataCmd[1] = u8RxByte[u8Item+4];
 8000552:	4b35      	ldr	r3, [pc, #212]	; (8000628 <DBUG_u8GetCmdState+0x4a0>)
 8000554:	681a      	ldr	r2, [r3, #0]
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	3304      	adds	r3, #4
 800055a:	4413      	add	r3, r2
 800055c:	781a      	ldrb	r2, [r3, #0]
 800055e:	4b33      	ldr	r3, [pc, #204]	; (800062c <DBUG_u8GetCmdState+0x4a4>)
 8000560:	705a      	strb	r2, [r3, #1]
			u8DataCmd[2] = u8RxByte[u8Item+5];
 8000562:	4b31      	ldr	r3, [pc, #196]	; (8000628 <DBUG_u8GetCmdState+0x4a0>)
 8000564:	681a      	ldr	r2, [r3, #0]
 8000566:	79fb      	ldrb	r3, [r7, #7]
 8000568:	3305      	adds	r3, #5
 800056a:	4413      	add	r3, r2
 800056c:	781a      	ldrb	r2, [r3, #0]
 800056e:	4b2f      	ldr	r3, [pc, #188]	; (800062c <DBUG_u8GetCmdState+0x4a4>)
 8000570:	709a      	strb	r2, [r3, #2]
			u8DataCmd[3] = u8RxByte[u8Item+6];
 8000572:	4b2d      	ldr	r3, [pc, #180]	; (8000628 <DBUG_u8GetCmdState+0x4a0>)
 8000574:	681a      	ldr	r2, [r3, #0]
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	3306      	adds	r3, #6
 800057a:	4413      	add	r3, r2
 800057c:	781a      	ldrb	r2, [r3, #0]
 800057e:	4b2b      	ldr	r3, [pc, #172]	; (800062c <DBUG_u8GetCmdState+0x4a4>)
 8000580:	70da      	strb	r2, [r3, #3]

			Scheduler_ValueTypeDef stSchedulerValue = {0};
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	2100      	movs	r1, #0
 8000586:	460a      	mov	r2, r1
 8000588:	801a      	strh	r2, [r3, #0]
 800058a:	460a      	mov	r2, r1
 800058c:	709a      	strb	r2, [r3, #2]
			stSchedulerValue.u8Hour 	= u8DataCmd[1];
 800058e:	4b27      	ldr	r3, [pc, #156]	; (800062c <DBUG_u8GetCmdState+0x4a4>)
 8000590:	785b      	ldrb	r3, [r3, #1]
 8000592:	713b      	strb	r3, [r7, #4]
			stSchedulerValue.u8Minute	= u8DataCmd[2];
 8000594:	4b25      	ldr	r3, [pc, #148]	; (800062c <DBUG_u8GetCmdState+0x4a4>)
 8000596:	789b      	ldrb	r3, [r3, #2]
 8000598:	717b      	strb	r3, [r7, #5]
			stSchedulerValue.u8Value 	= u8DataCmd[3];
 800059a:	4b24      	ldr	r3, [pc, #144]	; (800062c <DBUG_u8GetCmdState+0x4a4>)
 800059c:	78db      	ldrb	r3, [r3, #3]
 800059e:	71bb      	strb	r3, [r7, #6]

			stSchedulerDataSlot.stSchedulerValue[u8DataCmd[0] - 1] = stSchedulerValue;
 80005a0:	4b22      	ldr	r3, [pc, #136]	; (800062c <DBUG_u8GetCmdState+0x4a4>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	1e5a      	subs	r2, r3, #1
 80005a6:	4922      	ldr	r1, [pc, #136]	; (8000630 <DBUG_u8GetCmdState+0x4a8>)
 80005a8:	4613      	mov	r3, r2
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	4413      	add	r3, r2
 80005ae:	440b      	add	r3, r1
 80005b0:	3304      	adds	r3, #4
 80005b2:	1d3a      	adds	r2, r7, #4
 80005b4:	8811      	ldrh	r1, [r2, #0]
 80005b6:	7892      	ldrb	r2, [r2, #2]
 80005b8:	8019      	strh	r1, [r3, #0]
 80005ba:	709a      	strb	r2, [r3, #2]

			stSchedulerData.stSchedulerDataSlot[stSchedulerDataSlot.u8DayOfWeek] = stSchedulerDataSlot;
 80005bc:	4b1c      	ldr	r3, [pc, #112]	; (8000630 <DBUG_u8GetCmdState+0x4a8>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	4619      	mov	r1, r3
 80005c2:	4a1c      	ldr	r2, [pc, #112]	; (8000634 <DBUG_u8GetCmdState+0x4ac>)
 80005c4:	460b      	mov	r3, r1
 80005c6:	011b      	lsls	r3, r3, #4
 80005c8:	440b      	add	r3, r1
 80005ca:	005b      	lsls	r3, r3, #1
 80005cc:	441a      	add	r2, r3
 80005ce:	4b18      	ldr	r3, [pc, #96]	; (8000630 <DBUG_u8GetCmdState+0x4a8>)
 80005d0:	1cd0      	adds	r0, r2, #3
 80005d2:	f103 0420 	add.w	r4, r3, #32
 80005d6:	4602      	mov	r2, r0
 80005d8:	4619      	mov	r1, r3
 80005da:	f8d1 c000 	ldr.w	ip, [r1]
 80005de:	684e      	ldr	r6, [r1, #4]
 80005e0:	688d      	ldr	r5, [r1, #8]
 80005e2:	68c9      	ldr	r1, [r1, #12]
 80005e4:	f8c2 c000 	str.w	ip, [r2]
 80005e8:	6056      	str	r6, [r2, #4]
 80005ea:	6095      	str	r5, [r2, #8]
 80005ec:	60d1      	str	r1, [r2, #12]
 80005ee:	3310      	adds	r3, #16
 80005f0:	3010      	adds	r0, #16
 80005f2:	42a3      	cmp	r3, r4
 80005f4:	d1ef      	bne.n	80005d6 <DBUG_u8GetCmdState+0x44e>
 80005f6:	4602      	mov	r2, r0
 80005f8:	881b      	ldrh	r3, [r3, #0]
 80005fa:	8013      	strh	r3, [r2, #0]

			PHY_u8Uart3EnbInterrupt();
 80005fc:	f000 fe7e 	bl	80012fc <PHY_u8Uart3EnbInterrupt>

			if(u8DataCmd[0] == MAX_OF_SLOT)
 8000600:	4b0a      	ldr	r3, [pc, #40]	; (800062c <DBUG_u8GetCmdState+0x4a4>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b0a      	cmp	r3, #10
 8000606:	d101      	bne.n	800060c <DBUG_u8GetCmdState+0x484>
				return MA_STA_SET_SCH_END;
 8000608:	23ca      	movs	r3, #202	; 0xca
 800060a:	e009      	b.n	8000620 <DBUG_u8GetCmdState+0x498>

			return MA_STA_SET_SCH_UPD;
 800060c:	23c9      	movs	r3, #201	; 0xc9
 800060e:	e007      	b.n	8000620 <DBUG_u8GetCmdState+0x498>
	for(u8Item = 0; u8Item < MAX_OF_LEN; u8Item++)
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	3301      	adds	r3, #1
 8000614:	71fb      	strb	r3, [r7, #7]
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	2bc7      	cmp	r3, #199	; 0xc7
 800061a:	f67f add5 	bls.w	80001c8 <DBUG_u8GetCmdState+0x40>
		}
	}
	return 0;
 800061e:	2300      	movs	r3, #0
}
 8000620:	4618      	mov	r0, r3
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000628:	20000064 	.word	0x20000064
 800062c:	2000008c 	.word	0x2000008c
 8000630:	20000068 	.word	0x20000068
 8000634:	2000040c 	.word	0x2000040c

08000638 <DBUG_pu8GetDataCmd>:
 * @pre
 * @post
 * @return
 */
uint8_t* DBUG_pu8GetDataCmd()
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
	return &u8DataCmd[0];
 800063c:	4b02      	ldr	r3, [pc, #8]	; (8000648 <DBUG_pu8GetDataCmd+0x10>)
}
 800063e:	4618      	mov	r0, r3
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	2000008c 	.word	0x2000008c

0800064c <GPIO_u8ButtonInit>:
 * @pre
 * @post
 * @return
 */
uint8_t GPIO_u8ButtonInit()
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	return PHY_u8ButtonGpioInit();
 8000650:	f000 fc8e 	bl	8000f70 <PHY_u8ButtonGpioInit>
 8000654:	4603      	mov	r3, r0
}
 8000656:	4618      	mov	r0, r3
 8000658:	bd80      	pop	{r7, pc}

0800065a <GPIO_u8LedInit>:
 * @pre
 * @post
 * @return
 */
uint8_t GPIO_u8LedInit()
{
 800065a:	b580      	push	{r7, lr}
 800065c:	af00      	add	r7, sp, #0
	return PHY_u8LedGpioInit();
 800065e:	f000 fcb3 	bl	8000fc8 <PHY_u8LedGpioInit>
 8000662:	4603      	mov	r3, r0
}
 8000664:	4618      	mov	r0, r3
 8000666:	bd80      	pop	{r7, pc}

08000668 <GPIO_u8Led1On>:
 * @pre
 * @post
 * @return
 */
uint8_t GPIO_u8Led1On()
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	return PHY_u8Led1On();
 800066c:	f000 fcde 	bl	800102c <PHY_u8Led1On>
 8000670:	4603      	mov	r3, r0
}
 8000672:	4618      	mov	r0, r3
 8000674:	bd80      	pop	{r7, pc}

08000676 <GPIO_u8Led1Off>:
 * @pre
 * @post
 * @return
 */
uint8_t GPIO_u8Led1Off()
{
 8000676:	b580      	push	{r7, lr}
 8000678:	af00      	add	r7, sp, #0
	return PHY_u8Led1Off();
 800067a:	f000 fce3 	bl	8001044 <PHY_u8Led1Off>
 800067e:	4603      	mov	r3, r0
}
 8000680:	4618      	mov	r0, r3
 8000682:	bd80      	pop	{r7, pc}

08000684 <GPIO_u8Led2On>:
 * @pre
 * @post
 * @return
 */
uint8_t GPIO_u8Led2On()
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	return PHY_u8Led2On();
 8000688:	f000 fce8 	bl	800105c <PHY_u8Led2On>
 800068c:	4603      	mov	r3, r0
}
 800068e:	4618      	mov	r0, r3
 8000690:	bd80      	pop	{r7, pc}

08000692 <GPIO_u8Led2Off>:
 * @pre
 * @post
 * @return
 */
uint8_t GPIO_u8Led2Off()
{
 8000692:	b580      	push	{r7, lr}
 8000694:	af00      	add	r7, sp, #0
	return PHY_u8Led2Off();
 8000696:	f000 fced 	bl	8001074 <PHY_u8Led2Off>
 800069a:	4603      	mov	r3, r0
}
 800069c:	4618      	mov	r0, r3
 800069e:	bd80      	pop	{r7, pc}

080006a0 <GPIO_u8ScanEnb>:
 * @pre
 * @post
 * @return
 */
uint8_t GPIO_u8ScanEnb()
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	return PHY_u8Timer2EnbInterrupt();
 80006a4:	f000 fb72 	bl	8000d8c <PHY_u8Timer2EnbInterrupt>
 80006a8:	4603      	mov	r3, r0
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	bd80      	pop	{r7, pc}

080006ae <GPIO_u8ScanInit>:
 * @pre
 * @post
 * @return
 */
uint8_t GPIO_u8ScanInit()
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	af00      	add	r7, sp, #0
	return PHY_u8Timer2Init();
 80006b2:	f000 fb1d 	bl	8000cf0 <PHY_u8Timer2Init>
 80006b6:	4603      	mov	r3, r0
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	bd80      	pop	{r7, pc}

080006bc <LIAMBS_u8Init>:
 * @pre
 * @post
 * @return
 */
uint8_t LIAMBS_u8Init()
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	return PHY_u8Adc1Init();
 80006c0:	f000 fdc2 	bl	8001248 <PHY_u8Adc1Init>
 80006c4:	4603      	mov	r3, r0
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	bd80      	pop	{r7, pc}

080006ca <LIAMBS_u16Read>:
 * @pre
 * @post
 * @return
 */
uint16_t LIAMBS_u16Read()
{
 80006ca:	b580      	push	{r7, lr}
 80006cc:	af00      	add	r7, sp, #0
	return PHY_u16Adc1Read();
 80006ce:	f000 fdfb 	bl	80012c8 <PHY_u16Adc1Read>
 80006d2:	4603      	mov	r3, r0
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <LIPWM_u8Init>:
 * @pre
 * @post
 * @return
 */
uint8_t LIPWM_u8Init()
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	return PHY_u8Timer3Init();
 80006dc:	f000 fb60 	bl	8000da0 <PHY_u8Timer3Init>
 80006e0:	4603      	mov	r3, r0
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <LIPWM_u8Start>:
 * @pre
 * @post
 * @return
 */
uint8_t LIPWM_u8Start()
{
 80006e6:	b580      	push	{r7, lr}
 80006e8:	af00      	add	r7, sp, #0
	return PHY_u8Timer3PwmStart();
 80006ea:	f000 fbd1 	bl	8000e90 <PHY_u8Timer3PwmStart>
 80006ee:	4603      	mov	r3, r0
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <LIPWM_vSetValue>:
 * @post
 * @param u8Value
 * @param u16TimeSmooth
 */
void LIPWM_vSetValue(uint8_t u8Value, uint16_t u16TimeSmooth)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	460a      	mov	r2, r1
 80006fe:	71fb      	strb	r3, [r7, #7]
 8000700:	4613      	mov	r3, r2
 8000702:	80bb      	strh	r3, [r7, #4]
	PHY_vTimer3SetPwmValue(u8Value, u16TimeSmooth);
 8000704:	88ba      	ldrh	r2, [r7, #4]
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	4611      	mov	r1, r2
 800070a:	4618      	mov	r0, r3
 800070c:	f000 fbd0 	bl	8000eb0 <PHY_vTimer3SetPwmValue>
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800071c:	f001 f946 	bl	80019ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000720:	f000 f848 	bl	80007b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000724:	f000 f8f6 	bl	8000914 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000728:	f000 f8b7 	bl	800089a <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800072c:	f000 f8c1 	bl	80008b2 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000730:	f000 f8c6 	bl	80008c0 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000734:	f000 f8b7 	bl	80008a6 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000738:	f000 f89d 	bl	8000876 <MX_ADC1_Init>
  MX_SPI1_Init();
 800073c:	f000 f8a7 	bl	800088e <MX_SPI1_Init>
  MX_RTC_Init();
 8000740:	f000 f89f 	bl	8000882 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  on_sim();
 8000744:	f000 f91a 	bl	800097c <on_sim>

  u8MachineRunState = MA_STA_RUN_AUT1;
 8000748:	4b18      	ldr	r3, [pc, #96]	; (80007ac <main+0x94>)
 800074a:	2264      	movs	r2, #100	; 0x64
 800074c:	701a      	strb	r2, [r3, #0]

  GPIO_u8ButtonInit();
 800074e:	f7ff ff7d 	bl	800064c <GPIO_u8ButtonInit>
  GPIO_u8LedInit();
 8000752:	f7ff ff82 	bl	800065a <GPIO_u8LedInit>
  GPIO_u8ScanInit();
 8000756:	f7ff ffaa 	bl	80006ae <GPIO_u8ScanInit>
  GPIO_u8ScanEnb();
 800075a:	f7ff ffa1 	bl	80006a0 <GPIO_u8ScanEnb>

  LIPWM_u8Init();
 800075e:	f7ff ffbb 	bl	80006d8 <LIPWM_u8Init>
  LIPWM_u8Start();
 8000762:	f7ff ffc0 	bl	80006e6 <LIPWM_u8Start>

  LIAMBS_u8Init();
 8000766:	f7ff ffa9 	bl	80006bc <LIAMBS_u8Init>

  DBUG_u8Init();
 800076a:	f7ff fcef 	bl	800014c <DBUG_u8Init>
  DBUG_u8RxEnb();
 800076e:	f7ff fcf4 	bl	800015a <DBUG_u8RxEnb>

  RTC_u8Init();
 8000772:	f000 feef 	bl	8001554 <RTC_u8Init>

  GPIO_u8Led1On();
 8000776:	f7ff ff77 	bl	8000668 <GPIO_u8Led1On>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  u8MachineSetState = DBUG_u8GetCmdState();
 800077a:	f7ff fd05 	bl	8000188 <DBUG_u8GetCmdState>
 800077e:	4603      	mov	r3, r0
 8000780:	461a      	mov	r2, r3
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <main+0x98>)
 8000784:	701a      	strb	r2, [r3, #0]

	  if(u8MachineSetState > 0)
 8000786:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <main+0x98>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d008      	beq.n	80007a0 <main+0x88>
	  {
		  u8MachineRunState = u8CheckSetup(u8MachineSetState);
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <main+0x98>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	4618      	mov	r0, r3
 8000794:	f000 f90c 	bl	80009b0 <u8CheckSetup>
 8000798:	4603      	mov	r3, r0
 800079a:	461a      	mov	r2, r3
 800079c:	4b03      	ldr	r3, [pc, #12]	; (80007ac <main+0x94>)
 800079e:	701a      	strb	r2, [r3, #0]
	  }

	  vRun(u8MachineRunState);
 80007a0:	4b02      	ldr	r3, [pc, #8]	; (80007ac <main+0x94>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f000 f963 	bl	8000a70 <vRun>
	  u8MachineSetState = DBUG_u8GetCmdState();
 80007aa:	e7e6      	b.n	800077a <main+0x62>
 80007ac:	20000404 	.word	0x20000404
 80007b0:	20000287 	.word	0x20000287

080007b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b094      	sub	sp, #80	; 0x50
 80007b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007be:	2228      	movs	r2, #40	; 0x28
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f004 ff4a 	bl	800565c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80007e4:	2305      	movs	r3, #5
 80007e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007f2:	2301      	movs	r3, #1
 80007f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f6:	2301      	movs	r3, #1
 80007f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fa:	2302      	movs	r3, #2
 80007fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000802:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000804:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000808:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800080e:	4618      	mov	r0, r3
 8000810:	f002 f8be 	bl	8002990 <HAL_RCC_OscConfig>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800081a:	f000 fa39 	bl	8000c90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081e:	230f      	movs	r3, #15
 8000820:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000822:	2302      	movs	r3, #2
 8000824:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800082a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800082e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000830:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000834:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	2102      	movs	r1, #2
 800083c:	4618      	mov	r0, r3
 800083e:	f002 fb27 	bl	8002e90 <HAL_RCC_ClockConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000848:	f000 fa22 	bl	8000c90 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 800084c:	2303      	movs	r3, #3
 800084e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000850:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000854:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800085a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	4618      	mov	r0, r3
 8000860:	f002 fcb0 	bl	80031c4 <HAL_RCCEx_PeriphCLKConfig>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800086a:	f000 fa11 	bl	8000c90 <Error_Handler>
  }
}
 800086e:	bf00      	nop
 8000870:	3750      	adds	r7, #80	; 0x50
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}

08000876 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0
//  }
//  /* USER CODE BEGIN ADC1_Init 2 */
//
//  /* USER CODE END ADC1_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr

08000882 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
//  }
//  /* USER CODE BEGIN RTC_Init 2 */
//
//  /* USER CODE END RTC_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	46bd      	mov	sp, r7
 800088a:	bc80      	pop	{r7}
 800088c:	4770      	bx	lr

0800088e <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0
//  }
//  /* USER CODE BEGIN SPI1_Init 2 */
//
//  /* USER CODE END SPI1_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	bc80      	pop	{r7}
 8000898:	4770      	bx	lr

0800089a <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0
//  }
//  /* USER CODE BEGIN TIM2_Init 2 */
//
//  /* USER CODE END TIM2_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr

080008a6 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0
//  /* USER CODE BEGIN TIM3_Init 2 */
//
//  /* USER CODE END TIM3_Init 2 */
//  HAL_TIM_MspPostInit(&htim3);

}
 80008aa:	bf00      	nop
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr

080008b2 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0
//  }
//  /* USER CODE BEGIN USART1_Init 2 */
//
//  /* USER CODE END USART1_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr
	...

080008c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008c4:	4b11      	ldr	r3, [pc, #68]	; (800090c <MX_USART3_UART_Init+0x4c>)
 80008c6:	4a12      	ldr	r2, [pc, #72]	; (8000910 <MX_USART3_UART_Init+0x50>)
 80008c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80008ca:	4b10      	ldr	r3, [pc, #64]	; (800090c <MX_USART3_UART_Init+0x4c>)
 80008cc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <MX_USART3_UART_Init+0x4c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <MX_USART3_UART_Init+0x4c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <MX_USART3_UART_Init+0x4c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008e4:	4b09      	ldr	r3, [pc, #36]	; (800090c <MX_USART3_UART_Init+0x4c>)
 80008e6:	220c      	movs	r2, #12
 80008e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <MX_USART3_UART_Init+0x4c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <MX_USART3_UART_Init+0x4c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008f6:	4805      	ldr	r0, [pc, #20]	; (800090c <MX_USART3_UART_Init+0x4c>)
 80008f8:	f004 faee 	bl	8004ed8 <HAL_UART_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000902:	f000 f9c5 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000240 	.word	0x20000240
 8000910:	40004800 	.word	0x40004800

08000914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091a:	f107 0308 	add.w	r3, r7, #8
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
//
//  /* GPIO Ports Clock Enable */
//  __HAL_RCC_GPIOC_CLK_ENABLE();
//  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <MX_GPIO_Init+0x60>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	4a11      	ldr	r2, [pc, #68]	; (8000974 <MX_GPIO_Init+0x60>)
 800092e:	f043 0304 	orr.w	r3, r3, #4
 8000932:	6193      	str	r3, [r2, #24]
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <MX_GPIO_Init+0x60>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	f003 0304 	and.w	r3, r3, #4
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	687b      	ldr	r3, [r7, #4]
//
//  /*Configure GPIO pin Output Level */
//  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
//
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SIM_KEY_GPIO_Port, SIM_KEY_Pin, GPIO_PIN_RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000946:	480c      	ldr	r0, [pc, #48]	; (8000978 <MX_GPIO_Init+0x64>)
 8000948:	f001 ffe5 	bl	8002916 <HAL_GPIO_WritePin>
//  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
//  GPIO_InitStruct.Pull = GPIO_PULLUP;
//  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
//
  /*Configure GPIO pin : SIM_KEY_Pin */
  GPIO_InitStruct.Pin = SIM_KEY_Pin;
 800094c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000950:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000956:	2301      	movs	r3, #1
 8000958:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800095a:	2301      	movs	r3, #1
 800095c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SIM_KEY_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 0308 	add.w	r3, r7, #8
 8000962:	4619      	mov	r1, r3
 8000964:	4804      	ldr	r0, [pc, #16]	; (8000978 <MX_GPIO_Init+0x64>)
 8000966:	f001 fe3b 	bl	80025e0 <HAL_GPIO_Init>

}
 800096a:	bf00      	nop
 800096c:	3718      	adds	r7, #24
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40021000 	.word	0x40021000
 8000978:	40010800 	.word	0x40010800

0800097c <on_sim>:
 *
 * @pre
 * @post
 */
void on_sim()
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SIM_KEY_GPIO_Port, SIM_KEY_Pin, GPIO_PIN_SET);
 8000980:	2201      	movs	r2, #1
 8000982:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000986:	4809      	ldr	r0, [pc, #36]	; (80009ac <on_sim+0x30>)
 8000988:	f001 ffc5 	bl	8002916 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800098c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000990:	f001 f86e 	bl	8001a70 <HAL_Delay>
	HAL_GPIO_WritePin(SIM_KEY_GPIO_Port, SIM_KEY_Pin, GPIO_PIN_RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	f44f 7180 	mov.w	r1, #256	; 0x100
 800099a:	4804      	ldr	r0, [pc, #16]	; (80009ac <on_sim+0x30>)
 800099c:	f001 ffbb 	bl	8002916 <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 80009a0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80009a4:	f001 f864 	bl	8001a70 <HAL_Delay>
}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40010800 	.word	0x40010800

080009b0 <u8CheckSetup>:
 * @pre
 * @post
 * @param u8State
 */
uint8_t u8CheckSetup(uint8_t u8State)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
	if(u8State == MA_STA_RUN_MAN_LED)
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	2b0b      	cmp	r3, #11
 80009be:	d105      	bne.n	80009cc <u8CheckSetup+0x1c>
	{
		DBUG_u8SendByte((uint8_t*)"MOK\n", 4);
 80009c0:	2104      	movs	r1, #4
 80009c2:	4823      	ldr	r0, [pc, #140]	; (8000a50 <u8CheckSetup+0xa0>)
 80009c4:	f7ff fbd0 	bl	8000168 <DBUG_u8SendByte>
		return u8State;
 80009c8:	79fb      	ldrb	r3, [r7, #7]
 80009ca:	e03c      	b.n	8000a46 <u8CheckSetup+0x96>
	}

	if(u8State == MA_STA_RUN_MAN_PWM)
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	2b0c      	cmp	r3, #12
 80009d0:	d105      	bne.n	80009de <u8CheckSetup+0x2e>
	{
		DBUG_u8SendByte((uint8_t*)"MOK\n", 4);
 80009d2:	2104      	movs	r1, #4
 80009d4:	481e      	ldr	r0, [pc, #120]	; (8000a50 <u8CheckSetup+0xa0>)
 80009d6:	f7ff fbc7 	bl	8000168 <DBUG_u8SendByte>
		return u8State;
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	e033      	b.n	8000a46 <u8CheckSetup+0x96>
	}

	if(u8State == MA_STA_RUN_AUT1)
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	2b64      	cmp	r3, #100	; 0x64
 80009e2:	d105      	bne.n	80009f0 <u8CheckSetup+0x40>
	{
		DBUG_u8SendByte((uint8_t*)"A1OK\n", 5);
 80009e4:	2105      	movs	r1, #5
 80009e6:	481b      	ldr	r0, [pc, #108]	; (8000a54 <u8CheckSetup+0xa4>)
 80009e8:	f7ff fbbe 	bl	8000168 <DBUG_u8SendByte>
		return u8State;
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	e02a      	b.n	8000a46 <u8CheckSetup+0x96>
	}

	if(u8State == MA_STA_RUN_AUT2)
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	2b65      	cmp	r3, #101	; 0x65
 80009f4:	d108      	bne.n	8000a08 <u8CheckSetup+0x58>
	{
		u8PwmValueStepTemp = 0;
 80009f6:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <u8CheckSetup+0xa8>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	701a      	strb	r2, [r3, #0]
		DBUG_u8SendByte((uint8_t*)"A2OK\n", 5);
 80009fc:	2105      	movs	r1, #5
 80009fe:	4817      	ldr	r0, [pc, #92]	; (8000a5c <u8CheckSetup+0xac>)
 8000a00:	f7ff fbb2 	bl	8000168 <DBUG_u8SendByte>
		return u8State;
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	e01e      	b.n	8000a46 <u8CheckSetup+0x96>
	}

	if(u8State == MA_STA_SET_SCH)
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	2bc8      	cmp	r3, #200	; 0xc8
 8000a0c:	d106      	bne.n	8000a1c <u8CheckSetup+0x6c>
	{
		DBUG_u8SendByte((uint8_t*)"SOK\n", 4);
 8000a0e:	2104      	movs	r1, #4
 8000a10:	4813      	ldr	r0, [pc, #76]	; (8000a60 <u8CheckSetup+0xb0>)
 8000a12:	f7ff fba9 	bl	8000168 <DBUG_u8SendByte>
		return u8MachineRunState;
 8000a16:	4b13      	ldr	r3, [pc, #76]	; (8000a64 <u8CheckSetup+0xb4>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	e014      	b.n	8000a46 <u8CheckSetup+0x96>
	}

	if(u8State == MA_STA_SET_SCH_UPD)
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	2bc9      	cmp	r3, #201	; 0xc9
 8000a20:	d106      	bne.n	8000a30 <u8CheckSetup+0x80>
	{
		DBUG_u8SendByte((uint8_t*)"SROK\n", 5);
 8000a22:	2105      	movs	r1, #5
 8000a24:	4810      	ldr	r0, [pc, #64]	; (8000a68 <u8CheckSetup+0xb8>)
 8000a26:	f7ff fb9f 	bl	8000168 <DBUG_u8SendByte>
		return u8MachineRunState;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <u8CheckSetup+0xb4>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	e00a      	b.n	8000a46 <u8CheckSetup+0x96>
	}

	if(u8State == MA_STA_SET_SCH_END)
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	2bca      	cmp	r3, #202	; 0xca
 8000a34:	d106      	bne.n	8000a44 <u8CheckSetup+0x94>
	{
		DBUG_u8SendByte((uint8_t*)"SEOK\n", 5);
 8000a36:	2105      	movs	r1, #5
 8000a38:	480c      	ldr	r0, [pc, #48]	; (8000a6c <u8CheckSetup+0xbc>)
 8000a3a:	f7ff fb95 	bl	8000168 <DBUG_u8SendByte>
		return u8MachineRunState;
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <u8CheckSetup+0xb4>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	e000      	b.n	8000a46 <u8CheckSetup+0x96>
	}
	return 0;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	08005684 	.word	0x08005684
 8000a54:	0800568c 	.word	0x0800568c
 8000a58:	2000023c 	.word	0x2000023c
 8000a5c:	08005694 	.word	0x08005694
 8000a60:	0800569c 	.word	0x0800569c
 8000a64:	20000404 	.word	0x20000404
 8000a68:	080056a4 	.word	0x080056a4
 8000a6c:	080056ac 	.word	0x080056ac

08000a70 <vRun>:
 *
 * @pre
 * @post
 */
void vRun(uint8_t u8State)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
	uint16_t u16Temp;
	if(u8State == MA_STA_RUN_MAN_LED)
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	2b0b      	cmp	r3, #11
 8000a7e:	d13e      	bne.n	8000afe <vRun+0x8e>
	{
		pu8DataCmd = DBUG_pu8GetDataCmd();
 8000a80:	f7ff fdda 	bl	8000638 <DBUG_pu8GetDataCmd>
 8000a84:	4603      	mov	r3, r0
 8000a86:	4a36      	ldr	r2, [pc, #216]	; (8000b60 <vRun+0xf0>)
 8000a88:	6013      	str	r3, [r2, #0]
		if(pu8DataCmd[0] == 0x01 && pu8DataCmd[1] == 0x00)
 8000a8a:	4b35      	ldr	r3, [pc, #212]	; (8000b60 <vRun+0xf0>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d108      	bne.n	8000aa6 <vRun+0x36>
 8000a94:	4b32      	ldr	r3, [pc, #200]	; (8000b60 <vRun+0xf0>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d102      	bne.n	8000aa6 <vRun+0x36>
		{
			GPIO_u8Led1Off();
 8000aa0:	f7ff fde9 	bl	8000676 <GPIO_u8Led1Off>
 8000aa4:	e028      	b.n	8000af8 <vRun+0x88>
		}
		else if(pu8DataCmd[0] == 0x01 && pu8DataCmd[1] == 0x01)
 8000aa6:	4b2e      	ldr	r3, [pc, #184]	; (8000b60 <vRun+0xf0>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d108      	bne.n	8000ac2 <vRun+0x52>
 8000ab0:	4b2b      	ldr	r3, [pc, #172]	; (8000b60 <vRun+0xf0>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d102      	bne.n	8000ac2 <vRun+0x52>
		{
			GPIO_u8Led1On();
 8000abc:	f7ff fdd4 	bl	8000668 <GPIO_u8Led1On>
 8000ac0:	e01a      	b.n	8000af8 <vRun+0x88>
		}
		else if(pu8DataCmd[0] == 0x02 && pu8DataCmd[1] == 0x00)
 8000ac2:	4b27      	ldr	r3, [pc, #156]	; (8000b60 <vRun+0xf0>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b02      	cmp	r3, #2
 8000aca:	d108      	bne.n	8000ade <vRun+0x6e>
 8000acc:	4b24      	ldr	r3, [pc, #144]	; (8000b60 <vRun+0xf0>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d102      	bne.n	8000ade <vRun+0x6e>
		{
			GPIO_u8Led2Off();
 8000ad8:	f7ff fddb 	bl	8000692 <GPIO_u8Led2Off>
 8000adc:	e00c      	b.n	8000af8 <vRun+0x88>
		}
		else if(pu8DataCmd[0] == 0x02 && pu8DataCmd[1] == 0x01)
 8000ade:	4b20      	ldr	r3, [pc, #128]	; (8000b60 <vRun+0xf0>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	d107      	bne.n	8000af8 <vRun+0x88>
 8000ae8:	4b1d      	ldr	r3, [pc, #116]	; (8000b60 <vRun+0xf0>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	3301      	adds	r3, #1
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d101      	bne.n	8000af8 <vRun+0x88>
		{
			GPIO_u8Led2On();
 8000af4:	f7ff fdc6 	bl	8000684 <GPIO_u8Led2On>
		}
		vMachineRunStateFlush();
 8000af8:	f000 f8be 	bl	8000c78 <vMachineRunStateFlush>
	}
	else if(u8State == MA_STA_RUN_AUT2)
	{
		vAutoControl2();
	}
}
 8000afc:	e02c      	b.n	8000b58 <vRun+0xe8>
	else if(u8State == MA_STA_RUN_MAN_PWM)
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	2b0c      	cmp	r3, #12
 8000b02:	d11e      	bne.n	8000b42 <vRun+0xd2>
		pu8DataCmd = DBUG_pu8GetDataCmd();
 8000b04:	f7ff fd98 	bl	8000638 <DBUG_pu8GetDataCmd>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	4a15      	ldr	r2, [pc, #84]	; (8000b60 <vRun+0xf0>)
 8000b0c:	6013      	str	r3, [r2, #0]
		u16Temp = (uint16_t)pu8DataCmd[1];
 8000b0e:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <vRun+0xf0>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	3301      	adds	r3, #1
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	81fb      	strh	r3, [r7, #14]
		u16Temp = (u16Temp << 8) + pu8DataCmd[2];
 8000b18:	89fb      	ldrh	r3, [r7, #14]
 8000b1a:	021b      	lsls	r3, r3, #8
 8000b1c:	b29a      	uxth	r2, r3
 8000b1e:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <vRun+0xf0>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	3302      	adds	r3, #2
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	4413      	add	r3, r2
 8000b2a:	81fb      	strh	r3, [r7, #14]
		LIPWM_vSetValue(pu8DataCmd[0], u16Temp);
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <vRun+0xf0>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	89fa      	ldrh	r2, [r7, #14]
 8000b34:	4611      	mov	r1, r2
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff fddc 	bl	80006f4 <LIPWM_vSetValue>
		vMachineRunStateFlush();
 8000b3c:	f000 f89c 	bl	8000c78 <vMachineRunStateFlush>
}
 8000b40:	e00a      	b.n	8000b58 <vRun+0xe8>
	else if(u8State == MA_STA_RUN_AUT1)
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	2b64      	cmp	r3, #100	; 0x64
 8000b46:	d102      	bne.n	8000b4e <vRun+0xde>
		vAutoControl1();
 8000b48:	f000 f80c 	bl	8000b64 <vAutoControl1>
}
 8000b4c:	e004      	b.n	8000b58 <vRun+0xe8>
	else if(u8State == MA_STA_RUN_AUT2)
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	2b65      	cmp	r3, #101	; 0x65
 8000b52:	d101      	bne.n	8000b58 <vRun+0xe8>
		vAutoControl2();
 8000b54:	f000 f840 	bl	8000bd8 <vAutoControl2>
}
 8000b58:	bf00      	nop
 8000b5a:	3710      	adds	r7, #16
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000238 	.word	0x20000238

08000b64 <vAutoControl1>:
 *
 * @pre
 * @post
 */
void vAutoControl1()
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
	uint16_t u16AdcValue = LIAMBS_u16Read();
 8000b6a:	f7ff fdae 	bl	80006ca <LIAMBS_u16Read>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	80fb      	strh	r3, [r7, #6]
	if(u16AdcValue < 1000)
 8000b72:	88fb      	ldrh	r3, [r7, #6]
 8000b74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b78:	d204      	bcs.n	8000b84 <vAutoControl1+0x20>
	{
		LIPWM_vSetValue(100, 0);
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2064      	movs	r0, #100	; 0x64
 8000b7e:	f7ff fdb9 	bl	80006f4 <LIPWM_vSetValue>
	}
	else if(u16AdcValue > 3000)
	{
		LIPWM_vSetValue(25, 0);
	}
}
 8000b82:	e024      	b.n	8000bce <vAutoControl1+0x6a>
	else if((u16AdcValue >= 1000) && (u16AdcValue < 2000))
 8000b84:	88fb      	ldrh	r3, [r7, #6]
 8000b86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b8a:	d308      	bcc.n	8000b9e <vAutoControl1+0x3a>
 8000b8c:	88fb      	ldrh	r3, [r7, #6]
 8000b8e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000b92:	d204      	bcs.n	8000b9e <vAutoControl1+0x3a>
		LIPWM_vSetValue(75, 0);
 8000b94:	2100      	movs	r1, #0
 8000b96:	204b      	movs	r0, #75	; 0x4b
 8000b98:	f7ff fdac 	bl	80006f4 <LIPWM_vSetValue>
 8000b9c:	e017      	b.n	8000bce <vAutoControl1+0x6a>
	else if((u16AdcValue >= 2000) && (u16AdcValue < 3000))
 8000b9e:	88fb      	ldrh	r3, [r7, #6]
 8000ba0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000ba4:	d309      	bcc.n	8000bba <vAutoControl1+0x56>
 8000ba6:	88fb      	ldrh	r3, [r7, #6]
 8000ba8:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d804      	bhi.n	8000bba <vAutoControl1+0x56>
		LIPWM_vSetValue(50, 0);
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	2032      	movs	r0, #50	; 0x32
 8000bb4:	f7ff fd9e 	bl	80006f4 <LIPWM_vSetValue>
 8000bb8:	e009      	b.n	8000bce <vAutoControl1+0x6a>
	else if(u16AdcValue > 3000)
 8000bba:	88fb      	ldrh	r3, [r7, #6]
 8000bbc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d904      	bls.n	8000bce <vAutoControl1+0x6a>
		LIPWM_vSetValue(25, 0);
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	2019      	movs	r0, #25
 8000bc8:	f7ff fd94 	bl	80006f4 <LIPWM_vSetValue>
}
 8000bcc:	e7ff      	b.n	8000bce <vAutoControl1+0x6a>
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <vAutoControl2>:
 *
 * @pre
 * @post
 */
void vAutoControl2()
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
	RTC_vGetDateTime(&stRtcDateTime);
 8000bdc:	481f      	ldr	r0, [pc, #124]	; (8000c5c <vAutoControl2+0x84>)
 8000bde:	f000 fcc0 	bl	8001562 <RTC_vGetDateTime>
	if(u8SecondTemp != stRtcDateTime.Seconds)
 8000be2:	4b1e      	ldr	r3, [pc, #120]	; (8000c5c <vAutoControl2+0x84>)
 8000be4:	789a      	ldrb	r2, [r3, #2]
 8000be6:	4b1e      	ldr	r3, [pc, #120]	; (8000c60 <vAutoControl2+0x88>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	429a      	cmp	r2, r3
 8000bec:	d034      	beq.n	8000c58 <vAutoControl2+0x80>
	{
		u8SecondTemp = stRtcDateTime.Seconds;
 8000bee:	4b1b      	ldr	r3, [pc, #108]	; (8000c5c <vAutoControl2+0x84>)
 8000bf0:	789a      	ldrb	r2, [r3, #2]
 8000bf2:	4b1b      	ldr	r3, [pc, #108]	; (8000c60 <vAutoControl2+0x88>)
 8000bf4:	701a      	strb	r2, [r3, #0]
		u8Aut2StepTemp++;
 8000bf6:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <vAutoControl2+0x8c>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <vAutoControl2+0x8c>)
 8000c00:	701a      	strb	r2, [r3, #0]
		if(u8Aut2StepTemp>=3)
 8000c02:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <vAutoControl2+0x8c>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	d926      	bls.n	8000c58 <vAutoControl2+0x80>
		{
			u8Aut2StepTemp = 0;
 8000c0a:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <vAutoControl2+0x8c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	701a      	strb	r2, [r3, #0]

			u8PwmValueTemp = stSchedulerData.stSchedulerDataSlot[0].stSchedulerValue[u8PwmValueStepTemp].u8Value;
 8000c10:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <vAutoControl2+0x90>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	4619      	mov	r1, r3
 8000c16:	4a15      	ldr	r2, [pc, #84]	; (8000c6c <vAutoControl2+0x94>)
 8000c18:	460b      	mov	r3, r1
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	440b      	add	r3, r1
 8000c1e:	4413      	add	r3, r2
 8000c20:	3309      	adds	r3, #9
 8000c22:	781a      	ldrb	r2, [r3, #0]
 8000c24:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <vAutoControl2+0x98>)
 8000c26:	701a      	strb	r2, [r3, #0]
			u8PwmValueStepTemp++;
 8000c28:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <vAutoControl2+0x90>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	4b0d      	ldr	r3, [pc, #52]	; (8000c68 <vAutoControl2+0x90>)
 8000c32:	701a      	strb	r2, [r3, #0]
			if(u8PwmValueStepTemp>=10)
 8000c34:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <vAutoControl2+0x90>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b09      	cmp	r3, #9
 8000c3a:	d902      	bls.n	8000c42 <vAutoControl2+0x6a>
				u8PwmValueStepTemp = 0;
 8000c3c:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <vAutoControl2+0x90>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	701a      	strb	r2, [r3, #0]

			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000c42:	2101      	movs	r1, #1
 8000c44:	480b      	ldr	r0, [pc, #44]	; (8000c74 <vAutoControl2+0x9c>)
 8000c46:	f001 fe7e 	bl	8002946 <HAL_GPIO_TogglePin>

			LIPWM_vSetValue(u8PwmValueTemp, 2000);
 8000c4a:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <vAutoControl2+0x98>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff fd4e 	bl	80006f4 <LIPWM_vSetValue>
//			u8PwmValueTemp+=10;
//			if(u8PwmValueTemp > 100)
//				u8PwmValueTemp = 0;
		}
	}
}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000280 	.word	0x20000280
 8000c60:	20000348 	.word	0x20000348
 8000c64:	200002d4 	.word	0x200002d4
 8000c68:	2000023c 	.word	0x2000023c
 8000c6c:	2000040c 	.word	0x2000040c
 8000c70:	20000360 	.word	0x20000360
 8000c74:	40010c00 	.word	0x40010c00

08000c78 <vMachineRunStateFlush>:
 *
 * @pre
 * @post
 */
void vMachineRunStateFlush()
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
	u8MachineRunState = MA_STA_NOP;
 8000c7c:	4b03      	ldr	r3, [pc, #12]	; (8000c8c <vMachineRunStateFlush+0x14>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	701a      	strb	r2, [r3, #0]
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	20000404 	.word	0x20000404

08000c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c94:	b672      	cpsid	i
}
 8000c96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <Error_Handler+0x8>
	...

08000c9c <PHY_u8Uart3Init>:
 * @pre
 * @post
 * @return
 */
uint8_t PHY_u8Uart3Init()
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
	huart3.Instance = USART3;
 8000ca0:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <PHY_u8Uart3Init+0x4c>)
 8000ca2:	4a12      	ldr	r2, [pc, #72]	; (8000cec <PHY_u8Uart3Init+0x50>)
 8000ca4:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <PHY_u8Uart3Init+0x4c>)
 8000ca8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000cac:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <PHY_u8Uart3Init+0x4c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <PHY_u8Uart3Init+0x4c>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000cba:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <PHY_u8Uart3Init+0x4c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000cc0:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <PHY_u8Uart3Init+0x4c>)
 8000cc2:	220c      	movs	r2, #12
 8000cc4:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc6:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <PHY_u8Uart3Init+0x4c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <PHY_u8Uart3Init+0x4c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cd2:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <PHY_u8Uart3Init+0x4c>)
 8000cd4:	f004 f900 	bl	8004ed8 <HAL_UART_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <PHY_u8Uart3Init+0x46>
	{
		Error_Handler();
 8000cde:	f7ff ffd7 	bl	8000c90 <Error_Handler>
	}
	return HAL_OK;
 8000ce2:	2300      	movs	r3, #0
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20000240 	.word	0x20000240
 8000cec:	40004800 	.word	0x40004800

08000cf0 <PHY_u8Timer2Init>:
 * @pre
 * @post
 * @return
 */
uint8_t PHY_u8Timer2Init()
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cf6:	f107 0308 	add.w	r3, r7, #8
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d04:	463b      	mov	r3, r7
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000d0c:	4b1e      	ldr	r3, [pc, #120]	; (8000d88 <PHY_u8Timer2Init+0x98>)
 8000d0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d12:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 1000-1;
 8000d14:	4b1c      	ldr	r3, [pc, #112]	; (8000d88 <PHY_u8Timer2Init+0x98>)
 8000d16:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d1a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1c:	4b1a      	ldr	r3, [pc, #104]	; (8000d88 <PHY_u8Timer2Init+0x98>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 72-1;
 8000d22:	4b19      	ldr	r3, [pc, #100]	; (8000d88 <PHY_u8Timer2Init+0x98>)
 8000d24:	2247      	movs	r2, #71	; 0x47
 8000d26:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d28:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <PHY_u8Timer2Init+0x98>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d2e:	4b16      	ldr	r3, [pc, #88]	; (8000d88 <PHY_u8Timer2Init+0x98>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d34:	4814      	ldr	r0, [pc, #80]	; (8000d88 <PHY_u8Timer2Init+0x98>)
 8000d36:	f003 f971 	bl	800401c <HAL_TIM_Base_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <PHY_u8Timer2Init+0x54>
	{
		Error_Handler();
 8000d40:	f7ff ffa6 	bl	8000c90 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d48:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d4a:	f107 0308 	add.w	r3, r7, #8
 8000d4e:	4619      	mov	r1, r3
 8000d50:	480d      	ldr	r0, [pc, #52]	; (8000d88 <PHY_u8Timer2Init+0x98>)
 8000d52:	f003 fcc5 	bl	80046e0 <HAL_TIM_ConfigClockSource>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <PHY_u8Timer2Init+0x70>
	{
		Error_Handler();
 8000d5c:	f7ff ff98 	bl	8000c90 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d60:	2300      	movs	r3, #0
 8000d62:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d64:	2300      	movs	r3, #0
 8000d66:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d68:	463b      	mov	r3, r7
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4806      	ldr	r0, [pc, #24]	; (8000d88 <PHY_u8Timer2Init+0x98>)
 8000d6e:	f004 f843 	bl	8004df8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <PHY_u8Timer2Init+0x8c>
	{
		Error_Handler();
 8000d78:	f7ff ff8a 	bl	8000c90 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	return HAL_OK;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3718      	adds	r7, #24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	200003bc 	.word	0x200003bc

08000d8c <PHY_u8Timer2EnbInterrupt>:
 * @pre
 * @post
 * @return
 */
uint8_t PHY_u8Timer2EnbInterrupt()
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8000d90:	4802      	ldr	r0, [pc, #8]	; (8000d9c <PHY_u8Timer2EnbInterrupt+0x10>)
 8000d92:	f003 f993 	bl	80040bc <HAL_TIM_Base_Start_IT>
	return HAL_OK;
 8000d96:	2300      	movs	r3, #0
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	200003bc 	.word	0x200003bc

08000da0 <PHY_u8Timer3Init>:
 * @pre
 * @post
 * @return
 */
uint8_t PHY_u8Timer3Init()
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08e      	sub	sp, #56	; 0x38
 8000da4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000da6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db4:	f107 0320 	add.w	r3, r7, #32
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
 8000dcc:	615a      	str	r2, [r3, #20]
 8000dce:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000dd0:	4b2d      	ldr	r3, [pc, #180]	; (8000e88 <PHY_u8Timer3Init+0xe8>)
 8000dd2:	4a2e      	ldr	r2, [pc, #184]	; (8000e8c <PHY_u8Timer3Init+0xec>)
 8000dd4:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 360-1;
 8000dd6:	4b2c      	ldr	r3, [pc, #176]	; (8000e88 <PHY_u8Timer3Init+0xe8>)
 8000dd8:	f240 1267 	movw	r2, #359	; 0x167
 8000ddc:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dde:	4b2a      	ldr	r3, [pc, #168]	; (8000e88 <PHY_u8Timer3Init+0xe8>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 100-1;
 8000de4:	4b28      	ldr	r3, [pc, #160]	; (8000e88 <PHY_u8Timer3Init+0xe8>)
 8000de6:	2263      	movs	r2, #99	; 0x63
 8000de8:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dea:	4b27      	ldr	r3, [pc, #156]	; (8000e88 <PHY_u8Timer3Init+0xe8>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000df0:	4b25      	ldr	r3, [pc, #148]	; (8000e88 <PHY_u8Timer3Init+0xe8>)
 8000df2:	2280      	movs	r2, #128	; 0x80
 8000df4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000df6:	4824      	ldr	r0, [pc, #144]	; (8000e88 <PHY_u8Timer3Init+0xe8>)
 8000df8:	f003 f910 	bl	800401c <HAL_TIM_Base_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <PHY_u8Timer3Init+0x66>
	{
		Error_Handler();
 8000e02:	f7ff ff45 	bl	8000c90 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e0a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e10:	4619      	mov	r1, r3
 8000e12:	481d      	ldr	r0, [pc, #116]	; (8000e88 <PHY_u8Timer3Init+0xe8>)
 8000e14:	f003 fc64 	bl	80046e0 <HAL_TIM_ConfigClockSource>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <PHY_u8Timer3Init+0x82>
	{
		Error_Handler();
 8000e1e:	f7ff ff37 	bl	8000c90 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e22:	4819      	ldr	r0, [pc, #100]	; (8000e88 <PHY_u8Timer3Init+0xe8>)
 8000e24:	f003 f99c 	bl	8004160 <HAL_TIM_PWM_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <PHY_u8Timer3Init+0x92>
	{
		Error_Handler();
 8000e2e:	f7ff ff2f 	bl	8000c90 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e32:	2300      	movs	r3, #0
 8000e34:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e3a:	f107 0320 	add.w	r3, r7, #32
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4811      	ldr	r0, [pc, #68]	; (8000e88 <PHY_u8Timer3Init+0xe8>)
 8000e42:	f003 ffd9 	bl	8004df8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <PHY_u8Timer3Init+0xb0>
	{
		Error_Handler();
 8000e4c:	f7ff ff20 	bl	8000c90 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e50:	2360      	movs	r3, #96	; 0x60
 8000e52:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	2200      	movs	r2, #0
 8000e64:	4619      	mov	r1, r3
 8000e66:	4808      	ldr	r0, [pc, #32]	; (8000e88 <PHY_u8Timer3Init+0xe8>)
 8000e68:	f003 fb7c 	bl	8004564 <HAL_TIM_PWM_ConfigChannel>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <PHY_u8Timer3Init+0xd6>
	{
		Error_Handler();
 8000e72:	f7ff ff0d 	bl	8000c90 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000e76:	4804      	ldr	r0, [pc, #16]	; (8000e88 <PHY_u8Timer3Init+0xe8>)
 8000e78:	f000 fc48 	bl	800170c <HAL_TIM_MspPostInit>
	return HAL_OK;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3738      	adds	r7, #56	; 0x38
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000288 	.word	0x20000288
 8000e8c:	40000400 	.word	0x40000400

08000e90 <PHY_u8Timer3PwmStart>:
 * @pre
 * @post
 * @return
 */
uint8_t PHY_u8Timer3PwmStart()
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
	htim3.Instance->CCR1 = 10;
 8000e94:	4b05      	ldr	r3, [pc, #20]	; (8000eac <PHY_u8Timer3PwmStart+0x1c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	220a      	movs	r2, #10
 8000e9a:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4803      	ldr	r0, [pc, #12]	; (8000eac <PHY_u8Timer3PwmStart+0x1c>)
 8000ea0:	f003 f9b6 	bl	8004210 <HAL_TIM_PWM_Start>
	return HAL_OK;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000288 	.word	0x20000288

08000eb0 <PHY_vTimer3SetPwmValue>:
 * @post
 * @param u8Value
 * @param u16TimeSmooth
 */
void PHY_vTimer3SetPwmValue(uint8_t u8Value, uint16_t u16TimeSmooth)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	460a      	mov	r2, r1
 8000eba:	71fb      	strb	r3, [r7, #7]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	80bb      	strh	r3, [r7, #4]
	u8CurrentPwmValue = (uint8_t)htim3.Instance->CCR1;
 8000ec0:	4b25      	ldr	r3, [pc, #148]	; (8000f58 <PHY_vTimer3SetPwmValue+0xa8>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	4b24      	ldr	r3, [pc, #144]	; (8000f5c <PHY_vTimer3SetPwmValue+0xac>)
 8000eca:	701a      	strb	r2, [r3, #0]
	u8DestPwmValue = u8Value;
 8000ecc:	4a24      	ldr	r2, [pc, #144]	; (8000f60 <PHY_vTimer3SetPwmValue+0xb0>)
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	7013      	strb	r3, [r2, #0]
	u16SmoothPwmStepCount = 0;
 8000ed2:	4b24      	ldr	r3, [pc, #144]	; (8000f64 <PHY_vTimer3SetPwmValue+0xb4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	801a      	strh	r2, [r3, #0]

	if(u8CurrentPwmValue == u8DestPwmValue)
 8000ed8:	4b20      	ldr	r3, [pc, #128]	; (8000f5c <PHY_vTimer3SetPwmValue+0xac>)
 8000eda:	781a      	ldrb	r2, [r3, #0]
 8000edc:	4b20      	ldr	r3, [pc, #128]	; (8000f60 <PHY_vTimer3SetPwmValue+0xb0>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d103      	bne.n	8000eec <PHY_vTimer3SetPwmValue+0x3c>
		u8SmoothPwmActive = PWM_NOP;
 8000ee4:	4b20      	ldr	r3, [pc, #128]	; (8000f68 <PHY_vTimer3SetPwmValue+0xb8>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	701a      	strb	r2, [r3, #0]
		{
			u8SmoothPwmActive = PWM_NOP;
			htim3.Instance->CCR1 = (uint32_t)u8Value;
		}
	}
}
 8000eea:	e02f      	b.n	8000f4c <PHY_vTimer3SetPwmValue+0x9c>
		if(u8CurrentPwmValue > u8DestPwmValue)
 8000eec:	4b1b      	ldr	r3, [pc, #108]	; (8000f5c <PHY_vTimer3SetPwmValue+0xac>)
 8000eee:	781a      	ldrb	r2, [r3, #0]
 8000ef0:	4b1b      	ldr	r3, [pc, #108]	; (8000f60 <PHY_vTimer3SetPwmValue+0xb0>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d90f      	bls.n	8000f18 <PHY_vTimer3SetPwmValue+0x68>
			u16SmoothPwmStep = u16TimeSmooth/(u8CurrentPwmValue - u8DestPwmValue);
 8000ef8:	88ba      	ldrh	r2, [r7, #4]
 8000efa:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <PHY_vTimer3SetPwmValue+0xac>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	4619      	mov	r1, r3
 8000f00:	4b17      	ldr	r3, [pc, #92]	; (8000f60 <PHY_vTimer3SetPwmValue+0xb0>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	1acb      	subs	r3, r1, r3
 8000f06:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f0a:	b29a      	uxth	r2, r3
 8000f0c:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <PHY_vTimer3SetPwmValue+0xbc>)
 8000f0e:	801a      	strh	r2, [r3, #0]
			u8SmoothPwmActive = PWM_DEC;
 8000f10:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <PHY_vTimer3SetPwmValue+0xb8>)
 8000f12:	2202      	movs	r2, #2
 8000f14:	701a      	strb	r2, [r3, #0]
 8000f16:	e00e      	b.n	8000f36 <PHY_vTimer3SetPwmValue+0x86>
			u16SmoothPwmStep = u16TimeSmooth/(u8DestPwmValue - u8CurrentPwmValue);
 8000f18:	88ba      	ldrh	r2, [r7, #4]
 8000f1a:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <PHY_vTimer3SetPwmValue+0xb0>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <PHY_vTimer3SetPwmValue+0xac>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	1acb      	subs	r3, r1, r3
 8000f26:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f2a:	b29a      	uxth	r2, r3
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <PHY_vTimer3SetPwmValue+0xbc>)
 8000f2e:	801a      	strh	r2, [r3, #0]
			u8SmoothPwmActive = PWM_INC;
 8000f30:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <PHY_vTimer3SetPwmValue+0xb8>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	701a      	strb	r2, [r3, #0]
		if(u16SmoothPwmStep <= 0)
 8000f36:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <PHY_vTimer3SetPwmValue+0xbc>)
 8000f38:	881b      	ldrh	r3, [r3, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d106      	bne.n	8000f4c <PHY_vTimer3SetPwmValue+0x9c>
			u8SmoothPwmActive = PWM_NOP;
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <PHY_vTimer3SetPwmValue+0xb8>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	701a      	strb	r2, [r3, #0]
			htim3.Instance->CCR1 = (uint32_t)u8Value;
 8000f44:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <PHY_vTimer3SetPwmValue+0xa8>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	79fa      	ldrb	r2, [r7, #7]
 8000f4a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bc80      	pop	{r7}
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	20000288 	.word	0x20000288
 8000f5c:	200005d3 	.word	0x200005d3
 8000f60:	200005d6 	.word	0x200005d6
 8000f64:	200005d0 	.word	0x200005d0
 8000f68:	20000505 	.word	0x20000505
 8000f6c:	20000502 	.word	0x20000502

08000f70 <PHY_u8ButtonGpioInit>:
 * @pre
 * @post
 * @return
 */
uint8_t PHY_u8ButtonGpioInit()
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f76:	f107 0308 	add.w	r3, r7, #8
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f84:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <PHY_u8ButtonGpioInit+0x50>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	4a0d      	ldr	r2, [pc, #52]	; (8000fc0 <PHY_u8ButtonGpioInit+0x50>)
 8000f8a:	f043 0308 	orr.w	r3, r3, #8
 8000f8e:	6193      	str	r3, [r2, #24]
 8000f90:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <PHY_u8ButtonGpioInit+0x50>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	f003 0308 	and.w	r3, r3, #8
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pins : BT_01_Pin BT_02_Pin */
	GPIO_InitStruct.Pin = BT_01_Pin|BT_02_Pin;
 8000f9c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000fa0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000faa:	f107 0308 	add.w	r3, r7, #8
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4804      	ldr	r0, [pc, #16]	; (8000fc4 <PHY_u8ButtonGpioInit+0x54>)
 8000fb2:	f001 fb15 	bl	80025e0 <HAL_GPIO_Init>

	return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3718      	adds	r7, #24
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	40010c00 	.word	0x40010c00

08000fc8 <PHY_u8LedGpioInit>:
 * @pre
 * @post
 * @return
 */
uint8_t PHY_u8LedGpioInit()
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fce:	f107 0308 	add.w	r3, r7, #8
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000fdc:	4b11      	ldr	r3, [pc, #68]	; (8001024 <PHY_u8LedGpioInit+0x5c>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	4a10      	ldr	r2, [pc, #64]	; (8001024 <PHY_u8LedGpioInit+0x5c>)
 8000fe2:	f043 0308 	orr.w	r3, r3, #8
 8000fe6:	6193      	str	r3, [r2, #24]
 8000fe8:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <PHY_u8LedGpioInit+0x5c>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	f003 0308 	and.w	r3, r3, #8
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	2103      	movs	r1, #3
 8000ff8:	480b      	ldr	r0, [pc, #44]	; (8001028 <PHY_u8LedGpioInit+0x60>)
 8000ffa:	f001 fc8c 	bl	8002916 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LED1_Pin LED2_Pin */
	GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000ffe:	2303      	movs	r3, #3
 8001000:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001002:	2301      	movs	r3, #1
 8001004:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001006:	2301      	movs	r3, #1
 8001008:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800100a:	2301      	movs	r3, #1
 800100c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100e:	f107 0308 	add.w	r3, r7, #8
 8001012:	4619      	mov	r1, r3
 8001014:	4804      	ldr	r0, [pc, #16]	; (8001028 <PHY_u8LedGpioInit+0x60>)
 8001016:	f001 fae3 	bl	80025e0 <HAL_GPIO_Init>

	return HAL_OK;
 800101a:	2300      	movs	r3, #0
}
 800101c:	4618      	mov	r0, r3
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40021000 	.word	0x40021000
 8001028:	40010c00 	.word	0x40010c00

0800102c <PHY_u8Led1On>:
 * @pre
 * @post
 * @return
 */
uint8_t PHY_u8Led1On()
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001030:	2200      	movs	r2, #0
 8001032:	2101      	movs	r1, #1
 8001034:	4802      	ldr	r0, [pc, #8]	; (8001040 <PHY_u8Led1On+0x14>)
 8001036:	f001 fc6e 	bl	8002916 <HAL_GPIO_WritePin>
	return HAL_OK;
 800103a:	2300      	movs	r3, #0
}
 800103c:	4618      	mov	r0, r3
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40010c00 	.word	0x40010c00

08001044 <PHY_u8Led1Off>:
 * @pre
 * @post
 * @return
 */
uint8_t PHY_u8Led1Off()
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001048:	2201      	movs	r2, #1
 800104a:	2101      	movs	r1, #1
 800104c:	4802      	ldr	r0, [pc, #8]	; (8001058 <PHY_u8Led1Off+0x14>)
 800104e:	f001 fc62 	bl	8002916 <HAL_GPIO_WritePin>
	return HAL_OK;
 8001052:	2300      	movs	r3, #0
}
 8001054:	4618      	mov	r0, r3
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40010c00 	.word	0x40010c00

0800105c <PHY_u8Led2On>:
 * @pre
 * @post
 * @return
 */
uint8_t PHY_u8Led2On()
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001060:	2200      	movs	r2, #0
 8001062:	2102      	movs	r1, #2
 8001064:	4802      	ldr	r0, [pc, #8]	; (8001070 <PHY_u8Led2On+0x14>)
 8001066:	f001 fc56 	bl	8002916 <HAL_GPIO_WritePin>
	return HAL_OK;
 800106a:	2300      	movs	r3, #0
}
 800106c:	4618      	mov	r0, r3
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40010c00 	.word	0x40010c00

08001074 <PHY_u8Led2Off>:
 * @pre
 * @post
 * @return
 */
uint8_t PHY_u8Led2Off()
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001078:	2201      	movs	r2, #1
 800107a:	2102      	movs	r1, #2
 800107c:	4802      	ldr	r0, [pc, #8]	; (8001088 <PHY_u8Led2Off+0x14>)
 800107e:	f001 fc4a 	bl	8002916 <HAL_GPIO_WritePin>
	return HAL_OK;
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40010c00 	.word	0x40010c00

0800108c <PHY_u8RtcInit>:
 * @pre
 * @post
 * @return
 */
uint8_t PHY_u8RtcInit()
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = {0};
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	2100      	movs	r1, #0
 8001096:	460a      	mov	r2, r1
 8001098:	801a      	strh	r2, [r3, #0]
 800109a:	460a      	mov	r2, r1
 800109c:	709a      	strb	r2, [r3, #2]
	RTC_DateTypeDef DateToUpdate = {0};
 800109e:	2300      	movs	r3, #0
 80010a0:	603b      	str	r3, [r7, #0]
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	*/
	hrtc.Instance = RTC;
 80010a2:	4b1e      	ldr	r3, [pc, #120]	; (800111c <PHY_u8RtcInit+0x90>)
 80010a4:	4a1e      	ldr	r2, [pc, #120]	; (8001120 <PHY_u8RtcInit+0x94>)
 80010a6:	601a      	str	r2, [r3, #0]
	hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80010a8:	4b1c      	ldr	r3, [pc, #112]	; (800111c <PHY_u8RtcInit+0x90>)
 80010aa:	f04f 32ff 	mov.w	r2, #4294967295
 80010ae:	605a      	str	r2, [r3, #4]
	hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80010b0:	4b1a      	ldr	r3, [pc, #104]	; (800111c <PHY_u8RtcInit+0x90>)
 80010b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010b6:	609a      	str	r2, [r3, #8]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010b8:	4818      	ldr	r0, [pc, #96]	; (800111c <PHY_u8RtcInit+0x90>)
 80010ba:	f002 f9fd 	bl	80034b8 <HAL_RTC_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <PHY_u8RtcInit+0x3c>
	{
		Error_Handler();
 80010c4:	f7ff fde4 	bl	8000c90 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	*/
	sTime.Hours = 0x11;
 80010c8:	2311      	movs	r3, #17
 80010ca:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x25;
 80010cc:	2325      	movs	r3, #37	; 0x25
 80010ce:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	71bb      	strb	r3, [r7, #6]

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80010d4:	1d3b      	adds	r3, r7, #4
 80010d6:	2201      	movs	r2, #1
 80010d8:	4619      	mov	r1, r3
 80010da:	4810      	ldr	r0, [pc, #64]	; (800111c <PHY_u8RtcInit+0x90>)
 80010dc:	f002 fa82 	bl	80035e4 <HAL_RTC_SetTime>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <PHY_u8RtcInit+0x5e>
	{
		Error_Handler();
 80010e6:	f7ff fdd3 	bl	8000c90 <Error_Handler>
	}
	DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80010ea:	2301      	movs	r3, #1
 80010ec:	703b      	strb	r3, [r7, #0]
	DateToUpdate.Month = RTC_MONTH_JUNE;
 80010ee:	2306      	movs	r3, #6
 80010f0:	707b      	strb	r3, [r7, #1]
	DateToUpdate.Date = 0x21;
 80010f2:	2321      	movs	r3, #33	; 0x21
 80010f4:	70bb      	strb	r3, [r7, #2]
	DateToUpdate.Year = 0x21;
 80010f6:	2321      	movs	r3, #33	; 0x21
 80010f8:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80010fa:	463b      	mov	r3, r7
 80010fc:	2201      	movs	r2, #1
 80010fe:	4619      	mov	r1, r3
 8001100:	4806      	ldr	r0, [pc, #24]	; (800111c <PHY_u8RtcInit+0x90>)
 8001102:	f002 fbdf 	bl	80038c4 <HAL_RTC_SetDate>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <PHY_u8RtcInit+0x84>
	{
		Error_Handler();
 800110c:	f7ff fdc0 	bl	8000c90 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */
	return HAL_OK;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	2000034c 	.word	0x2000034c
 8001120:	40002800 	.word	0x40002800

08001124 <PHY_vGetDateTime>:
 * @pre
 * @post
 * @param hRTC_DateTime
 */
void PHY_vGetDateTime(RTC_DateTimeTypedef* hRTC_DateTime)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef hRTC_Date = {0};
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
	RTC_TimeTypeDef hRTC_Time = {0};
 8001130:	f107 0308 	add.w	r3, r7, #8
 8001134:	2100      	movs	r1, #0
 8001136:	460a      	mov	r2, r1
 8001138:	801a      	strh	r2, [r3, #0]
 800113a:	460a      	mov	r2, r1
 800113c:	709a      	strb	r2, [r3, #2]

	HAL_RTC_GetDate(&hrtc, &hRTC_Date, RTC_FORMAT_BIN);
 800113e:	f107 030c 	add.w	r3, r7, #12
 8001142:	2200      	movs	r2, #0
 8001144:	4619      	mov	r1, r3
 8001146:	483f      	ldr	r0, [pc, #252]	; (8001244 <PHY_vGetDateTime+0x120>)
 8001148:	f002 fc72 	bl	8003a30 <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc, &hRTC_Time, RTC_FORMAT_BIN);
 800114c:	f107 0308 	add.w	r3, r7, #8
 8001150:	2200      	movs	r2, #0
 8001152:	4619      	mov	r1, r3
 8001154:	483b      	ldr	r0, [pc, #236]	; (8001244 <PHY_vGetDateTime+0x120>)
 8001156:	f002 fadd 	bl	8003714 <HAL_RTC_GetTime>

	hRTC_DateTime->Hours = (hRTC_Time.Hours >> 4)*10 + (hRTC_Time.Hours & 0x0f);
 800115a:	7a3b      	ldrb	r3, [r7, #8]
 800115c:	091b      	lsrs	r3, r3, #4
 800115e:	b2db      	uxtb	r3, r3
 8001160:	461a      	mov	r2, r3
 8001162:	0092      	lsls	r2, r2, #2
 8001164:	4413      	add	r3, r2
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	b2da      	uxtb	r2, r3
 800116a:	7a3b      	ldrb	r3, [r7, #8]
 800116c:	f003 030f 	and.w	r3, r3, #15
 8001170:	b2db      	uxtb	r3, r3
 8001172:	4413      	add	r3, r2
 8001174:	b2da      	uxtb	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	701a      	strb	r2, [r3, #0]
	hRTC_DateTime->Minutes = (hRTC_Time.Minutes >> 4)*10 + (hRTC_Time.Minutes & 0x0f);
 800117a:	7a7b      	ldrb	r3, [r7, #9]
 800117c:	091b      	lsrs	r3, r3, #4
 800117e:	b2db      	uxtb	r3, r3
 8001180:	461a      	mov	r2, r3
 8001182:	0092      	lsls	r2, r2, #2
 8001184:	4413      	add	r3, r2
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	b2da      	uxtb	r2, r3
 800118a:	7a7b      	ldrb	r3, [r7, #9]
 800118c:	f003 030f 	and.w	r3, r3, #15
 8001190:	b2db      	uxtb	r3, r3
 8001192:	4413      	add	r3, r2
 8001194:	b2da      	uxtb	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	705a      	strb	r2, [r3, #1]
	hRTC_DateTime->Seconds = (hRTC_Time.Seconds >> 4)*10 + (hRTC_Time.Seconds & 0x0f);
 800119a:	7abb      	ldrb	r3, [r7, #10]
 800119c:	091b      	lsrs	r3, r3, #4
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	461a      	mov	r2, r3
 80011a2:	0092      	lsls	r2, r2, #2
 80011a4:	4413      	add	r3, r2
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	7abb      	ldrb	r3, [r7, #10]
 80011ac:	f003 030f 	and.w	r3, r3, #15
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	4413      	add	r3, r2
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	709a      	strb	r2, [r3, #2]

	hRTC_DateTime->WeekDay = (hRTC_Date.WeekDay >> 4)*10 + (hRTC_Date.WeekDay & 0x0f);
 80011ba:	7b3b      	ldrb	r3, [r7, #12]
 80011bc:	091b      	lsrs	r3, r3, #4
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	461a      	mov	r2, r3
 80011c2:	0092      	lsls	r2, r2, #2
 80011c4:	4413      	add	r3, r2
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	7b3b      	ldrb	r3, [r7, #12]
 80011cc:	f003 030f 	and.w	r3, r3, #15
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	4413      	add	r3, r2
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	70da      	strb	r2, [r3, #3]
	hRTC_DateTime->Month = (hRTC_Date.Month >> 4)*10 + (hRTC_Date.Month & 0x0f);
 80011da:	7b7b      	ldrb	r3, [r7, #13]
 80011dc:	091b      	lsrs	r3, r3, #4
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	461a      	mov	r2, r3
 80011e2:	0092      	lsls	r2, r2, #2
 80011e4:	4413      	add	r3, r2
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	7b7b      	ldrb	r3, [r7, #13]
 80011ec:	f003 030f 	and.w	r3, r3, #15
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	4413      	add	r3, r2
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	711a      	strb	r2, [r3, #4]
	hRTC_DateTime->Date = (hRTC_Date.Date >> 4)*10 + (hRTC_Date.Date & 0x0f);
 80011fa:	7bbb      	ldrb	r3, [r7, #14]
 80011fc:	091b      	lsrs	r3, r3, #4
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	461a      	mov	r2, r3
 8001202:	0092      	lsls	r2, r2, #2
 8001204:	4413      	add	r3, r2
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	b2da      	uxtb	r2, r3
 800120a:	7bbb      	ldrb	r3, [r7, #14]
 800120c:	f003 030f 	and.w	r3, r3, #15
 8001210:	b2db      	uxtb	r3, r3
 8001212:	4413      	add	r3, r2
 8001214:	b2da      	uxtb	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	715a      	strb	r2, [r3, #5]
	hRTC_DateTime->Year = (hRTC_Date.Year >> 4)*10 + (hRTC_Date.Year & 0x0f);
 800121a:	7bfb      	ldrb	r3, [r7, #15]
 800121c:	091b      	lsrs	r3, r3, #4
 800121e:	b2db      	uxtb	r3, r3
 8001220:	461a      	mov	r2, r3
 8001222:	0092      	lsls	r2, r2, #2
 8001224:	4413      	add	r3, r2
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	b2da      	uxtb	r2, r3
 800122a:	7bfb      	ldrb	r3, [r7, #15]
 800122c:	f003 030f 	and.w	r3, r3, #15
 8001230:	b2db      	uxtb	r3, r3
 8001232:	4413      	add	r3, r2
 8001234:	b2da      	uxtb	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	719a      	strb	r2, [r3, #6]
}
 800123a:	bf00      	nop
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	2000034c 	.word	0x2000034c

08001248 <PHY_u8Adc1Init>:
 * @pre
 * @post
 * @return
 */
uint8_t PHY_u8Adc1Init()
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	hadc1.Instance = ADC1;
 8001258:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <PHY_u8Adc1Init+0x78>)
 800125a:	4a1a      	ldr	r2, [pc, #104]	; (80012c4 <PHY_u8Adc1Init+0x7c>)
 800125c:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800125e:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <PHY_u8Adc1Init+0x78>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001264:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <PHY_u8Adc1Init+0x78>)
 8001266:	2200      	movs	r2, #0
 8001268:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <PHY_u8Adc1Init+0x78>)
 800126c:	2200      	movs	r2, #0
 800126e:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001270:	4b13      	ldr	r3, [pc, #76]	; (80012c0 <PHY_u8Adc1Init+0x78>)
 8001272:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001276:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001278:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <PHY_u8Adc1Init+0x78>)
 800127a:	2200      	movs	r2, #0
 800127c:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 800127e:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <PHY_u8Adc1Init+0x78>)
 8001280:	2201      	movs	r2, #1
 8001282:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001284:	480e      	ldr	r0, [pc, #56]	; (80012c0 <PHY_u8Adc1Init+0x78>)
 8001286:	f000 fc17 	bl	8001ab8 <HAL_ADC_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <PHY_u8Adc1Init+0x4c>
	{
		Error_Handler();
 8001290:	f7ff fcfe 	bl	8000c90 <Error_Handler>
	}
	/** Configure Regular Channel
	*/
	sConfig.Channel = ADC_CHANNEL_0;
 8001294:	2300      	movs	r3, #0
 8001296:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001298:	2301      	movs	r3, #1
 800129a:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800129c:	2300      	movs	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	4619      	mov	r1, r3
 80012a4:	4806      	ldr	r0, [pc, #24]	; (80012c0 <PHY_u8Adc1Init+0x78>)
 80012a6:	f000 fe93 	bl	8001fd0 <HAL_ADC_ConfigChannel>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <PHY_u8Adc1Init+0x6c>
	{
		Error_Handler();
 80012b0:	f7ff fcee 	bl	8000c90 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */
	return HAL_OK;
 80012b4:	2300      	movs	r3, #0
	/* USER CODE END ADC1_Init 2 */
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200002d8 	.word	0x200002d8
 80012c4:	40012400 	.word	0x40012400

080012c8 <PHY_u16Adc1Read>:
 * @pre
 * @post
 * @return
 */
uint16_t PHY_u16Adc1Read()
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
	uint16_t mResult = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Start(&hadc1);
 80012d2:	4809      	ldr	r0, [pc, #36]	; (80012f8 <PHY_u16Adc1Read+0x30>)
 80012d4:	f000 fcc8 	bl	8001c68 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80012d8:	f04f 31ff 	mov.w	r1, #4294967295
 80012dc:	4806      	ldr	r0, [pc, #24]	; (80012f8 <PHY_u16Adc1Read+0x30>)
 80012de:	f000 fd71 	bl	8001dc4 <HAL_ADC_PollForConversion>
	mResult = HAL_ADC_GetValue(&hadc1);
 80012e2:	4805      	ldr	r0, [pc, #20]	; (80012f8 <PHY_u16Adc1Read+0x30>)
 80012e4:	f000 fe68 	bl	8001fb8 <HAL_ADC_GetValue>
 80012e8:	4603      	mov	r3, r0
 80012ea:	80fb      	strh	r3, [r7, #6]
	return mResult;
 80012ec:	88fb      	ldrh	r3, [r7, #6]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	200002d8 	.word	0x200002d8

080012fc <PHY_u8Uart3EnbInterrupt>:
 * @pre
 * @post
 * @return
 */
uint8_t PHY_u8Uart3EnbInterrupt()
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
	uint8_t u8Flush;
	u8Uart3IrptState = 0;
 8001302:	4b0d      	ldr	r3, [pc, #52]	; (8001338 <PHY_u8Uart3EnbInterrupt+0x3c>)
 8001304:	2200      	movs	r2, #0
 8001306:	701a      	strb	r2, [r3, #0]
	for(u8Flush = 0; u8Flush < RX_MAX_LEN; u8Flush++)
 8001308:	2300      	movs	r3, #0
 800130a:	71fb      	strb	r3, [r7, #7]
 800130c:	e006      	b.n	800131c <PHY_u8Uart3EnbInterrupt+0x20>
		u8Rx3Data[u8Flush] = 0;
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	4a0a      	ldr	r2, [pc, #40]	; (800133c <PHY_u8Uart3EnbInterrupt+0x40>)
 8001312:	2100      	movs	r1, #0
 8001314:	54d1      	strb	r1, [r2, r3]
	for(u8Flush = 0; u8Flush < RX_MAX_LEN; u8Flush++)
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	3301      	adds	r3, #1
 800131a:	71fb      	strb	r3, [r7, #7]
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	2b13      	cmp	r3, #19
 8001320:	d9f5      	bls.n	800130e <PHY_u8Uart3EnbInterrupt+0x12>
	HAL_UART_Receive_IT(&huart3, (uint8_t*)u8Rx3Data, RX_MAX_LEN);
 8001322:	2214      	movs	r2, #20
 8001324:	4905      	ldr	r1, [pc, #20]	; (800133c <PHY_u8Uart3EnbInterrupt+0x40>)
 8001326:	4806      	ldr	r0, [pc, #24]	; (8001340 <PHY_u8Uart3EnbInterrupt+0x44>)
 8001328:	f003 fe67 	bl	8004ffa <HAL_UART_Receive_IT>
	return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000506 	.word	0x20000506
 800133c:	2000015c 	.word	0x2000015c
 8001340:	20000240 	.word	0x20000240

08001344 <PHY_u8Uart3ReturnRxByte>:
 * @pre
 * @post
 * @return
 */
uint8_t* PHY_u8Uart3ReturnRxByte()
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
	if(u8Uart3IrptState == 1)
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <PHY_u8Uart3ReturnRxByte+0x20>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d104      	bne.n	800135a <PHY_u8Uart3ReturnRxByte+0x16>
	{
		u8Uart3IrptState = 0;
 8001350:	4b04      	ldr	r3, [pc, #16]	; (8001364 <PHY_u8Uart3ReturnRxByte+0x20>)
 8001352:	2200      	movs	r2, #0
 8001354:	701a      	strb	r2, [r3, #0]
		return (uint8_t*)u8Rx3Data;
 8001356:	4b04      	ldr	r3, [pc, #16]	; (8001368 <PHY_u8Uart3ReturnRxByte+0x24>)
 8001358:	e000      	b.n	800135c <PHY_u8Uart3ReturnRxByte+0x18>
	}
	return (uint8_t*)u8Uart3RxByte;
 800135a:	4b04      	ldr	r3, [pc, #16]	; (800136c <PHY_u8Uart3ReturnRxByte+0x28>)
}
 800135c:	4618      	mov	r0, r3
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr
 8001364:	20000506 	.word	0x20000506
 8001368:	2000015c 	.word	0x2000015c
 800136c:	20000508 	.word	0x20000508

08001370 <PHY_u8Uart3SendByte>:
 * @pre
 * @post
 * @return
 */
uint8_t PHY_u8Uart3SendByte(uint8_t* pu8Data, uint16_t u16Len)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	807b      	strh	r3, [r7, #2]
	return HAL_UART_Transmit_IT(&huart3, pu8Data, u16Len);
 800137c:	887b      	ldrh	r3, [r7, #2]
 800137e:	461a      	mov	r2, r3
 8001380:	6879      	ldr	r1, [r7, #4]
 8001382:	4804      	ldr	r0, [pc, #16]	; (8001394 <PHY_u8Uart3SendByte+0x24>)
 8001384:	f003 fdf5 	bl	8004f72 <HAL_UART_Transmit_IT>
 8001388:	4603      	mov	r3, r0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000240 	.word	0x20000240

08001398 <HAL_UART_RxCpltCallback>:
 * @post
 * @param Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
 */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart1.Instance)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <HAL_UART_RxCpltCallback+0x30>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d008      	beq.n	80013be <HAL_UART_RxCpltCallback+0x26>
	{

	}
	else if(huart->Instance == huart3.Instance)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <HAL_UART_RxCpltCallback+0x34>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d102      	bne.n	80013be <HAL_UART_RxCpltCallback+0x26>
	{
		u8Uart3IrptState = 1;
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <HAL_UART_RxCpltCallback+0x38>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	701a      	strb	r2, [r3, #0]
//		HAL_UART_Receive_IT(&huart3, (uint8_t*)u8Rx3Data, RX_MAX_LEN);
	}
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr
 80013c8:	20000308 	.word	0x20000308
 80013cc:	20000240 	.word	0x20000240
 80013d0:	20000506 	.word	0x20000506

080013d4 <HAL_TIM_PeriodElapsedCallback>:
 * @pre
 * @post
 * @param htim
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]

	if(htim->Instance == htim2.Instance)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d103      	bne.n	80013f0 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		vButtonRead();
 80013e8:	f000 f808 	bl	80013fc <vButtonRead>
		vSmoothPwmActive();
 80013ec:	f000 f846 	bl	800147c <vSmoothPwmActive>

	}
}
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	200003bc 	.word	0x200003bc

080013fc <vButtonRead>:
 *
 * @pre
 * @post
 */
void vButtonRead()
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(BT_01_GPIO_Port, BT_01_Pin) == GPIO_PIN_RESET)
 8001400:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001404:	4819      	ldr	r0, [pc, #100]	; (800146c <vButtonRead+0x70>)
 8001406:	f001 fa6f 	bl	80028e8 <HAL_GPIO_ReadPin>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d107      	bne.n	8001420 <vButtonRead+0x24>
	{
		if(u8Button1Detect == 0)
 8001410:	4b17      	ldr	r3, [pc, #92]	; (8001470 <vButtonRead+0x74>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d10d      	bne.n	8001434 <vButtonRead+0x38>
			u8Button1Detect = 1;
 8001418:	4b15      	ldr	r3, [pc, #84]	; (8001470 <vButtonRead+0x74>)
 800141a:	2201      	movs	r2, #1
 800141c:	701a      	strb	r2, [r3, #0]
 800141e:	e009      	b.n	8001434 <vButtonRead+0x38>
	}
	else
	{
		if(u8Button1Detect == 1)
 8001420:	4b13      	ldr	r3, [pc, #76]	; (8001470 <vButtonRead+0x74>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d105      	bne.n	8001434 <vButtonRead+0x38>
		{
			u8Button1Detect = 0;
 8001428:	4b11      	ldr	r3, [pc, #68]	; (8001470 <vButtonRead+0x74>)
 800142a:	2200      	movs	r2, #0
 800142c:	701a      	strb	r2, [r3, #0]
			u8ButtonState = 1;
 800142e:	4b11      	ldr	r3, [pc, #68]	; (8001474 <vButtonRead+0x78>)
 8001430:	2201      	movs	r2, #1
 8001432:	701a      	strb	r2, [r3, #0]
		}
	}

	if(HAL_GPIO_ReadPin(BT_02_GPIO_Port, BT_02_Pin) == GPIO_PIN_RESET)
 8001434:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001438:	480c      	ldr	r0, [pc, #48]	; (800146c <vButtonRead+0x70>)
 800143a:	f001 fa55 	bl	80028e8 <HAL_GPIO_ReadPin>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d107      	bne.n	8001454 <vButtonRead+0x58>
	{
		if(u8Button2Detect == 0)
 8001444:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <vButtonRead+0x7c>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d10d      	bne.n	8001468 <vButtonRead+0x6c>
			u8Button2Detect = 1;
 800144c:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <vButtonRead+0x7c>)
 800144e:	2201      	movs	r2, #1
 8001450:	701a      	strb	r2, [r3, #0]
		{
			u8Button2Detect = 0;
			u8ButtonState = 2;
		}
	}
}
 8001452:	e009      	b.n	8001468 <vButtonRead+0x6c>
		if(u8Button2Detect == 1)
 8001454:	4b08      	ldr	r3, [pc, #32]	; (8001478 <vButtonRead+0x7c>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d105      	bne.n	8001468 <vButtonRead+0x6c>
			u8Button2Detect = 0;
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <vButtonRead+0x7c>)
 800145e:	2200      	movs	r2, #0
 8001460:	701a      	strb	r2, [r3, #0]
			u8ButtonState = 2;
 8001462:	4b04      	ldr	r3, [pc, #16]	; (8001474 <vButtonRead+0x78>)
 8001464:	2202      	movs	r2, #2
 8001466:	701a      	strb	r2, [r3, #0]
}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40010c00 	.word	0x40010c00
 8001470:	200005d2 	.word	0x200005d2
 8001474:	200005d4 	.word	0x200005d4
 8001478:	20000504 	.word	0x20000504

0800147c <vSmoothPwmActive>:
 *
 * @pre
 * @post
 */
void vSmoothPwmActive()
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
	if(u8SmoothPwmActive == PWM_INC)
 8001480:	4b2f      	ldr	r3, [pc, #188]	; (8001540 <vSmoothPwmActive+0xc4>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d123      	bne.n	80014d0 <vSmoothPwmActive+0x54>
	{
		u16SmoothPwmStepCount++;
 8001488:	4b2e      	ldr	r3, [pc, #184]	; (8001544 <vSmoothPwmActive+0xc8>)
 800148a:	881b      	ldrh	r3, [r3, #0]
 800148c:	3301      	adds	r3, #1
 800148e:	b29a      	uxth	r2, r3
 8001490:	4b2c      	ldr	r3, [pc, #176]	; (8001544 <vSmoothPwmActive+0xc8>)
 8001492:	801a      	strh	r2, [r3, #0]
		if(u16SmoothPwmStepCount>= u16SmoothPwmStep)
 8001494:	4b2b      	ldr	r3, [pc, #172]	; (8001544 <vSmoothPwmActive+0xc8>)
 8001496:	881a      	ldrh	r2, [r3, #0]
 8001498:	4b2b      	ldr	r3, [pc, #172]	; (8001548 <vSmoothPwmActive+0xcc>)
 800149a:	881b      	ldrh	r3, [r3, #0]
 800149c:	429a      	cmp	r2, r3
 800149e:	d34b      	bcc.n	8001538 <vSmoothPwmActive+0xbc>
		{
			u16SmoothPwmStepCount = 0;
 80014a0:	4b28      	ldr	r3, [pc, #160]	; (8001544 <vSmoothPwmActive+0xc8>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	801a      	strh	r2, [r3, #0]
			htim3.Instance->CCR1++;
 80014a6:	4b29      	ldr	r3, [pc, #164]	; (800154c <vSmoothPwmActive+0xd0>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014ac:	3201      	adds	r2, #1
 80014ae:	635a      	str	r2, [r3, #52]	; 0x34
			if(htim3.Instance->CCR1>= (uint32_t)u8DestPwmValue)
 80014b0:	4b26      	ldr	r3, [pc, #152]	; (800154c <vSmoothPwmActive+0xd0>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014b6:	4a26      	ldr	r2, [pc, #152]	; (8001550 <vSmoothPwmActive+0xd4>)
 80014b8:	7812      	ldrb	r2, [r2, #0]
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d33c      	bcc.n	8001538 <vSmoothPwmActive+0xbc>
			{
				htim3.Instance->CCR1 = (uint32_t)u8DestPwmValue;
 80014be:	4b24      	ldr	r3, [pc, #144]	; (8001550 <vSmoothPwmActive+0xd4>)
 80014c0:	781a      	ldrb	r2, [r3, #0]
 80014c2:	4b22      	ldr	r3, [pc, #136]	; (800154c <vSmoothPwmActive+0xd0>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	635a      	str	r2, [r3, #52]	; 0x34
				u8SmoothPwmActive = PWM_NOP;
 80014c8:	4b1d      	ldr	r3, [pc, #116]	; (8001540 <vSmoothPwmActive+0xc4>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	701a      	strb	r2, [r3, #0]
					u8SmoothPwmActive = PWM_NOP;
				}
			}
		}
	}
}
 80014ce:	e033      	b.n	8001538 <vSmoothPwmActive+0xbc>
	else if(u8SmoothPwmActive == PWM_DEC)
 80014d0:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <vSmoothPwmActive+0xc4>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d12f      	bne.n	8001538 <vSmoothPwmActive+0xbc>
		u16SmoothPwmStepCount++;
 80014d8:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <vSmoothPwmActive+0xc8>)
 80014da:	881b      	ldrh	r3, [r3, #0]
 80014dc:	3301      	adds	r3, #1
 80014de:	b29a      	uxth	r2, r3
 80014e0:	4b18      	ldr	r3, [pc, #96]	; (8001544 <vSmoothPwmActive+0xc8>)
 80014e2:	801a      	strh	r2, [r3, #0]
		if(u16SmoothPwmStepCount>= u16SmoothPwmStep)
 80014e4:	4b17      	ldr	r3, [pc, #92]	; (8001544 <vSmoothPwmActive+0xc8>)
 80014e6:	881a      	ldrh	r2, [r3, #0]
 80014e8:	4b17      	ldr	r3, [pc, #92]	; (8001548 <vSmoothPwmActive+0xcc>)
 80014ea:	881b      	ldrh	r3, [r3, #0]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d323      	bcc.n	8001538 <vSmoothPwmActive+0xbc>
			u16SmoothPwmStepCount = 0;
 80014f0:	4b14      	ldr	r3, [pc, #80]	; (8001544 <vSmoothPwmActive+0xc8>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	801a      	strh	r2, [r3, #0]
			if(htim3.Instance->CCR1 <= 0)
 80014f6:	4b15      	ldr	r3, [pc, #84]	; (800154c <vSmoothPwmActive+0xd0>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d107      	bne.n	8001510 <vSmoothPwmActive+0x94>
				htim3.Instance->CCR1 = 0;
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <vSmoothPwmActive+0xd0>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2200      	movs	r2, #0
 8001506:	635a      	str	r2, [r3, #52]	; 0x34
				u8SmoothPwmActive = PWM_NOP;
 8001508:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <vSmoothPwmActive+0xc4>)
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]
}
 800150e:	e013      	b.n	8001538 <vSmoothPwmActive+0xbc>
				htim3.Instance->CCR1--;
 8001510:	4b0e      	ldr	r3, [pc, #56]	; (800154c <vSmoothPwmActive+0xd0>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001516:	3a01      	subs	r2, #1
 8001518:	635a      	str	r2, [r3, #52]	; 0x34
				if(htim3.Instance->CCR1<= (uint32_t)u8DestPwmValue)
 800151a:	4b0c      	ldr	r3, [pc, #48]	; (800154c <vSmoothPwmActive+0xd0>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001520:	4a0b      	ldr	r2, [pc, #44]	; (8001550 <vSmoothPwmActive+0xd4>)
 8001522:	7812      	ldrb	r2, [r2, #0]
 8001524:	4293      	cmp	r3, r2
 8001526:	d807      	bhi.n	8001538 <vSmoothPwmActive+0xbc>
					htim3.Instance->CCR1 = (uint32_t)u8DestPwmValue;
 8001528:	4b09      	ldr	r3, [pc, #36]	; (8001550 <vSmoothPwmActive+0xd4>)
 800152a:	781a      	ldrb	r2, [r3, #0]
 800152c:	4b07      	ldr	r3, [pc, #28]	; (800154c <vSmoothPwmActive+0xd0>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	635a      	str	r2, [r3, #52]	; 0x34
					u8SmoothPwmActive = PWM_NOP;
 8001532:	4b03      	ldr	r3, [pc, #12]	; (8001540 <vSmoothPwmActive+0xc4>)
 8001534:	2200      	movs	r2, #0
 8001536:	701a      	strb	r2, [r3, #0]
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr
 8001540:	20000505 	.word	0x20000505
 8001544:	200005d0 	.word	0x200005d0
 8001548:	20000502 	.word	0x20000502
 800154c:	20000288 	.word	0x20000288
 8001550:	200005d6 	.word	0x200005d6

08001554 <RTC_u8Init>:
 * @pre
 * @post
 * @return
 */
uint8_t RTC_u8Init()
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
	return PHY_u8RtcInit();
 8001558:	f7ff fd98 	bl	800108c <PHY_u8RtcInit>
 800155c:	4603      	mov	r3, r0
}
 800155e:	4618      	mov	r0, r3
 8001560:	bd80      	pop	{r7, pc}

08001562 <RTC_vGetDateTime>:
 * @pre
 * @post
 * @param hRTC_DateTime
 */
void RTC_vGetDateTime(RTC_DateTimeTypedef* hRTC_DateTime)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
	PHY_vGetDateTime(hRTC_DateTime);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7ff fdda 	bl	8001124 <PHY_vGetDateTime>
}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <HAL_MspInit+0x5c>)
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	4a14      	ldr	r2, [pc, #80]	; (80015d4 <HAL_MspInit+0x5c>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6193      	str	r3, [r2, #24]
 800158a:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <HAL_MspInit+0x5c>)
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	60bb      	str	r3, [r7, #8]
 8001594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001596:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <HAL_MspInit+0x5c>)
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	4a0e      	ldr	r2, [pc, #56]	; (80015d4 <HAL_MspInit+0x5c>)
 800159c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a0:	61d3      	str	r3, [r2, #28]
 80015a2:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <HAL_MspInit+0x5c>)
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015ae:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <HAL_MspInit+0x60>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	4a04      	ldr	r2, [pc, #16]	; (80015d8 <HAL_MspInit+0x60>)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ca:	bf00      	nop
 80015cc:	3714      	adds	r7, #20
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40010000 	.word	0x40010000

080015dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b088      	sub	sp, #32
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 0310 	add.w	r3, r7, #16
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a14      	ldr	r2, [pc, #80]	; (8001648 <HAL_ADC_MspInit+0x6c>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d121      	bne.n	8001640 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015fc:	4b13      	ldr	r3, [pc, #76]	; (800164c <HAL_ADC_MspInit+0x70>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	4a12      	ldr	r2, [pc, #72]	; (800164c <HAL_ADC_MspInit+0x70>)
 8001602:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001606:	6193      	str	r3, [r2, #24]
 8001608:	4b10      	ldr	r3, [pc, #64]	; (800164c <HAL_ADC_MspInit+0x70>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001614:	4b0d      	ldr	r3, [pc, #52]	; (800164c <HAL_ADC_MspInit+0x70>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	4a0c      	ldr	r2, [pc, #48]	; (800164c <HAL_ADC_MspInit+0x70>)
 800161a:	f043 0304 	orr.w	r3, r3, #4
 800161e:	6193      	str	r3, [r2, #24]
 8001620:	4b0a      	ldr	r3, [pc, #40]	; (800164c <HAL_ADC_MspInit+0x70>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800162c:	2301      	movs	r3, #1
 800162e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001630:	2303      	movs	r3, #3
 8001632:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001634:	f107 0310 	add.w	r3, r7, #16
 8001638:	4619      	mov	r1, r3
 800163a:	4805      	ldr	r0, [pc, #20]	; (8001650 <HAL_ADC_MspInit+0x74>)
 800163c:	f000 ffd0 	bl	80025e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001640:	bf00      	nop
 8001642:	3720      	adds	r7, #32
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40012400 	.word	0x40012400
 800164c:	40021000 	.word	0x40021000
 8001650:	40010800 	.word	0x40010800

08001654 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a0b      	ldr	r2, [pc, #44]	; (8001690 <HAL_RTC_MspInit+0x3c>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d110      	bne.n	8001688 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001666:	f001 f987 	bl	8002978 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800166a:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <HAL_RTC_MspInit+0x40>)
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	4a09      	ldr	r2, [pc, #36]	; (8001694 <HAL_RTC_MspInit+0x40>)
 8001670:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001674:	61d3      	str	r3, [r2, #28]
 8001676:	4b07      	ldr	r3, [pc, #28]	; (8001694 <HAL_RTC_MspInit+0x40>)
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001682:	4b05      	ldr	r3, [pc, #20]	; (8001698 <HAL_RTC_MspInit+0x44>)
 8001684:	2201      	movs	r2, #1
 8001686:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001688:	bf00      	nop
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40002800 	.word	0x40002800
 8001694:	40021000 	.word	0x40021000
 8001698:	4242043c 	.word	0x4242043c

0800169c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016ac:	d114      	bne.n	80016d8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016ae:	4b15      	ldr	r3, [pc, #84]	; (8001704 <HAL_TIM_Base_MspInit+0x68>)
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	4a14      	ldr	r2, [pc, #80]	; (8001704 <HAL_TIM_Base_MspInit+0x68>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	61d3      	str	r3, [r2, #28]
 80016ba:	4b12      	ldr	r3, [pc, #72]	; (8001704 <HAL_TIM_Base_MspInit+0x68>)
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2100      	movs	r1, #0
 80016ca:	201c      	movs	r0, #28
 80016cc:	f000 fedb 	bl	8002486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016d0:	201c      	movs	r0, #28
 80016d2:	f000 fef4 	bl	80024be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80016d6:	e010      	b.n	80016fa <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a0a      	ldr	r2, [pc, #40]	; (8001708 <HAL_TIM_Base_MspInit+0x6c>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d10b      	bne.n	80016fa <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016e2:	4b08      	ldr	r3, [pc, #32]	; (8001704 <HAL_TIM_Base_MspInit+0x68>)
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	4a07      	ldr	r2, [pc, #28]	; (8001704 <HAL_TIM_Base_MspInit+0x68>)
 80016e8:	f043 0302 	orr.w	r3, r3, #2
 80016ec:	61d3      	str	r3, [r2, #28]
 80016ee:	4b05      	ldr	r3, [pc, #20]	; (8001704 <HAL_TIM_Base_MspInit+0x68>)
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	68bb      	ldr	r3, [r7, #8]
}
 80016fa:	bf00      	nop
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40021000 	.word	0x40021000
 8001708:	40000400 	.word	0x40000400

0800170c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a18      	ldr	r2, [pc, #96]	; (8001788 <HAL_TIM_MspPostInit+0x7c>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d129      	bne.n	8001780 <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800172c:	4b17      	ldr	r3, [pc, #92]	; (800178c <HAL_TIM_MspPostInit+0x80>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	4a16      	ldr	r2, [pc, #88]	; (800178c <HAL_TIM_MspPostInit+0x80>)
 8001732:	f043 0308 	orr.w	r3, r3, #8
 8001736:	6193      	str	r3, [r2, #24]
 8001738:	4b14      	ldr	r3, [pc, #80]	; (800178c <HAL_TIM_MspPostInit+0x80>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	f003 0308 	and.w	r3, r3, #8
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001744:	2310      	movs	r3, #16
 8001746:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174c:	2302      	movs	r3, #2
 800174e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001750:	f107 030c 	add.w	r3, r7, #12
 8001754:	4619      	mov	r1, r3
 8001756:	480e      	ldr	r0, [pc, #56]	; (8001790 <HAL_TIM_MspPostInit+0x84>)
 8001758:	f000 ff42 	bl	80025e0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 800175c:	4b0d      	ldr	r3, [pc, #52]	; (8001794 <HAL_TIM_MspPostInit+0x88>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	61fb      	str	r3, [r7, #28]
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001768:	61fb      	str	r3, [r7, #28]
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001770:	61fb      	str	r3, [r7, #28]
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001778:	61fb      	str	r3, [r7, #28]
 800177a:	4a06      	ldr	r2, [pc, #24]	; (8001794 <HAL_TIM_MspPostInit+0x88>)
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001780:	bf00      	nop
 8001782:	3720      	adds	r7, #32
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40000400 	.word	0x40000400
 800178c:	40021000 	.word	0x40021000
 8001790:	40010c00 	.word	0x40010c00
 8001794:	40010000 	.word	0x40010000

08001798 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08a      	sub	sp, #40	; 0x28
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a0:	f107 0318 	add.w	r3, r7, #24
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a40      	ldr	r2, [pc, #256]	; (80018b4 <HAL_UART_MspInit+0x11c>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d13a      	bne.n	800182e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017b8:	4b3f      	ldr	r3, [pc, #252]	; (80018b8 <HAL_UART_MspInit+0x120>)
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	4a3e      	ldr	r2, [pc, #248]	; (80018b8 <HAL_UART_MspInit+0x120>)
 80017be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017c2:	6193      	str	r3, [r2, #24]
 80017c4:	4b3c      	ldr	r3, [pc, #240]	; (80018b8 <HAL_UART_MspInit+0x120>)
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017cc:	617b      	str	r3, [r7, #20]
 80017ce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d0:	4b39      	ldr	r3, [pc, #228]	; (80018b8 <HAL_UART_MspInit+0x120>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	4a38      	ldr	r2, [pc, #224]	; (80018b8 <HAL_UART_MspInit+0x120>)
 80017d6:	f043 0304 	orr.w	r3, r3, #4
 80017da:	6193      	str	r3, [r2, #24]
 80017dc:	4b36      	ldr	r3, [pc, #216]	; (80018b8 <HAL_UART_MspInit+0x120>)
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	f003 0304 	and.w	r3, r3, #4
 80017e4:	613b      	str	r3, [r7, #16]
 80017e6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ee:	2302      	movs	r3, #2
 80017f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017f2:	2303      	movs	r3, #3
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f6:	f107 0318 	add.w	r3, r7, #24
 80017fa:	4619      	mov	r1, r3
 80017fc:	482f      	ldr	r0, [pc, #188]	; (80018bc <HAL_UART_MspInit+0x124>)
 80017fe:	f000 feef 	bl	80025e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001802:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001808:	2300      	movs	r3, #0
 800180a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001810:	f107 0318 	add.w	r3, r7, #24
 8001814:	4619      	mov	r1, r3
 8001816:	4829      	ldr	r0, [pc, #164]	; (80018bc <HAL_UART_MspInit+0x124>)
 8001818:	f000 fee2 	bl	80025e0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800181c:	2200      	movs	r2, #0
 800181e:	2100      	movs	r1, #0
 8001820:	2025      	movs	r0, #37	; 0x25
 8001822:	f000 fe30 	bl	8002486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001826:	2025      	movs	r0, #37	; 0x25
 8001828:	f000 fe49 	bl	80024be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800182c:	e03e      	b.n	80018ac <HAL_UART_MspInit+0x114>
  else if(huart->Instance==USART3)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a23      	ldr	r2, [pc, #140]	; (80018c0 <HAL_UART_MspInit+0x128>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d139      	bne.n	80018ac <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001838:	4b1f      	ldr	r3, [pc, #124]	; (80018b8 <HAL_UART_MspInit+0x120>)
 800183a:	69db      	ldr	r3, [r3, #28]
 800183c:	4a1e      	ldr	r2, [pc, #120]	; (80018b8 <HAL_UART_MspInit+0x120>)
 800183e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001842:	61d3      	str	r3, [r2, #28]
 8001844:	4b1c      	ldr	r3, [pc, #112]	; (80018b8 <HAL_UART_MspInit+0x120>)
 8001846:	69db      	ldr	r3, [r3, #28]
 8001848:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001850:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <HAL_UART_MspInit+0x120>)
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	4a18      	ldr	r2, [pc, #96]	; (80018b8 <HAL_UART_MspInit+0x120>)
 8001856:	f043 0308 	orr.w	r3, r3, #8
 800185a:	6193      	str	r3, [r2, #24]
 800185c:	4b16      	ldr	r3, [pc, #88]	; (80018b8 <HAL_UART_MspInit+0x120>)
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	f003 0308 	and.w	r3, r3, #8
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001868:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800186c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186e:	2302      	movs	r3, #2
 8001870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001872:	2303      	movs	r3, #3
 8001874:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001876:	f107 0318 	add.w	r3, r7, #24
 800187a:	4619      	mov	r1, r3
 800187c:	4811      	ldr	r0, [pc, #68]	; (80018c4 <HAL_UART_MspInit+0x12c>)
 800187e:	f000 feaf 	bl	80025e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001882:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001886:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001888:	2300      	movs	r3, #0
 800188a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001890:	f107 0318 	add.w	r3, r7, #24
 8001894:	4619      	mov	r1, r3
 8001896:	480b      	ldr	r0, [pc, #44]	; (80018c4 <HAL_UART_MspInit+0x12c>)
 8001898:	f000 fea2 	bl	80025e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800189c:	2200      	movs	r2, #0
 800189e:	2100      	movs	r1, #0
 80018a0:	2027      	movs	r0, #39	; 0x27
 80018a2:	f000 fdf0 	bl	8002486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80018a6:	2027      	movs	r0, #39	; 0x27
 80018a8:	f000 fe09 	bl	80024be <HAL_NVIC_EnableIRQ>
}
 80018ac:	bf00      	nop
 80018ae:	3728      	adds	r7, #40	; 0x28
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40013800 	.word	0x40013800
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40010800 	.word	0x40010800
 80018c0:	40004800 	.word	0x40004800
 80018c4:	40010c00 	.word	0x40010c00

080018c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018cc:	e7fe      	b.n	80018cc <NMI_Handler+0x4>

080018ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018d2:	e7fe      	b.n	80018d2 <HardFault_Handler+0x4>

080018d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d8:	e7fe      	b.n	80018d8 <MemManage_Handler+0x4>

080018da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018de:	e7fe      	b.n	80018de <BusFault_Handler+0x4>

080018e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e4:	e7fe      	b.n	80018e4 <UsageFault_Handler+0x4>

080018e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr

080018f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bc80      	pop	{r7}
 80018fc:	4770      	bx	lr

080018fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr

0800190a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800190e:	f000 f893 	bl	8001a38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
	...

08001918 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800191c:	4802      	ldr	r0, [pc, #8]	; (8001928 <TIM2_IRQHandler+0x10>)
 800191e:	f002 fd19 	bl	8004354 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	200003bc 	.word	0x200003bc

0800192c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001930:	4802      	ldr	r0, [pc, #8]	; (800193c <USART1_IRQHandler+0x10>)
 8001932:	f003 fbb7 	bl	80050a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000308 	.word	0x20000308

08001940 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001944:	4802      	ldr	r0, [pc, #8]	; (8001950 <USART3_IRQHandler+0x10>)
 8001946:	f003 fbad 	bl	80050a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20000240 	.word	0x20000240

08001954 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr

08001960 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001960:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001962:	e003      	b.n	800196c <LoopCopyDataInit>

08001964 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001964:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001966:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001968:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800196a:	3104      	adds	r1, #4

0800196c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800196c:	480a      	ldr	r0, [pc, #40]	; (8001998 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800196e:	4b0b      	ldr	r3, [pc, #44]	; (800199c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001970:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001972:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001974:	d3f6      	bcc.n	8001964 <CopyDataInit>
  ldr r2, =_sbss
 8001976:	4a0a      	ldr	r2, [pc, #40]	; (80019a0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001978:	e002      	b.n	8001980 <LoopFillZerobss>

0800197a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800197a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800197c:	f842 3b04 	str.w	r3, [r2], #4

08001980 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001980:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001982:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001984:	d3f9      	bcc.n	800197a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001986:	f7ff ffe5 	bl	8001954 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800198a:	f003 fe43 	bl	8005614 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800198e:	f7fe fec3 	bl	8000718 <main>
  bx lr
 8001992:	4770      	bx	lr
  ldr r3, =_sidata
 8001994:	080056f4 	.word	0x080056f4
  ldr r0, =_sdata
 8001998:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800199c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80019a0:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80019a4:	200005e0 	.word	0x200005e0

080019a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019a8:	e7fe      	b.n	80019a8 <ADC1_2_IRQHandler>
	...

080019ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019b0:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <HAL_Init+0x28>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a07      	ldr	r2, [pc, #28]	; (80019d4 <HAL_Init+0x28>)
 80019b6:	f043 0310 	orr.w	r3, r3, #16
 80019ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019bc:	2003      	movs	r0, #3
 80019be:	f000 fd57 	bl	8002470 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019c2:	2000      	movs	r0, #0
 80019c4:	f000 f808 	bl	80019d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019c8:	f7ff fdd6 	bl	8001578 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40022000 	.word	0x40022000

080019d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019e0:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <HAL_InitTick+0x54>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4b12      	ldr	r3, [pc, #72]	; (8001a30 <HAL_InitTick+0x58>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	4619      	mov	r1, r3
 80019ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80019f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f6:	4618      	mov	r0, r3
 80019f8:	f000 fd6f 	bl	80024da <HAL_SYSTICK_Config>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e00e      	b.n	8001a24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b0f      	cmp	r3, #15
 8001a0a:	d80a      	bhi.n	8001a22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	f04f 30ff 	mov.w	r0, #4294967295
 8001a14:	f000 fd37 	bl	8002486 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a18:	4a06      	ldr	r2, [pc, #24]	; (8001a34 <HAL_InitTick+0x5c>)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	e000      	b.n	8001a24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000000 	.word	0x20000000
 8001a30:	20000008 	.word	0x20000008
 8001a34:	20000004 	.word	0x20000004

08001a38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <HAL_IncTick+0x1c>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	461a      	mov	r2, r3
 8001a42:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <HAL_IncTick+0x20>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4413      	add	r3, r2
 8001a48:	4a03      	ldr	r2, [pc, #12]	; (8001a58 <HAL_IncTick+0x20>)
 8001a4a:	6013      	str	r3, [r2, #0]
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr
 8001a54:	20000008 	.word	0x20000008
 8001a58:	200005dc 	.word	0x200005dc

08001a5c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a60:	4b02      	ldr	r3, [pc, #8]	; (8001a6c <HAL_GetTick+0x10>)
 8001a62:	681b      	ldr	r3, [r3, #0]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr
 8001a6c:	200005dc 	.word	0x200005dc

08001a70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a78:	f7ff fff0 	bl	8001a5c <HAL_GetTick>
 8001a7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a88:	d005      	beq.n	8001a96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a8a:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <HAL_Delay+0x44>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	4413      	add	r3, r2
 8001a94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a96:	bf00      	nop
 8001a98:	f7ff ffe0 	bl	8001a5c <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d8f7      	bhi.n	8001a98 <HAL_Delay+0x28>
  {
  }
}
 8001aa8:	bf00      	nop
 8001aaa:	bf00      	nop
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000008 	.word	0x20000008

08001ab8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e0be      	b.n	8001c58 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d109      	bne.n	8001afc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff fd70 	bl	80015dc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 fbb1 	bl	8002264 <ADC_ConversionStop_Disable>
 8001b02:	4603      	mov	r3, r0
 8001b04:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0a:	f003 0310 	and.w	r3, r3, #16
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f040 8099 	bne.w	8001c46 <HAL_ADC_Init+0x18e>
 8001b14:	7dfb      	ldrb	r3, [r7, #23]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f040 8095 	bne.w	8001c46 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b20:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b24:	f023 0302 	bic.w	r3, r3, #2
 8001b28:	f043 0202 	orr.w	r2, r3, #2
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b38:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	7b1b      	ldrb	r3, [r3, #12]
 8001b3e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b40:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b42:	68ba      	ldr	r2, [r7, #8]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b50:	d003      	beq.n	8001b5a <HAL_ADC_Init+0xa2>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d102      	bne.n	8001b60 <HAL_ADC_Init+0xa8>
 8001b5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b5e:	e000      	b.n	8001b62 <HAL_ADC_Init+0xaa>
 8001b60:	2300      	movs	r3, #0
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	7d1b      	ldrb	r3, [r3, #20]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d119      	bne.n	8001ba4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	7b1b      	ldrb	r3, [r3, #12]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d109      	bne.n	8001b8c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	035a      	lsls	r2, r3, #13
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	e00b      	b.n	8001ba4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b90:	f043 0220 	orr.w	r2, r3, #32
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9c:	f043 0201 	orr.w	r2, r3, #1
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	689a      	ldr	r2, [r3, #8]
 8001bbe:	4b28      	ldr	r3, [pc, #160]	; (8001c60 <HAL_ADC_Init+0x1a8>)
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6812      	ldr	r2, [r2, #0]
 8001bc6:	68b9      	ldr	r1, [r7, #8]
 8001bc8:	430b      	orrs	r3, r1
 8001bca:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bd4:	d003      	beq.n	8001bde <HAL_ADC_Init+0x126>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d104      	bne.n	8001be8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	3b01      	subs	r3, #1
 8001be4:	051b      	lsls	r3, r3, #20
 8001be6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bee:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	4b18      	ldr	r3, [pc, #96]	; (8001c64 <HAL_ADC_Init+0x1ac>)
 8001c04:	4013      	ands	r3, r2
 8001c06:	68ba      	ldr	r2, [r7, #8]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d10b      	bne.n	8001c24 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c16:	f023 0303 	bic.w	r3, r3, #3
 8001c1a:	f043 0201 	orr.w	r2, r3, #1
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c22:	e018      	b.n	8001c56 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c28:	f023 0312 	bic.w	r3, r3, #18
 8001c2c:	f043 0210 	orr.w	r2, r3, #16
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c38:	f043 0201 	orr.w	r2, r3, #1
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c44:	e007      	b.n	8001c56 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4a:	f043 0210 	orr.w	r2, r3, #16
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	ffe1f7fd 	.word	0xffe1f7fd
 8001c64:	ff1f0efe 	.word	0xff1f0efe

08001c68 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c70:	2300      	movs	r3, #0
 8001c72:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d101      	bne.n	8001c82 <HAL_ADC_Start+0x1a>
 8001c7e:	2302      	movs	r3, #2
 8001c80:	e098      	b.n	8001db4 <HAL_ADC_Start+0x14c>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2201      	movs	r2, #1
 8001c86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 fa98 	bl	80021c0 <ADC_Enable>
 8001c90:	4603      	mov	r3, r0
 8001c92:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f040 8087 	bne.w	8001daa <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ca4:	f023 0301 	bic.w	r3, r3, #1
 8001ca8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a41      	ldr	r2, [pc, #260]	; (8001dbc <HAL_ADC_Start+0x154>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d105      	bne.n	8001cc6 <HAL_ADC_Start+0x5e>
 8001cba:	4b41      	ldr	r3, [pc, #260]	; (8001dc0 <HAL_ADC_Start+0x158>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d115      	bne.n	8001cf2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d026      	beq.n	8001d2e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ce8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cf0:	e01d      	b.n	8001d2e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a2f      	ldr	r2, [pc, #188]	; (8001dc0 <HAL_ADC_Start+0x158>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d004      	beq.n	8001d12 <HAL_ADC_Start+0xaa>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a2b      	ldr	r2, [pc, #172]	; (8001dbc <HAL_ADC_Start+0x154>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d10d      	bne.n	8001d2e <HAL_ADC_Start+0xc6>
 8001d12:	4b2b      	ldr	r3, [pc, #172]	; (8001dc0 <HAL_ADC_Start+0x158>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d007      	beq.n	8001d2e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d22:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d26:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d006      	beq.n	8001d48 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3e:	f023 0206 	bic.w	r2, r3, #6
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d46:	e002      	b.n	8001d4e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f06f 0202 	mvn.w	r2, #2
 8001d5e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001d6a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d6e:	d113      	bne.n	8001d98 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d74:	4a11      	ldr	r2, [pc, #68]	; (8001dbc <HAL_ADC_Start+0x154>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d105      	bne.n	8001d86 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001d7a:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <HAL_ADC_Start+0x158>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d108      	bne.n	8001d98 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001d94:	609a      	str	r2, [r3, #8]
 8001d96:	e00c      	b.n	8001db2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689a      	ldr	r2, [r3, #8]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	e003      	b.n	8001db2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3710      	adds	r7, #16
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40012800 	.word	0x40012800
 8001dc0:	40012400 	.word	0x40012400

08001dc4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001dc4:	b590      	push	{r4, r7, lr}
 8001dc6:	b087      	sub	sp, #28
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001dda:	f7ff fe3f 	bl	8001a5c <HAL_GetTick>
 8001dde:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00b      	beq.n	8001e06 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df2:	f043 0220 	orr.w	r2, r3, #32
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e0c8      	b.n	8001f98 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d12a      	bne.n	8001e6a <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d123      	bne.n	8001e6a <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001e22:	e01a      	b.n	8001e5a <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e2a:	d016      	beq.n	8001e5a <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d007      	beq.n	8001e42 <HAL_ADC_PollForConversion+0x7e>
 8001e32:	f7ff fe13 	bl	8001a5c <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d20b      	bcs.n	8001e5a <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e46:	f043 0204 	orr.w	r2, r3, #4
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e09e      	b.n	8001f98 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d0dd      	beq.n	8001e24 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001e68:	e06c      	b.n	8001f44 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001e6a:	4b4d      	ldr	r3, [pc, #308]	; (8001fa0 <HAL_ADC_PollForConversion+0x1dc>)
 8001e6c:	681c      	ldr	r4, [r3, #0]
 8001e6e:	2002      	movs	r0, #2
 8001e70:	f001 fa5e 	bl	8003330 <HAL_RCCEx_GetPeriphCLKFreq>
 8001e74:	4603      	mov	r3, r0
 8001e76:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6919      	ldr	r1, [r3, #16]
 8001e80:	4b48      	ldr	r3, [pc, #288]	; (8001fa4 <HAL_ADC_PollForConversion+0x1e0>)
 8001e82:	400b      	ands	r3, r1
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d118      	bne.n	8001eba <HAL_ADC_PollForConversion+0xf6>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68d9      	ldr	r1, [r3, #12]
 8001e8e:	4b46      	ldr	r3, [pc, #280]	; (8001fa8 <HAL_ADC_PollForConversion+0x1e4>)
 8001e90:	400b      	ands	r3, r1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d111      	bne.n	8001eba <HAL_ADC_PollForConversion+0xf6>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6919      	ldr	r1, [r3, #16]
 8001e9c:	4b43      	ldr	r3, [pc, #268]	; (8001fac <HAL_ADC_PollForConversion+0x1e8>)
 8001e9e:	400b      	ands	r3, r1
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d108      	bne.n	8001eb6 <HAL_ADC_PollForConversion+0xf2>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68d9      	ldr	r1, [r3, #12]
 8001eaa:	4b41      	ldr	r3, [pc, #260]	; (8001fb0 <HAL_ADC_PollForConversion+0x1ec>)
 8001eac:	400b      	ands	r3, r1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_ADC_PollForConversion+0xf2>
 8001eb2:	2314      	movs	r3, #20
 8001eb4:	e020      	b.n	8001ef8 <HAL_ADC_PollForConversion+0x134>
 8001eb6:	2329      	movs	r3, #41	; 0x29
 8001eb8:	e01e      	b.n	8001ef8 <HAL_ADC_PollForConversion+0x134>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6919      	ldr	r1, [r3, #16]
 8001ec0:	4b3a      	ldr	r3, [pc, #232]	; (8001fac <HAL_ADC_PollForConversion+0x1e8>)
 8001ec2:	400b      	ands	r3, r1
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d106      	bne.n	8001ed6 <HAL_ADC_PollForConversion+0x112>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68d9      	ldr	r1, [r3, #12]
 8001ece:	4b38      	ldr	r3, [pc, #224]	; (8001fb0 <HAL_ADC_PollForConversion+0x1ec>)
 8001ed0:	400b      	ands	r3, r1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00d      	beq.n	8001ef2 <HAL_ADC_PollForConversion+0x12e>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6919      	ldr	r1, [r3, #16]
 8001edc:	4b35      	ldr	r3, [pc, #212]	; (8001fb4 <HAL_ADC_PollForConversion+0x1f0>)
 8001ede:	400b      	ands	r3, r1
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d108      	bne.n	8001ef6 <HAL_ADC_PollForConversion+0x132>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68d9      	ldr	r1, [r3, #12]
 8001eea:	4b32      	ldr	r3, [pc, #200]	; (8001fb4 <HAL_ADC_PollForConversion+0x1f0>)
 8001eec:	400b      	ands	r3, r1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_ADC_PollForConversion+0x132>
 8001ef2:	2354      	movs	r3, #84	; 0x54
 8001ef4:	e000      	b.n	8001ef8 <HAL_ADC_PollForConversion+0x134>
 8001ef6:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001ef8:	fb02 f303 	mul.w	r3, r2, r3
 8001efc:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001efe:	e01d      	b.n	8001f3c <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f06:	d016      	beq.n	8001f36 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d007      	beq.n	8001f1e <HAL_ADC_PollForConversion+0x15a>
 8001f0e:	f7ff fda5 	bl	8001a5c <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d20b      	bcs.n	8001f36 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f22:	f043 0204 	orr.w	r2, r3, #4
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e030      	b.n	8001f98 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d8dd      	bhi.n	8001f00 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f06f 0212 	mvn.w	r2, #18
 8001f4c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f52:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001f64:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001f68:	d115      	bne.n	8001f96 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d111      	bne.n	8001f96 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d105      	bne.n	8001f96 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8e:	f043 0201 	orr.w	r2, r3, #1
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	371c      	adds	r7, #28
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd90      	pop	{r4, r7, pc}
 8001fa0:	20000000 	.word	0x20000000
 8001fa4:	24924924 	.word	0x24924924
 8001fa8:	00924924 	.word	0x00924924
 8001fac:	12492492 	.word	0x12492492
 8001fb0:	00492492 	.word	0x00492492
 8001fb4:	00249249 	.word	0x00249249

08001fb8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr

08001fd0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d101      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x20>
 8001fec:	2302      	movs	r3, #2
 8001fee:	e0dc      	b.n	80021aa <HAL_ADC_ConfigChannel+0x1da>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b06      	cmp	r3, #6
 8001ffe:	d81c      	bhi.n	800203a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	4613      	mov	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	3b05      	subs	r3, #5
 8002012:	221f      	movs	r2, #31
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	43db      	mvns	r3, r3
 800201a:	4019      	ands	r1, r3
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	6818      	ldr	r0, [r3, #0]
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	4613      	mov	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4413      	add	r3, r2
 800202a:	3b05      	subs	r3, #5
 800202c:	fa00 f203 	lsl.w	r2, r0, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	430a      	orrs	r2, r1
 8002036:	635a      	str	r2, [r3, #52]	; 0x34
 8002038:	e03c      	b.n	80020b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b0c      	cmp	r3, #12
 8002040:	d81c      	bhi.n	800207c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	4613      	mov	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	3b23      	subs	r3, #35	; 0x23
 8002054:	221f      	movs	r2, #31
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	4019      	ands	r1, r3
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	6818      	ldr	r0, [r3, #0]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	4613      	mov	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4413      	add	r3, r2
 800206c:	3b23      	subs	r3, #35	; 0x23
 800206e:	fa00 f203 	lsl.w	r2, r0, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	430a      	orrs	r2, r1
 8002078:	631a      	str	r2, [r3, #48]	; 0x30
 800207a:	e01b      	b.n	80020b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	4613      	mov	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	3b41      	subs	r3, #65	; 0x41
 800208e:	221f      	movs	r2, #31
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	43db      	mvns	r3, r3
 8002096:	4019      	ands	r1, r3
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	6818      	ldr	r0, [r3, #0]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	4613      	mov	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4413      	add	r3, r2
 80020a6:	3b41      	subs	r3, #65	; 0x41
 80020a8:	fa00 f203 	lsl.w	r2, r0, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	430a      	orrs	r2, r1
 80020b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2b09      	cmp	r3, #9
 80020ba:	d91c      	bls.n	80020f6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68d9      	ldr	r1, [r3, #12]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	4613      	mov	r3, r2
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	4413      	add	r3, r2
 80020cc:	3b1e      	subs	r3, #30
 80020ce:	2207      	movs	r2, #7
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	43db      	mvns	r3, r3
 80020d6:	4019      	ands	r1, r3
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	6898      	ldr	r0, [r3, #8]
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	4613      	mov	r3, r2
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	4413      	add	r3, r2
 80020e6:	3b1e      	subs	r3, #30
 80020e8:	fa00 f203 	lsl.w	r2, r0, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	60da      	str	r2, [r3, #12]
 80020f4:	e019      	b.n	800212a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6919      	ldr	r1, [r3, #16]
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	4613      	mov	r3, r2
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	4413      	add	r3, r2
 8002106:	2207      	movs	r2, #7
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	4019      	ands	r1, r3
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	6898      	ldr	r0, [r3, #8]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	4613      	mov	r3, r2
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	4413      	add	r3, r2
 800211e:	fa00 f203 	lsl.w	r2, r0, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	430a      	orrs	r2, r1
 8002128:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2b10      	cmp	r3, #16
 8002130:	d003      	beq.n	800213a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002136:	2b11      	cmp	r3, #17
 8002138:	d132      	bne.n	80021a0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a1d      	ldr	r2, [pc, #116]	; (80021b4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d125      	bne.n	8002190 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d126      	bne.n	80021a0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002160:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2b10      	cmp	r3, #16
 8002168:	d11a      	bne.n	80021a0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800216a:	4b13      	ldr	r3, [pc, #76]	; (80021b8 <HAL_ADC_ConfigChannel+0x1e8>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a13      	ldr	r2, [pc, #76]	; (80021bc <HAL_ADC_ConfigChannel+0x1ec>)
 8002170:	fba2 2303 	umull	r2, r3, r2, r3
 8002174:	0c9a      	lsrs	r2, r3, #18
 8002176:	4613      	mov	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002180:	e002      	b.n	8002188 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	3b01      	subs	r3, #1
 8002186:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1f9      	bne.n	8002182 <HAL_ADC_ConfigChannel+0x1b2>
 800218e:	e007      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002194:	f043 0220 	orr.w	r2, r3, #32
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80021a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr
 80021b4:	40012400 	.word	0x40012400
 80021b8:	20000000 	.word	0x20000000
 80021bc:	431bde83 	.word	0x431bde83

080021c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d039      	beq.n	8002252 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f042 0201 	orr.w	r2, r2, #1
 80021ec:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021ee:	4b1b      	ldr	r3, [pc, #108]	; (800225c <ADC_Enable+0x9c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a1b      	ldr	r2, [pc, #108]	; (8002260 <ADC_Enable+0xa0>)
 80021f4:	fba2 2303 	umull	r2, r3, r2, r3
 80021f8:	0c9b      	lsrs	r3, r3, #18
 80021fa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80021fc:	e002      	b.n	8002204 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	3b01      	subs	r3, #1
 8002202:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f9      	bne.n	80021fe <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800220a:	f7ff fc27 	bl	8001a5c <HAL_GetTick>
 800220e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002210:	e018      	b.n	8002244 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002212:	f7ff fc23 	bl	8001a5c <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d911      	bls.n	8002244 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002224:	f043 0210 	orr.w	r2, r3, #16
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002230:	f043 0201 	orr.w	r2, r3, #1
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e007      	b.n	8002254 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b01      	cmp	r3, #1
 8002250:	d1df      	bne.n	8002212 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	20000000 	.word	0x20000000
 8002260:	431bde83 	.word	0x431bde83

08002264 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800226c:	2300      	movs	r3, #0
 800226e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b01      	cmp	r3, #1
 800227c:	d127      	bne.n	80022ce <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 0201 	bic.w	r2, r2, #1
 800228c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800228e:	f7ff fbe5 	bl	8001a5c <HAL_GetTick>
 8002292:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002294:	e014      	b.n	80022c0 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002296:	f7ff fbe1 	bl	8001a5c <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d90d      	bls.n	80022c0 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a8:	f043 0210 	orr.w	r2, r3, #16
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b4:	f043 0201 	orr.w	r2, r3, #1
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e007      	b.n	80022d0 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d0e3      	beq.n	8002296 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022e8:	4b0c      	ldr	r3, [pc, #48]	; (800231c <__NVIC_SetPriorityGrouping+0x44>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022f4:	4013      	ands	r3, r2
 80022f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002300:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800230a:	4a04      	ldr	r2, [pc, #16]	; (800231c <__NVIC_SetPriorityGrouping+0x44>)
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	60d3      	str	r3, [r2, #12]
}
 8002310:	bf00      	nop
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	bc80      	pop	{r7}
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	e000ed00 	.word	0xe000ed00

08002320 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002324:	4b04      	ldr	r3, [pc, #16]	; (8002338 <__NVIC_GetPriorityGrouping+0x18>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	0a1b      	lsrs	r3, r3, #8
 800232a:	f003 0307 	and.w	r3, r3, #7
}
 800232e:	4618      	mov	r0, r3
 8002330:	46bd      	mov	sp, r7
 8002332:	bc80      	pop	{r7}
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	e000ed00 	.word	0xe000ed00

0800233c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234a:	2b00      	cmp	r3, #0
 800234c:	db0b      	blt.n	8002366 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800234e:	79fb      	ldrb	r3, [r7, #7]
 8002350:	f003 021f 	and.w	r2, r3, #31
 8002354:	4906      	ldr	r1, [pc, #24]	; (8002370 <__NVIC_EnableIRQ+0x34>)
 8002356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235a:	095b      	lsrs	r3, r3, #5
 800235c:	2001      	movs	r0, #1
 800235e:	fa00 f202 	lsl.w	r2, r0, r2
 8002362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr
 8002370:	e000e100 	.word	0xe000e100

08002374 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	6039      	str	r1, [r7, #0]
 800237e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002384:	2b00      	cmp	r3, #0
 8002386:	db0a      	blt.n	800239e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	b2da      	uxtb	r2, r3
 800238c:	490c      	ldr	r1, [pc, #48]	; (80023c0 <__NVIC_SetPriority+0x4c>)
 800238e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002392:	0112      	lsls	r2, r2, #4
 8002394:	b2d2      	uxtb	r2, r2
 8002396:	440b      	add	r3, r1
 8002398:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800239c:	e00a      	b.n	80023b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	4908      	ldr	r1, [pc, #32]	; (80023c4 <__NVIC_SetPriority+0x50>)
 80023a4:	79fb      	ldrb	r3, [r7, #7]
 80023a6:	f003 030f 	and.w	r3, r3, #15
 80023aa:	3b04      	subs	r3, #4
 80023ac:	0112      	lsls	r2, r2, #4
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	440b      	add	r3, r1
 80023b2:	761a      	strb	r2, [r3, #24]
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc80      	pop	{r7}
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	e000e100 	.word	0xe000e100
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b089      	sub	sp, #36	; 0x24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	f1c3 0307 	rsb	r3, r3, #7
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	bf28      	it	cs
 80023e6:	2304      	movcs	r3, #4
 80023e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	3304      	adds	r3, #4
 80023ee:	2b06      	cmp	r3, #6
 80023f0:	d902      	bls.n	80023f8 <NVIC_EncodePriority+0x30>
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	3b03      	subs	r3, #3
 80023f6:	e000      	b.n	80023fa <NVIC_EncodePriority+0x32>
 80023f8:	2300      	movs	r3, #0
 80023fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	43da      	mvns	r2, r3
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	401a      	ands	r2, r3
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002410:	f04f 31ff 	mov.w	r1, #4294967295
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	fa01 f303 	lsl.w	r3, r1, r3
 800241a:	43d9      	mvns	r1, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002420:	4313      	orrs	r3, r2
         );
}
 8002422:	4618      	mov	r0, r3
 8002424:	3724      	adds	r7, #36	; 0x24
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr

0800242c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3b01      	subs	r3, #1
 8002438:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800243c:	d301      	bcc.n	8002442 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800243e:	2301      	movs	r3, #1
 8002440:	e00f      	b.n	8002462 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002442:	4a0a      	ldr	r2, [pc, #40]	; (800246c <SysTick_Config+0x40>)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3b01      	subs	r3, #1
 8002448:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800244a:	210f      	movs	r1, #15
 800244c:	f04f 30ff 	mov.w	r0, #4294967295
 8002450:	f7ff ff90 	bl	8002374 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002454:	4b05      	ldr	r3, [pc, #20]	; (800246c <SysTick_Config+0x40>)
 8002456:	2200      	movs	r2, #0
 8002458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800245a:	4b04      	ldr	r3, [pc, #16]	; (800246c <SysTick_Config+0x40>)
 800245c:	2207      	movs	r2, #7
 800245e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	e000e010 	.word	0xe000e010

08002470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f7ff ff2d 	bl	80022d8 <__NVIC_SetPriorityGrouping>
}
 800247e:	bf00      	nop
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002486:	b580      	push	{r7, lr}
 8002488:	b086      	sub	sp, #24
 800248a:	af00      	add	r7, sp, #0
 800248c:	4603      	mov	r3, r0
 800248e:	60b9      	str	r1, [r7, #8]
 8002490:	607a      	str	r2, [r7, #4]
 8002492:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002498:	f7ff ff42 	bl	8002320 <__NVIC_GetPriorityGrouping>
 800249c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	68b9      	ldr	r1, [r7, #8]
 80024a2:	6978      	ldr	r0, [r7, #20]
 80024a4:	f7ff ff90 	bl	80023c8 <NVIC_EncodePriority>
 80024a8:	4602      	mov	r2, r0
 80024aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ae:	4611      	mov	r1, r2
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff ff5f 	bl	8002374 <__NVIC_SetPriority>
}
 80024b6:	bf00      	nop
 80024b8:	3718      	adds	r7, #24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b082      	sub	sp, #8
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	4603      	mov	r3, r0
 80024c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff ff35 	bl	800233c <__NVIC_EnableIRQ>
}
 80024d2:	bf00      	nop
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f7ff ffa2 	bl	800242c <SysTick_Config>
 80024e8:	4603      	mov	r3, r0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
	...

080024f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024fc:	2300      	movs	r3, #0
 80024fe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002506:	2b02      	cmp	r3, #2
 8002508:	d005      	beq.n	8002516 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2204      	movs	r2, #4
 800250e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	73fb      	strb	r3, [r7, #15]
 8002514:	e051      	b.n	80025ba <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 020e 	bic.w	r2, r2, #14
 8002524:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 0201 	bic.w	r2, r2, #1
 8002534:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a22      	ldr	r2, [pc, #136]	; (80025c4 <HAL_DMA_Abort_IT+0xd0>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d029      	beq.n	8002594 <HAL_DMA_Abort_IT+0xa0>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a20      	ldr	r2, [pc, #128]	; (80025c8 <HAL_DMA_Abort_IT+0xd4>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d022      	beq.n	8002590 <HAL_DMA_Abort_IT+0x9c>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a1f      	ldr	r2, [pc, #124]	; (80025cc <HAL_DMA_Abort_IT+0xd8>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d01a      	beq.n	800258a <HAL_DMA_Abort_IT+0x96>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a1d      	ldr	r2, [pc, #116]	; (80025d0 <HAL_DMA_Abort_IT+0xdc>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d012      	beq.n	8002584 <HAL_DMA_Abort_IT+0x90>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a1c      	ldr	r2, [pc, #112]	; (80025d4 <HAL_DMA_Abort_IT+0xe0>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d00a      	beq.n	800257e <HAL_DMA_Abort_IT+0x8a>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a1a      	ldr	r2, [pc, #104]	; (80025d8 <HAL_DMA_Abort_IT+0xe4>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d102      	bne.n	8002578 <HAL_DMA_Abort_IT+0x84>
 8002572:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002576:	e00e      	b.n	8002596 <HAL_DMA_Abort_IT+0xa2>
 8002578:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800257c:	e00b      	b.n	8002596 <HAL_DMA_Abort_IT+0xa2>
 800257e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002582:	e008      	b.n	8002596 <HAL_DMA_Abort_IT+0xa2>
 8002584:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002588:	e005      	b.n	8002596 <HAL_DMA_Abort_IT+0xa2>
 800258a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800258e:	e002      	b.n	8002596 <HAL_DMA_Abort_IT+0xa2>
 8002590:	2310      	movs	r3, #16
 8002592:	e000      	b.n	8002596 <HAL_DMA_Abort_IT+0xa2>
 8002594:	2301      	movs	r3, #1
 8002596:	4a11      	ldr	r2, [pc, #68]	; (80025dc <HAL_DMA_Abort_IT+0xe8>)
 8002598:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	4798      	blx	r3
    } 
  }
  return status;
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40020008 	.word	0x40020008
 80025c8:	4002001c 	.word	0x4002001c
 80025cc:	40020030 	.word	0x40020030
 80025d0:	40020044 	.word	0x40020044
 80025d4:	40020058 	.word	0x40020058
 80025d8:	4002006c 	.word	0x4002006c
 80025dc:	40020000 	.word	0x40020000

080025e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b08b      	sub	sp, #44	; 0x2c
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025ea:	2300      	movs	r3, #0
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025ee:	2300      	movs	r3, #0
 80025f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025f2:	e169      	b.n	80028c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025f4:	2201      	movs	r2, #1
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	69fa      	ldr	r2, [r7, #28]
 8002604:	4013      	ands	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	429a      	cmp	r2, r3
 800260e:	f040 8158 	bne.w	80028c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	4a9a      	ldr	r2, [pc, #616]	; (8002880 <HAL_GPIO_Init+0x2a0>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d05e      	beq.n	80026da <HAL_GPIO_Init+0xfa>
 800261c:	4a98      	ldr	r2, [pc, #608]	; (8002880 <HAL_GPIO_Init+0x2a0>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d875      	bhi.n	800270e <HAL_GPIO_Init+0x12e>
 8002622:	4a98      	ldr	r2, [pc, #608]	; (8002884 <HAL_GPIO_Init+0x2a4>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d058      	beq.n	80026da <HAL_GPIO_Init+0xfa>
 8002628:	4a96      	ldr	r2, [pc, #600]	; (8002884 <HAL_GPIO_Init+0x2a4>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d86f      	bhi.n	800270e <HAL_GPIO_Init+0x12e>
 800262e:	4a96      	ldr	r2, [pc, #600]	; (8002888 <HAL_GPIO_Init+0x2a8>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d052      	beq.n	80026da <HAL_GPIO_Init+0xfa>
 8002634:	4a94      	ldr	r2, [pc, #592]	; (8002888 <HAL_GPIO_Init+0x2a8>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d869      	bhi.n	800270e <HAL_GPIO_Init+0x12e>
 800263a:	4a94      	ldr	r2, [pc, #592]	; (800288c <HAL_GPIO_Init+0x2ac>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d04c      	beq.n	80026da <HAL_GPIO_Init+0xfa>
 8002640:	4a92      	ldr	r2, [pc, #584]	; (800288c <HAL_GPIO_Init+0x2ac>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d863      	bhi.n	800270e <HAL_GPIO_Init+0x12e>
 8002646:	4a92      	ldr	r2, [pc, #584]	; (8002890 <HAL_GPIO_Init+0x2b0>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d046      	beq.n	80026da <HAL_GPIO_Init+0xfa>
 800264c:	4a90      	ldr	r2, [pc, #576]	; (8002890 <HAL_GPIO_Init+0x2b0>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d85d      	bhi.n	800270e <HAL_GPIO_Init+0x12e>
 8002652:	2b12      	cmp	r3, #18
 8002654:	d82a      	bhi.n	80026ac <HAL_GPIO_Init+0xcc>
 8002656:	2b12      	cmp	r3, #18
 8002658:	d859      	bhi.n	800270e <HAL_GPIO_Init+0x12e>
 800265a:	a201      	add	r2, pc, #4	; (adr r2, 8002660 <HAL_GPIO_Init+0x80>)
 800265c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002660:	080026db 	.word	0x080026db
 8002664:	080026b5 	.word	0x080026b5
 8002668:	080026c7 	.word	0x080026c7
 800266c:	08002709 	.word	0x08002709
 8002670:	0800270f 	.word	0x0800270f
 8002674:	0800270f 	.word	0x0800270f
 8002678:	0800270f 	.word	0x0800270f
 800267c:	0800270f 	.word	0x0800270f
 8002680:	0800270f 	.word	0x0800270f
 8002684:	0800270f 	.word	0x0800270f
 8002688:	0800270f 	.word	0x0800270f
 800268c:	0800270f 	.word	0x0800270f
 8002690:	0800270f 	.word	0x0800270f
 8002694:	0800270f 	.word	0x0800270f
 8002698:	0800270f 	.word	0x0800270f
 800269c:	0800270f 	.word	0x0800270f
 80026a0:	0800270f 	.word	0x0800270f
 80026a4:	080026bd 	.word	0x080026bd
 80026a8:	080026d1 	.word	0x080026d1
 80026ac:	4a79      	ldr	r2, [pc, #484]	; (8002894 <HAL_GPIO_Init+0x2b4>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d013      	beq.n	80026da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80026b2:	e02c      	b.n	800270e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	623b      	str	r3, [r7, #32]
          break;
 80026ba:	e029      	b.n	8002710 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	3304      	adds	r3, #4
 80026c2:	623b      	str	r3, [r7, #32]
          break;
 80026c4:	e024      	b.n	8002710 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	3308      	adds	r3, #8
 80026cc:	623b      	str	r3, [r7, #32]
          break;
 80026ce:	e01f      	b.n	8002710 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	330c      	adds	r3, #12
 80026d6:	623b      	str	r3, [r7, #32]
          break;
 80026d8:	e01a      	b.n	8002710 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d102      	bne.n	80026e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026e2:	2304      	movs	r3, #4
 80026e4:	623b      	str	r3, [r7, #32]
          break;
 80026e6:	e013      	b.n	8002710 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d105      	bne.n	80026fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026f0:	2308      	movs	r3, #8
 80026f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	69fa      	ldr	r2, [r7, #28]
 80026f8:	611a      	str	r2, [r3, #16]
          break;
 80026fa:	e009      	b.n	8002710 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026fc:	2308      	movs	r3, #8
 80026fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	69fa      	ldr	r2, [r7, #28]
 8002704:	615a      	str	r2, [r3, #20]
          break;
 8002706:	e003      	b.n	8002710 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002708:	2300      	movs	r3, #0
 800270a:	623b      	str	r3, [r7, #32]
          break;
 800270c:	e000      	b.n	8002710 <HAL_GPIO_Init+0x130>
          break;
 800270e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	2bff      	cmp	r3, #255	; 0xff
 8002714:	d801      	bhi.n	800271a <HAL_GPIO_Init+0x13a>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	e001      	b.n	800271e <HAL_GPIO_Init+0x13e>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3304      	adds	r3, #4
 800271e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	2bff      	cmp	r3, #255	; 0xff
 8002724:	d802      	bhi.n	800272c <HAL_GPIO_Init+0x14c>
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	e002      	b.n	8002732 <HAL_GPIO_Init+0x152>
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	3b08      	subs	r3, #8
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	210f      	movs	r1, #15
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	fa01 f303 	lsl.w	r3, r1, r3
 8002740:	43db      	mvns	r3, r3
 8002742:	401a      	ands	r2, r3
 8002744:	6a39      	ldr	r1, [r7, #32]
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	fa01 f303 	lsl.w	r3, r1, r3
 800274c:	431a      	orrs	r2, r3
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	f000 80b1 	beq.w	80028c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002760:	4b4d      	ldr	r3, [pc, #308]	; (8002898 <HAL_GPIO_Init+0x2b8>)
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	4a4c      	ldr	r2, [pc, #304]	; (8002898 <HAL_GPIO_Init+0x2b8>)
 8002766:	f043 0301 	orr.w	r3, r3, #1
 800276a:	6193      	str	r3, [r2, #24]
 800276c:	4b4a      	ldr	r3, [pc, #296]	; (8002898 <HAL_GPIO_Init+0x2b8>)
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	60bb      	str	r3, [r7, #8]
 8002776:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002778:	4a48      	ldr	r2, [pc, #288]	; (800289c <HAL_GPIO_Init+0x2bc>)
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	089b      	lsrs	r3, r3, #2
 800277e:	3302      	adds	r3, #2
 8002780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002784:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	f003 0303 	and.w	r3, r3, #3
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	220f      	movs	r2, #15
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	43db      	mvns	r3, r3
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	4013      	ands	r3, r2
 800279a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a40      	ldr	r2, [pc, #256]	; (80028a0 <HAL_GPIO_Init+0x2c0>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d013      	beq.n	80027cc <HAL_GPIO_Init+0x1ec>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a3f      	ldr	r2, [pc, #252]	; (80028a4 <HAL_GPIO_Init+0x2c4>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d00d      	beq.n	80027c8 <HAL_GPIO_Init+0x1e8>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a3e      	ldr	r2, [pc, #248]	; (80028a8 <HAL_GPIO_Init+0x2c8>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d007      	beq.n	80027c4 <HAL_GPIO_Init+0x1e4>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a3d      	ldr	r2, [pc, #244]	; (80028ac <HAL_GPIO_Init+0x2cc>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d101      	bne.n	80027c0 <HAL_GPIO_Init+0x1e0>
 80027bc:	2303      	movs	r3, #3
 80027be:	e006      	b.n	80027ce <HAL_GPIO_Init+0x1ee>
 80027c0:	2304      	movs	r3, #4
 80027c2:	e004      	b.n	80027ce <HAL_GPIO_Init+0x1ee>
 80027c4:	2302      	movs	r3, #2
 80027c6:	e002      	b.n	80027ce <HAL_GPIO_Init+0x1ee>
 80027c8:	2301      	movs	r3, #1
 80027ca:	e000      	b.n	80027ce <HAL_GPIO_Init+0x1ee>
 80027cc:	2300      	movs	r3, #0
 80027ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027d0:	f002 0203 	and.w	r2, r2, #3
 80027d4:	0092      	lsls	r2, r2, #2
 80027d6:	4093      	lsls	r3, r2
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	4313      	orrs	r3, r2
 80027dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80027de:	492f      	ldr	r1, [pc, #188]	; (800289c <HAL_GPIO_Init+0x2bc>)
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	089b      	lsrs	r3, r3, #2
 80027e4:	3302      	adds	r3, #2
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d006      	beq.n	8002806 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80027f8:	4b2d      	ldr	r3, [pc, #180]	; (80028b0 <HAL_GPIO_Init+0x2d0>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	492c      	ldr	r1, [pc, #176]	; (80028b0 <HAL_GPIO_Init+0x2d0>)
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	4313      	orrs	r3, r2
 8002802:	600b      	str	r3, [r1, #0]
 8002804:	e006      	b.n	8002814 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002806:	4b2a      	ldr	r3, [pc, #168]	; (80028b0 <HAL_GPIO_Init+0x2d0>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	43db      	mvns	r3, r3
 800280e:	4928      	ldr	r1, [pc, #160]	; (80028b0 <HAL_GPIO_Init+0x2d0>)
 8002810:	4013      	ands	r3, r2
 8002812:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d006      	beq.n	800282e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002820:	4b23      	ldr	r3, [pc, #140]	; (80028b0 <HAL_GPIO_Init+0x2d0>)
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	4922      	ldr	r1, [pc, #136]	; (80028b0 <HAL_GPIO_Init+0x2d0>)
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	4313      	orrs	r3, r2
 800282a:	604b      	str	r3, [r1, #4]
 800282c:	e006      	b.n	800283c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800282e:	4b20      	ldr	r3, [pc, #128]	; (80028b0 <HAL_GPIO_Init+0x2d0>)
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	43db      	mvns	r3, r3
 8002836:	491e      	ldr	r1, [pc, #120]	; (80028b0 <HAL_GPIO_Init+0x2d0>)
 8002838:	4013      	ands	r3, r2
 800283a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d006      	beq.n	8002856 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002848:	4b19      	ldr	r3, [pc, #100]	; (80028b0 <HAL_GPIO_Init+0x2d0>)
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	4918      	ldr	r1, [pc, #96]	; (80028b0 <HAL_GPIO_Init+0x2d0>)
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	4313      	orrs	r3, r2
 8002852:	608b      	str	r3, [r1, #8]
 8002854:	e006      	b.n	8002864 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002856:	4b16      	ldr	r3, [pc, #88]	; (80028b0 <HAL_GPIO_Init+0x2d0>)
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	43db      	mvns	r3, r3
 800285e:	4914      	ldr	r1, [pc, #80]	; (80028b0 <HAL_GPIO_Init+0x2d0>)
 8002860:	4013      	ands	r3, r2
 8002862:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d021      	beq.n	80028b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002870:	4b0f      	ldr	r3, [pc, #60]	; (80028b0 <HAL_GPIO_Init+0x2d0>)
 8002872:	68da      	ldr	r2, [r3, #12]
 8002874:	490e      	ldr	r1, [pc, #56]	; (80028b0 <HAL_GPIO_Init+0x2d0>)
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	4313      	orrs	r3, r2
 800287a:	60cb      	str	r3, [r1, #12]
 800287c:	e021      	b.n	80028c2 <HAL_GPIO_Init+0x2e2>
 800287e:	bf00      	nop
 8002880:	10320000 	.word	0x10320000
 8002884:	10310000 	.word	0x10310000
 8002888:	10220000 	.word	0x10220000
 800288c:	10210000 	.word	0x10210000
 8002890:	10120000 	.word	0x10120000
 8002894:	10110000 	.word	0x10110000
 8002898:	40021000 	.word	0x40021000
 800289c:	40010000 	.word	0x40010000
 80028a0:	40010800 	.word	0x40010800
 80028a4:	40010c00 	.word	0x40010c00
 80028a8:	40011000 	.word	0x40011000
 80028ac:	40011400 	.word	0x40011400
 80028b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028b4:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <HAL_GPIO_Init+0x304>)
 80028b6:	68da      	ldr	r2, [r3, #12]
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	43db      	mvns	r3, r3
 80028bc:	4909      	ldr	r1, [pc, #36]	; (80028e4 <HAL_GPIO_Init+0x304>)
 80028be:	4013      	ands	r3, r2
 80028c0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	3301      	adds	r3, #1
 80028c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ce:	fa22 f303 	lsr.w	r3, r2, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f47f ae8e 	bne.w	80025f4 <HAL_GPIO_Init+0x14>
  }
}
 80028d8:	bf00      	nop
 80028da:	bf00      	nop
 80028dc:	372c      	adds	r7, #44	; 0x2c
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr
 80028e4:	40010400 	.word	0x40010400

080028e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	460b      	mov	r3, r1
 80028f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	887b      	ldrh	r3, [r7, #2]
 80028fa:	4013      	ands	r3, r2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d002      	beq.n	8002906 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002900:	2301      	movs	r3, #1
 8002902:	73fb      	strb	r3, [r7, #15]
 8002904:	e001      	b.n	800290a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002906:	2300      	movs	r3, #0
 8002908:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800290a:	7bfb      	ldrb	r3, [r7, #15]
}
 800290c:	4618      	mov	r0, r3
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	bc80      	pop	{r7}
 8002914:	4770      	bx	lr

08002916 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002916:	b480      	push	{r7}
 8002918:	b083      	sub	sp, #12
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
 800291e:	460b      	mov	r3, r1
 8002920:	807b      	strh	r3, [r7, #2]
 8002922:	4613      	mov	r3, r2
 8002924:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002926:	787b      	ldrb	r3, [r7, #1]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d003      	beq.n	8002934 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800292c:	887a      	ldrh	r2, [r7, #2]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002932:	e003      	b.n	800293c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002934:	887b      	ldrh	r3, [r7, #2]
 8002936:	041a      	lsls	r2, r3, #16
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	611a      	str	r2, [r3, #16]
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	bc80      	pop	{r7}
 8002944:	4770      	bx	lr

08002946 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002946:	b480      	push	{r7}
 8002948:	b085      	sub	sp, #20
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
 800294e:	460b      	mov	r3, r1
 8002950:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002958:	887a      	ldrh	r2, [r7, #2]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	4013      	ands	r3, r2
 800295e:	041a      	lsls	r2, r3, #16
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	43d9      	mvns	r1, r3
 8002964:	887b      	ldrh	r3, [r7, #2]
 8002966:	400b      	ands	r3, r1
 8002968:	431a      	orrs	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	611a      	str	r2, [r3, #16]
}
 800296e:	bf00      	nop
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr

08002978 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800297c:	4b03      	ldr	r3, [pc, #12]	; (800298c <HAL_PWR_EnableBkUpAccess+0x14>)
 800297e:	2201      	movs	r2, #1
 8002980:	601a      	str	r2, [r3, #0]
}
 8002982:	bf00      	nop
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	420e0020 	.word	0x420e0020

08002990 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e26c      	b.n	8002e7c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 8087 	beq.w	8002abe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029b0:	4b92      	ldr	r3, [pc, #584]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f003 030c 	and.w	r3, r3, #12
 80029b8:	2b04      	cmp	r3, #4
 80029ba:	d00c      	beq.n	80029d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029bc:	4b8f      	ldr	r3, [pc, #572]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 030c 	and.w	r3, r3, #12
 80029c4:	2b08      	cmp	r3, #8
 80029c6:	d112      	bne.n	80029ee <HAL_RCC_OscConfig+0x5e>
 80029c8:	4b8c      	ldr	r3, [pc, #560]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d4:	d10b      	bne.n	80029ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029d6:	4b89      	ldr	r3, [pc, #548]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d06c      	beq.n	8002abc <HAL_RCC_OscConfig+0x12c>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d168      	bne.n	8002abc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e246      	b.n	8002e7c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029f6:	d106      	bne.n	8002a06 <HAL_RCC_OscConfig+0x76>
 80029f8:	4b80      	ldr	r3, [pc, #512]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a7f      	ldr	r2, [pc, #508]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 80029fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a02:	6013      	str	r3, [r2, #0]
 8002a04:	e02e      	b.n	8002a64 <HAL_RCC_OscConfig+0xd4>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10c      	bne.n	8002a28 <HAL_RCC_OscConfig+0x98>
 8002a0e:	4b7b      	ldr	r3, [pc, #492]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a7a      	ldr	r2, [pc, #488]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002a14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	4b78      	ldr	r3, [pc, #480]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a77      	ldr	r2, [pc, #476]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002a20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a24:	6013      	str	r3, [r2, #0]
 8002a26:	e01d      	b.n	8002a64 <HAL_RCC_OscConfig+0xd4>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a30:	d10c      	bne.n	8002a4c <HAL_RCC_OscConfig+0xbc>
 8002a32:	4b72      	ldr	r3, [pc, #456]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a71      	ldr	r2, [pc, #452]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002a38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a3c:	6013      	str	r3, [r2, #0]
 8002a3e:	4b6f      	ldr	r3, [pc, #444]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a6e      	ldr	r2, [pc, #440]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a48:	6013      	str	r3, [r2, #0]
 8002a4a:	e00b      	b.n	8002a64 <HAL_RCC_OscConfig+0xd4>
 8002a4c:	4b6b      	ldr	r3, [pc, #428]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a6a      	ldr	r2, [pc, #424]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a56:	6013      	str	r3, [r2, #0]
 8002a58:	4b68      	ldr	r3, [pc, #416]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a67      	ldr	r2, [pc, #412]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002a5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a62:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d013      	beq.n	8002a94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6c:	f7fe fff6 	bl	8001a5c <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a74:	f7fe fff2 	bl	8001a5c <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b64      	cmp	r3, #100	; 0x64
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e1fa      	b.n	8002e7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a86:	4b5d      	ldr	r3, [pc, #372]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d0f0      	beq.n	8002a74 <HAL_RCC_OscConfig+0xe4>
 8002a92:	e014      	b.n	8002abe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a94:	f7fe ffe2 	bl	8001a5c <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a9c:	f7fe ffde 	bl	8001a5c <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b64      	cmp	r3, #100	; 0x64
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e1e6      	b.n	8002e7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aae:	4b53      	ldr	r3, [pc, #332]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1f0      	bne.n	8002a9c <HAL_RCC_OscConfig+0x10c>
 8002aba:	e000      	b.n	8002abe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002abc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d063      	beq.n	8002b92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002aca:	4b4c      	ldr	r3, [pc, #304]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f003 030c 	and.w	r3, r3, #12
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00b      	beq.n	8002aee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ad6:	4b49      	ldr	r3, [pc, #292]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f003 030c 	and.w	r3, r3, #12
 8002ade:	2b08      	cmp	r3, #8
 8002ae0:	d11c      	bne.n	8002b1c <HAL_RCC_OscConfig+0x18c>
 8002ae2:	4b46      	ldr	r3, [pc, #280]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d116      	bne.n	8002b1c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aee:	4b43      	ldr	r3, [pc, #268]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d005      	beq.n	8002b06 <HAL_RCC_OscConfig+0x176>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d001      	beq.n	8002b06 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e1ba      	b.n	8002e7c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b06:	4b3d      	ldr	r3, [pc, #244]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	4939      	ldr	r1, [pc, #228]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b1a:	e03a      	b.n	8002b92 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d020      	beq.n	8002b66 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b24:	4b36      	ldr	r3, [pc, #216]	; (8002c00 <HAL_RCC_OscConfig+0x270>)
 8002b26:	2201      	movs	r2, #1
 8002b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2a:	f7fe ff97 	bl	8001a5c <HAL_GetTick>
 8002b2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b32:	f7fe ff93 	bl	8001a5c <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e19b      	b.n	8002e7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b44:	4b2d      	ldr	r3, [pc, #180]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0f0      	beq.n	8002b32 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b50:	4b2a      	ldr	r3, [pc, #168]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	695b      	ldr	r3, [r3, #20]
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	4927      	ldr	r1, [pc, #156]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	600b      	str	r3, [r1, #0]
 8002b64:	e015      	b.n	8002b92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b66:	4b26      	ldr	r3, [pc, #152]	; (8002c00 <HAL_RCC_OscConfig+0x270>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6c:	f7fe ff76 	bl	8001a5c <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b74:	f7fe ff72 	bl	8001a5c <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e17a      	b.n	8002e7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b86:	4b1d      	ldr	r3, [pc, #116]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1f0      	bne.n	8002b74 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0308 	and.w	r3, r3, #8
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d03a      	beq.n	8002c14 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d019      	beq.n	8002bda <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ba6:	4b17      	ldr	r3, [pc, #92]	; (8002c04 <HAL_RCC_OscConfig+0x274>)
 8002ba8:	2201      	movs	r2, #1
 8002baa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bac:	f7fe ff56 	bl	8001a5c <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bb4:	f7fe ff52 	bl	8001a5c <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e15a      	b.n	8002e7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bc6:	4b0d      	ldr	r3, [pc, #52]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d0f0      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002bd2:	2001      	movs	r0, #1
 8002bd4:	f000 fad8 	bl	8003188 <RCC_Delay>
 8002bd8:	e01c      	b.n	8002c14 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bda:	4b0a      	ldr	r3, [pc, #40]	; (8002c04 <HAL_RCC_OscConfig+0x274>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be0:	f7fe ff3c 	bl	8001a5c <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002be6:	e00f      	b.n	8002c08 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002be8:	f7fe ff38 	bl	8001a5c <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d908      	bls.n	8002c08 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e140      	b.n	8002e7c <HAL_RCC_OscConfig+0x4ec>
 8002bfa:	bf00      	nop
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	42420000 	.word	0x42420000
 8002c04:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c08:	4b9e      	ldr	r3, [pc, #632]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1e9      	bne.n	8002be8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 80a6 	beq.w	8002d6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c22:	2300      	movs	r3, #0
 8002c24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c26:	4b97      	ldr	r3, [pc, #604]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d10d      	bne.n	8002c4e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c32:	4b94      	ldr	r3, [pc, #592]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	4a93      	ldr	r2, [pc, #588]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c3c:	61d3      	str	r3, [r2, #28]
 8002c3e:	4b91      	ldr	r3, [pc, #580]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c46:	60bb      	str	r3, [r7, #8]
 8002c48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4e:	4b8e      	ldr	r3, [pc, #568]	; (8002e88 <HAL_RCC_OscConfig+0x4f8>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d118      	bne.n	8002c8c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c5a:	4b8b      	ldr	r3, [pc, #556]	; (8002e88 <HAL_RCC_OscConfig+0x4f8>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a8a      	ldr	r2, [pc, #552]	; (8002e88 <HAL_RCC_OscConfig+0x4f8>)
 8002c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c66:	f7fe fef9 	bl	8001a5c <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c6c:	e008      	b.n	8002c80 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c6e:	f7fe fef5 	bl	8001a5c <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b64      	cmp	r3, #100	; 0x64
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e0fd      	b.n	8002e7c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c80:	4b81      	ldr	r3, [pc, #516]	; (8002e88 <HAL_RCC_OscConfig+0x4f8>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d0f0      	beq.n	8002c6e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d106      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x312>
 8002c94:	4b7b      	ldr	r3, [pc, #492]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	4a7a      	ldr	r2, [pc, #488]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002c9a:	f043 0301 	orr.w	r3, r3, #1
 8002c9e:	6213      	str	r3, [r2, #32]
 8002ca0:	e02d      	b.n	8002cfe <HAL_RCC_OscConfig+0x36e>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10c      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x334>
 8002caa:	4b76      	ldr	r3, [pc, #472]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	4a75      	ldr	r2, [pc, #468]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002cb0:	f023 0301 	bic.w	r3, r3, #1
 8002cb4:	6213      	str	r3, [r2, #32]
 8002cb6:	4b73      	ldr	r3, [pc, #460]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	4a72      	ldr	r2, [pc, #456]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002cbc:	f023 0304 	bic.w	r3, r3, #4
 8002cc0:	6213      	str	r3, [r2, #32]
 8002cc2:	e01c      	b.n	8002cfe <HAL_RCC_OscConfig+0x36e>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	2b05      	cmp	r3, #5
 8002cca:	d10c      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x356>
 8002ccc:	4b6d      	ldr	r3, [pc, #436]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	4a6c      	ldr	r2, [pc, #432]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002cd2:	f043 0304 	orr.w	r3, r3, #4
 8002cd6:	6213      	str	r3, [r2, #32]
 8002cd8:	4b6a      	ldr	r3, [pc, #424]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	4a69      	ldr	r2, [pc, #420]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002cde:	f043 0301 	orr.w	r3, r3, #1
 8002ce2:	6213      	str	r3, [r2, #32]
 8002ce4:	e00b      	b.n	8002cfe <HAL_RCC_OscConfig+0x36e>
 8002ce6:	4b67      	ldr	r3, [pc, #412]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	4a66      	ldr	r2, [pc, #408]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002cec:	f023 0301 	bic.w	r3, r3, #1
 8002cf0:	6213      	str	r3, [r2, #32]
 8002cf2:	4b64      	ldr	r3, [pc, #400]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	4a63      	ldr	r2, [pc, #396]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002cf8:	f023 0304 	bic.w	r3, r3, #4
 8002cfc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d015      	beq.n	8002d32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d06:	f7fe fea9 	bl	8001a5c <HAL_GetTick>
 8002d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d0c:	e00a      	b.n	8002d24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d0e:	f7fe fea5 	bl	8001a5c <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e0ab      	b.n	8002e7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d24:	4b57      	ldr	r3, [pc, #348]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002d26:	6a1b      	ldr	r3, [r3, #32]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d0ee      	beq.n	8002d0e <HAL_RCC_OscConfig+0x37e>
 8002d30:	e014      	b.n	8002d5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d32:	f7fe fe93 	bl	8001a5c <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d38:	e00a      	b.n	8002d50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d3a:	f7fe fe8f 	bl	8001a5c <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e095      	b.n	8002e7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d50:	4b4c      	ldr	r3, [pc, #304]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1ee      	bne.n	8002d3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d5c:	7dfb      	ldrb	r3, [r7, #23]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d105      	bne.n	8002d6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d62:	4b48      	ldr	r3, [pc, #288]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	4a47      	ldr	r2, [pc, #284]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002d68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 8081 	beq.w	8002e7a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d78:	4b42      	ldr	r3, [pc, #264]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f003 030c 	and.w	r3, r3, #12
 8002d80:	2b08      	cmp	r3, #8
 8002d82:	d061      	beq.n	8002e48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	69db      	ldr	r3, [r3, #28]
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d146      	bne.n	8002e1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d8c:	4b3f      	ldr	r3, [pc, #252]	; (8002e8c <HAL_RCC_OscConfig+0x4fc>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d92:	f7fe fe63 	bl	8001a5c <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d98:	e008      	b.n	8002dac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d9a:	f7fe fe5f 	bl	8001a5c <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e067      	b.n	8002e7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dac:	4b35      	ldr	r3, [pc, #212]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1f0      	bne.n	8002d9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dc0:	d108      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002dc2:	4b30      	ldr	r3, [pc, #192]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	492d      	ldr	r1, [pc, #180]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dd4:	4b2b      	ldr	r3, [pc, #172]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a19      	ldr	r1, [r3, #32]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de4:	430b      	orrs	r3, r1
 8002de6:	4927      	ldr	r1, [pc, #156]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dec:	4b27      	ldr	r3, [pc, #156]	; (8002e8c <HAL_RCC_OscConfig+0x4fc>)
 8002dee:	2201      	movs	r2, #1
 8002df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df2:	f7fe fe33 	bl	8001a5c <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002df8:	e008      	b.n	8002e0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dfa:	f7fe fe2f 	bl	8001a5c <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e037      	b.n	8002e7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e0c:	4b1d      	ldr	r3, [pc, #116]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d0f0      	beq.n	8002dfa <HAL_RCC_OscConfig+0x46a>
 8002e18:	e02f      	b.n	8002e7a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e1a:	4b1c      	ldr	r3, [pc, #112]	; (8002e8c <HAL_RCC_OscConfig+0x4fc>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e20:	f7fe fe1c 	bl	8001a5c <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e28:	f7fe fe18 	bl	8001a5c <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e020      	b.n	8002e7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e3a:	4b12      	ldr	r3, [pc, #72]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1f0      	bne.n	8002e28 <HAL_RCC_OscConfig+0x498>
 8002e46:	e018      	b.n	8002e7a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	69db      	ldr	r3, [r3, #28]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d101      	bne.n	8002e54 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e013      	b.n	8002e7c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e54:	4b0b      	ldr	r3, [pc, #44]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d106      	bne.n	8002e76 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d001      	beq.n	8002e7a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e000      	b.n	8002e7c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40021000 	.word	0x40021000
 8002e88:	40007000 	.word	0x40007000
 8002e8c:	42420060 	.word	0x42420060

08002e90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d101      	bne.n	8002ea4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e0d0      	b.n	8003046 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ea4:	4b6a      	ldr	r3, [pc, #424]	; (8003050 <HAL_RCC_ClockConfig+0x1c0>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0307 	and.w	r3, r3, #7
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d910      	bls.n	8002ed4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb2:	4b67      	ldr	r3, [pc, #412]	; (8003050 <HAL_RCC_ClockConfig+0x1c0>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f023 0207 	bic.w	r2, r3, #7
 8002eba:	4965      	ldr	r1, [pc, #404]	; (8003050 <HAL_RCC_ClockConfig+0x1c0>)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ec2:	4b63      	ldr	r3, [pc, #396]	; (8003050 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d001      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e0b8      	b.n	8003046 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d020      	beq.n	8002f22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d005      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002eec:	4b59      	ldr	r3, [pc, #356]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	4a58      	ldr	r2, [pc, #352]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ef6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0308 	and.w	r3, r3, #8
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d005      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f04:	4b53      	ldr	r3, [pc, #332]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	4a52      	ldr	r2, [pc, #328]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f10:	4b50      	ldr	r3, [pc, #320]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	494d      	ldr	r1, [pc, #308]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d040      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d107      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f36:	4b47      	ldr	r3, [pc, #284]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d115      	bne.n	8002f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e07f      	b.n	8003046 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d107      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f4e:	4b41      	ldr	r3, [pc, #260]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d109      	bne.n	8002f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e073      	b.n	8003046 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f5e:	4b3d      	ldr	r3, [pc, #244]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e06b      	b.n	8003046 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f6e:	4b39      	ldr	r3, [pc, #228]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f023 0203 	bic.w	r2, r3, #3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	4936      	ldr	r1, [pc, #216]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f80:	f7fe fd6c 	bl	8001a5c <HAL_GetTick>
 8002f84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f86:	e00a      	b.n	8002f9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f88:	f7fe fd68 	bl	8001a5c <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e053      	b.n	8003046 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f9e:	4b2d      	ldr	r3, [pc, #180]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f003 020c 	and.w	r2, r3, #12
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d1eb      	bne.n	8002f88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fb0:	4b27      	ldr	r3, [pc, #156]	; (8003050 <HAL_RCC_ClockConfig+0x1c0>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0307 	and.w	r3, r3, #7
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d210      	bcs.n	8002fe0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fbe:	4b24      	ldr	r3, [pc, #144]	; (8003050 <HAL_RCC_ClockConfig+0x1c0>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f023 0207 	bic.w	r2, r3, #7
 8002fc6:	4922      	ldr	r1, [pc, #136]	; (8003050 <HAL_RCC_ClockConfig+0x1c0>)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fce:	4b20      	ldr	r3, [pc, #128]	; (8003050 <HAL_RCC_ClockConfig+0x1c0>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d001      	beq.n	8002fe0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e032      	b.n	8003046 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d008      	beq.n	8002ffe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fec:	4b19      	ldr	r3, [pc, #100]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	4916      	ldr	r1, [pc, #88]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	2b00      	cmp	r3, #0
 8003008:	d009      	beq.n	800301e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800300a:	4b12      	ldr	r3, [pc, #72]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	490e      	ldr	r1, [pc, #56]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 800301a:	4313      	orrs	r3, r2
 800301c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800301e:	f000 f821 	bl	8003064 <HAL_RCC_GetSysClockFreq>
 8003022:	4602      	mov	r2, r0
 8003024:	4b0b      	ldr	r3, [pc, #44]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	091b      	lsrs	r3, r3, #4
 800302a:	f003 030f 	and.w	r3, r3, #15
 800302e:	490a      	ldr	r1, [pc, #40]	; (8003058 <HAL_RCC_ClockConfig+0x1c8>)
 8003030:	5ccb      	ldrb	r3, [r1, r3]
 8003032:	fa22 f303 	lsr.w	r3, r2, r3
 8003036:	4a09      	ldr	r2, [pc, #36]	; (800305c <HAL_RCC_ClockConfig+0x1cc>)
 8003038:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800303a:	4b09      	ldr	r3, [pc, #36]	; (8003060 <HAL_RCC_ClockConfig+0x1d0>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f7fe fcca 	bl	80019d8 <HAL_InitTick>

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40022000 	.word	0x40022000
 8003054:	40021000 	.word	0x40021000
 8003058:	080056d4 	.word	0x080056d4
 800305c:	20000000 	.word	0x20000000
 8003060:	20000004 	.word	0x20000004

08003064 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003064:	b490      	push	{r4, r7}
 8003066:	b08a      	sub	sp, #40	; 0x28
 8003068:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800306a:	4b2a      	ldr	r3, [pc, #168]	; (8003114 <HAL_RCC_GetSysClockFreq+0xb0>)
 800306c:	1d3c      	adds	r4, r7, #4
 800306e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003070:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003074:	f240 2301 	movw	r3, #513	; 0x201
 8003078:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800307a:	2300      	movs	r3, #0
 800307c:	61fb      	str	r3, [r7, #28]
 800307e:	2300      	movs	r3, #0
 8003080:	61bb      	str	r3, [r7, #24]
 8003082:	2300      	movs	r3, #0
 8003084:	627b      	str	r3, [r7, #36]	; 0x24
 8003086:	2300      	movs	r3, #0
 8003088:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800308a:	2300      	movs	r3, #0
 800308c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800308e:	4b22      	ldr	r3, [pc, #136]	; (8003118 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	f003 030c 	and.w	r3, r3, #12
 800309a:	2b04      	cmp	r3, #4
 800309c:	d002      	beq.n	80030a4 <HAL_RCC_GetSysClockFreq+0x40>
 800309e:	2b08      	cmp	r3, #8
 80030a0:	d003      	beq.n	80030aa <HAL_RCC_GetSysClockFreq+0x46>
 80030a2:	e02d      	b.n	8003100 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030a4:	4b1d      	ldr	r3, [pc, #116]	; (800311c <HAL_RCC_GetSysClockFreq+0xb8>)
 80030a6:	623b      	str	r3, [r7, #32]
      break;
 80030a8:	e02d      	b.n	8003106 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	0c9b      	lsrs	r3, r3, #18
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80030b6:	4413      	add	r3, r2
 80030b8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80030bc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d013      	beq.n	80030f0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030c8:	4b13      	ldr	r3, [pc, #76]	; (8003118 <HAL_RCC_GetSysClockFreq+0xb4>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	0c5b      	lsrs	r3, r3, #17
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80030d6:	4413      	add	r3, r2
 80030d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80030dc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	4a0e      	ldr	r2, [pc, #56]	; (800311c <HAL_RCC_GetSysClockFreq+0xb8>)
 80030e2:	fb02 f203 	mul.w	r2, r2, r3
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ec:	627b      	str	r3, [r7, #36]	; 0x24
 80030ee:	e004      	b.n	80030fa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	4a0b      	ldr	r2, [pc, #44]	; (8003120 <HAL_RCC_GetSysClockFreq+0xbc>)
 80030f4:	fb02 f303 	mul.w	r3, r2, r3
 80030f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	623b      	str	r3, [r7, #32]
      break;
 80030fe:	e002      	b.n	8003106 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003100:	4b06      	ldr	r3, [pc, #24]	; (800311c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003102:	623b      	str	r3, [r7, #32]
      break;
 8003104:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003106:	6a3b      	ldr	r3, [r7, #32]
}
 8003108:	4618      	mov	r0, r3
 800310a:	3728      	adds	r7, #40	; 0x28
 800310c:	46bd      	mov	sp, r7
 800310e:	bc90      	pop	{r4, r7}
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	080056b4 	.word	0x080056b4
 8003118:	40021000 	.word	0x40021000
 800311c:	007a1200 	.word	0x007a1200
 8003120:	003d0900 	.word	0x003d0900

08003124 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003128:	4b02      	ldr	r3, [pc, #8]	; (8003134 <HAL_RCC_GetHCLKFreq+0x10>)
 800312a:	681b      	ldr	r3, [r3, #0]
}
 800312c:	4618      	mov	r0, r3
 800312e:	46bd      	mov	sp, r7
 8003130:	bc80      	pop	{r7}
 8003132:	4770      	bx	lr
 8003134:	20000000 	.word	0x20000000

08003138 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800313c:	f7ff fff2 	bl	8003124 <HAL_RCC_GetHCLKFreq>
 8003140:	4602      	mov	r2, r0
 8003142:	4b05      	ldr	r3, [pc, #20]	; (8003158 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	0a1b      	lsrs	r3, r3, #8
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	4903      	ldr	r1, [pc, #12]	; (800315c <HAL_RCC_GetPCLK1Freq+0x24>)
 800314e:	5ccb      	ldrb	r3, [r1, r3]
 8003150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003154:	4618      	mov	r0, r3
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40021000 	.word	0x40021000
 800315c:	080056e4 	.word	0x080056e4

08003160 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003164:	f7ff ffde 	bl	8003124 <HAL_RCC_GetHCLKFreq>
 8003168:	4602      	mov	r2, r0
 800316a:	4b05      	ldr	r3, [pc, #20]	; (8003180 <HAL_RCC_GetPCLK2Freq+0x20>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	0adb      	lsrs	r3, r3, #11
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	4903      	ldr	r1, [pc, #12]	; (8003184 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003176:	5ccb      	ldrb	r3, [r1, r3]
 8003178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800317c:	4618      	mov	r0, r3
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40021000 	.word	0x40021000
 8003184:	080056e4 	.word	0x080056e4

08003188 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003190:	4b0a      	ldr	r3, [pc, #40]	; (80031bc <RCC_Delay+0x34>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a0a      	ldr	r2, [pc, #40]	; (80031c0 <RCC_Delay+0x38>)
 8003196:	fba2 2303 	umull	r2, r3, r2, r3
 800319a:	0a5b      	lsrs	r3, r3, #9
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	fb02 f303 	mul.w	r3, r2, r3
 80031a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031a4:	bf00      	nop
  }
  while (Delay --);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	1e5a      	subs	r2, r3, #1
 80031aa:	60fa      	str	r2, [r7, #12]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1f9      	bne.n	80031a4 <RCC_Delay+0x1c>
}
 80031b0:	bf00      	nop
 80031b2:	bf00      	nop
 80031b4:	3714      	adds	r7, #20
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr
 80031bc:	20000000 	.word	0x20000000
 80031c0:	10624dd3 	.word	0x10624dd3

080031c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80031cc:	2300      	movs	r3, #0
 80031ce:	613b      	str	r3, [r7, #16]
 80031d0:	2300      	movs	r3, #0
 80031d2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d07d      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80031e0:	2300      	movs	r3, #0
 80031e2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031e4:	4b4f      	ldr	r3, [pc, #316]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e6:	69db      	ldr	r3, [r3, #28]
 80031e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10d      	bne.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031f0:	4b4c      	ldr	r3, [pc, #304]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f2:	69db      	ldr	r3, [r3, #28]
 80031f4:	4a4b      	ldr	r2, [pc, #300]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031fa:	61d3      	str	r3, [r2, #28]
 80031fc:	4b49      	ldr	r3, [pc, #292]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003204:	60bb      	str	r3, [r7, #8]
 8003206:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003208:	2301      	movs	r3, #1
 800320a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800320c:	4b46      	ldr	r3, [pc, #280]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003214:	2b00      	cmp	r3, #0
 8003216:	d118      	bne.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003218:	4b43      	ldr	r3, [pc, #268]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a42      	ldr	r2, [pc, #264]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800321e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003222:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003224:	f7fe fc1a 	bl	8001a5c <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800322a:	e008      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800322c:	f7fe fc16 	bl	8001a5c <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b64      	cmp	r3, #100	; 0x64
 8003238:	d901      	bls.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e06d      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800323e:	4b3a      	ldr	r3, [pc, #232]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003246:	2b00      	cmp	r3, #0
 8003248:	d0f0      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800324a:	4b36      	ldr	r3, [pc, #216]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003252:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d02e      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	429a      	cmp	r2, r3
 8003266:	d027      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003268:	4b2e      	ldr	r3, [pc, #184]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003270:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003272:	4b2e      	ldr	r3, [pc, #184]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003274:	2201      	movs	r2, #1
 8003276:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003278:	4b2c      	ldr	r3, [pc, #176]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800327a:	2200      	movs	r2, #0
 800327c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800327e:	4a29      	ldr	r2, [pc, #164]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d014      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800328e:	f7fe fbe5 	bl	8001a5c <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003294:	e00a      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003296:	f7fe fbe1 	bl	8001a5c <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d901      	bls.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e036      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ac:	4b1d      	ldr	r3, [pc, #116]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0ee      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032b8:	4b1a      	ldr	r3, [pc, #104]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	4917      	ldr	r1, [pc, #92]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032ca:	7dfb      	ldrb	r3, [r7, #23]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d105      	bne.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032d0:	4b14      	ldr	r3, [pc, #80]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	4a13      	ldr	r2, [pc, #76]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032da:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d008      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032e8:	4b0e      	ldr	r3, [pc, #56]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	490b      	ldr	r1, [pc, #44]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0310 	and.w	r3, r3, #16
 8003302:	2b00      	cmp	r3, #0
 8003304:	d008      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003306:	4b07      	ldr	r3, [pc, #28]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	4904      	ldr	r1, [pc, #16]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003314:	4313      	orrs	r3, r2
 8003316:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3718      	adds	r7, #24
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	40021000 	.word	0x40021000
 8003328:	40007000 	.word	0x40007000
 800332c:	42420440 	.word	0x42420440

08003330 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003330:	b590      	push	{r4, r7, lr}
 8003332:	b08d      	sub	sp, #52	; 0x34
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003338:	4b5a      	ldr	r3, [pc, #360]	; (80034a4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800333a:	f107 040c 	add.w	r4, r7, #12
 800333e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003340:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003344:	f240 2301 	movw	r3, #513	; 0x201
 8003348:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800334a:	2300      	movs	r3, #0
 800334c:	627b      	str	r3, [r7, #36]	; 0x24
 800334e:	2300      	movs	r3, #0
 8003350:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003352:	2300      	movs	r3, #0
 8003354:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003356:	2300      	movs	r3, #0
 8003358:	61fb      	str	r3, [r7, #28]
 800335a:	2300      	movs	r3, #0
 800335c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b10      	cmp	r3, #16
 8003362:	d00a      	beq.n	800337a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b10      	cmp	r3, #16
 8003368:	f200 8091 	bhi.w	800348e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d04c      	beq.n	800340c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2b02      	cmp	r3, #2
 8003376:	d07c      	beq.n	8003472 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003378:	e089      	b.n	800348e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 800337a:	4b4b      	ldr	r3, [pc, #300]	; (80034a8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003380:	4b49      	ldr	r3, [pc, #292]	; (80034a8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 8082 	beq.w	8003492 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	0c9b      	lsrs	r3, r3, #18
 8003392:	f003 030f 	and.w	r3, r3, #15
 8003396:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800339a:	4413      	add	r3, r2
 800339c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80033a0:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d018      	beq.n	80033de <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033ac:	4b3e      	ldr	r3, [pc, #248]	; (80034a8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	0c5b      	lsrs	r3, r3, #17
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80033ba:	4413      	add	r3, r2
 80033bc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80033c0:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00d      	beq.n	80033e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80033cc:	4a37      	ldr	r2, [pc, #220]	; (80034ac <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	fb02 f303 	mul.w	r3, r2, r3
 80033da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033dc:	e004      	b.n	80033e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033de:	6a3b      	ldr	r3, [r7, #32]
 80033e0:	4a33      	ldr	r2, [pc, #204]	; (80034b0 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 80033e2:	fb02 f303 	mul.w	r3, r2, r3
 80033e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80033e8:	4b2f      	ldr	r3, [pc, #188]	; (80034a8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033f4:	d102      	bne.n	80033fc <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 80033f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80033fa:	e04a      	b.n	8003492 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 80033fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	4a2c      	ldr	r2, [pc, #176]	; (80034b4 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8003402:	fba2 2303 	umull	r2, r3, r2, r3
 8003406:	085b      	lsrs	r3, r3, #1
 8003408:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800340a:	e042      	b.n	8003492 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 800340c:	4b26      	ldr	r3, [pc, #152]	; (80034a8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003418:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800341c:	d108      	bne.n	8003430 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8003428:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800342c:	62bb      	str	r3, [r7, #40]	; 0x28
 800342e:	e01f      	b.n	8003470 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003436:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800343a:	d109      	bne.n	8003450 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800343c:	4b1a      	ldr	r3, [pc, #104]	; (80034a8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d003      	beq.n	8003450 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8003448:	f649 4340 	movw	r3, #40000	; 0x9c40
 800344c:	62bb      	str	r3, [r7, #40]	; 0x28
 800344e:	e00f      	b.n	8003470 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003456:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800345a:	d11c      	bne.n	8003496 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 800345c:	4b12      	ldr	r3, [pc, #72]	; (80034a8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d016      	beq.n	8003496 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8003468:	f24f 4324 	movw	r3, #62500	; 0xf424
 800346c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800346e:	e012      	b.n	8003496 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003470:	e011      	b.n	8003496 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003472:	f7ff fe75 	bl	8003160 <HAL_RCC_GetPCLK2Freq>
 8003476:	4602      	mov	r2, r0
 8003478:	4b0b      	ldr	r3, [pc, #44]	; (80034a8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	0b9b      	lsrs	r3, r3, #14
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	3301      	adds	r3, #1
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	fbb2 f3f3 	udiv	r3, r2, r3
 800348a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800348c:	e004      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800348e:	bf00      	nop
 8003490:	e002      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003492:	bf00      	nop
 8003494:	e000      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003496:	bf00      	nop
    }
  }
  return (frequency);
 8003498:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800349a:	4618      	mov	r0, r3
 800349c:	3734      	adds	r7, #52	; 0x34
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd90      	pop	{r4, r7, pc}
 80034a2:	bf00      	nop
 80034a4:	080056c4 	.word	0x080056c4
 80034a8:	40021000 	.word	0x40021000
 80034ac:	007a1200 	.word	0x007a1200
 80034b0:	003d0900 	.word	0x003d0900
 80034b4:	aaaaaaab 	.word	0xaaaaaaab

080034b8 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80034c0:	2300      	movs	r3, #0
 80034c2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e084      	b.n	80035d8 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	7c5b      	ldrb	r3, [r3, #17]
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d105      	bne.n	80034e4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f7fe f8b8 	bl	8001654 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2202      	movs	r2, #2
 80034e8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 faf4 	bl	8003ad8 <HAL_RTC_WaitForSynchro>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d004      	beq.n	8003500 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2204      	movs	r2, #4
 80034fa:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e06b      	b.n	80035d8 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 fbad 	bl	8003c60 <RTC_EnterInitMode>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d004      	beq.n	8003516 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2204      	movs	r2, #4
 8003510:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e060      	b.n	80035d8 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 0207 	bic.w	r2, r2, #7
 8003524:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d005      	beq.n	800353a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800352e:	4b2c      	ldr	r3, [pc, #176]	; (80035e0 <HAL_RTC_Init+0x128>)
 8003530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003532:	4a2b      	ldr	r2, [pc, #172]	; (80035e0 <HAL_RTC_Init+0x128>)
 8003534:	f023 0301 	bic.w	r3, r3, #1
 8003538:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800353a:	4b29      	ldr	r3, [pc, #164]	; (80035e0 <HAL_RTC_Init+0x128>)
 800353c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	4926      	ldr	r1, [pc, #152]	; (80035e0 <HAL_RTC_Init+0x128>)
 8003548:	4313      	orrs	r3, r2
 800354a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003554:	d003      	beq.n	800355e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	60fb      	str	r3, [r7, #12]
 800355c:	e00e      	b.n	800357c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800355e:	2001      	movs	r0, #1
 8003560:	f7ff fee6 	bl	8003330 <HAL_RCCEx_GetPeriphCLKFreq>
 8003564:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d104      	bne.n	8003576 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2204      	movs	r2, #4
 8003570:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e030      	b.n	80035d8 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	3b01      	subs	r3, #1
 800357a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f023 010f 	bic.w	r1, r3, #15
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	0c1a      	lsrs	r2, r3, #16
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	0c1b      	lsrs	r3, r3, #16
 800359a:	041b      	lsls	r3, r3, #16
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	b291      	uxth	r1, r2
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	6812      	ldr	r2, [r2, #0]
 80035a4:	430b      	orrs	r3, r1
 80035a6:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 fb81 	bl	8003cb0 <RTC_ExitInitMode>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d004      	beq.n	80035be <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2204      	movs	r2, #4
 80035b8:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e00c      	b.n	80035d8 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80035d6:	2300      	movs	r3, #0
  }
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	40006c00 	.word	0x40006c00

080035e4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80035e4:	b590      	push	{r4, r7, lr}
 80035e6:	b087      	sub	sp, #28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80035f0:	2300      	movs	r3, #0
 80035f2:	617b      	str	r3, [r7, #20]
 80035f4:	2300      	movs	r3, #0
 80035f6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d002      	beq.n	8003604 <HAL_RTC_SetTime+0x20>
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e080      	b.n	800370a <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	7c1b      	ldrb	r3, [r3, #16]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d101      	bne.n	8003614 <HAL_RTC_SetTime+0x30>
 8003610:	2302      	movs	r3, #2
 8003612:	e07a      	b.n	800370a <HAL_RTC_SetTime+0x126>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2201      	movs	r2, #1
 8003618:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2202      	movs	r2, #2
 800361e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d113      	bne.n	800364e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	461a      	mov	r2, r3
 800362c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003630:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	785b      	ldrb	r3, [r3, #1]
 8003638:	4619      	mov	r1, r3
 800363a:	460b      	mov	r3, r1
 800363c:	011b      	lsls	r3, r3, #4
 800363e:	1a5b      	subs	r3, r3, r1
 8003640:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003642:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8003644:	68ba      	ldr	r2, [r7, #8]
 8003646:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003648:	4413      	add	r3, r2
 800364a:	617b      	str	r3, [r7, #20]
 800364c:	e01e      	b.n	800368c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f000 fb71 	bl	8003d3a <RTC_Bcd2ToByte>
 8003658:	4603      	mov	r3, r0
 800365a:	461a      	mov	r2, r3
 800365c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003660:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	785b      	ldrb	r3, [r3, #1]
 8003668:	4618      	mov	r0, r3
 800366a:	f000 fb66 	bl	8003d3a <RTC_Bcd2ToByte>
 800366e:	4603      	mov	r3, r0
 8003670:	461a      	mov	r2, r3
 8003672:	4613      	mov	r3, r2
 8003674:	011b      	lsls	r3, r3, #4
 8003676:	1a9b      	subs	r3, r3, r2
 8003678:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800367a:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	789b      	ldrb	r3, [r3, #2]
 8003680:	4618      	mov	r0, r3
 8003682:	f000 fb5a 	bl	8003d3a <RTC_Bcd2ToByte>
 8003686:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003688:	4423      	add	r3, r4
 800368a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800368c:	6979      	ldr	r1, [r7, #20]
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f000 fa7f 	bl	8003b92 <RTC_WriteTimeCounter>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d007      	beq.n	80036aa <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2204      	movs	r2, #4
 800369e:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e02f      	b.n	800370a <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685a      	ldr	r2, [r3, #4]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 0205 	bic.w	r2, r2, #5
 80036b8:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 fa90 	bl	8003be0 <RTC_ReadAlarmCounter>
 80036c0:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c8:	d018      	beq.n	80036fc <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d214      	bcs.n	80036fc <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80036d8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80036dc:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80036de:	6939      	ldr	r1, [r7, #16]
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f000 fa96 	bl	8003c12 <RTC_WriteAlarmCounter>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d007      	beq.n	80036fc <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2204      	movs	r2, #4
 80036f0:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e006      	b.n	800370a <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2201      	movs	r2, #1
 8003700:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003708:	2300      	movs	r3, #0
  }
}
 800370a:	4618      	mov	r0, r3
 800370c:	371c      	adds	r7, #28
 800370e:	46bd      	mov	sp, r7
 8003710:	bd90      	pop	{r4, r7, pc}
	...

08003714 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b088      	sub	sp, #32
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8003720:	2300      	movs	r3, #0
 8003722:	61bb      	str	r3, [r7, #24]
 8003724:	2300      	movs	r3, #0
 8003726:	61fb      	str	r3, [r7, #28]
 8003728:	2300      	movs	r3, #0
 800372a:	617b      	str	r3, [r7, #20]
 800372c:	2300      	movs	r3, #0
 800372e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d002      	beq.n	800373c <HAL_RTC_GetTime+0x28>
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d101      	bne.n	8003740 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e0b5      	b.n	80038ac <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f003 0304 	and.w	r3, r3, #4
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e0ac      	b.n	80038ac <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 f9ed 	bl	8003b32 <RTC_ReadTimeCounter>
 8003758:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	4a55      	ldr	r2, [pc, #340]	; (80038b4 <HAL_RTC_GetTime+0x1a0>)
 800375e:	fba2 2303 	umull	r2, r3, r2, r3
 8003762:	0adb      	lsrs	r3, r3, #11
 8003764:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	4b52      	ldr	r3, [pc, #328]	; (80038b4 <HAL_RTC_GetTime+0x1a0>)
 800376a:	fba3 1302 	umull	r1, r3, r3, r2
 800376e:	0adb      	lsrs	r3, r3, #11
 8003770:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003774:	fb01 f303 	mul.w	r3, r1, r3
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	4a4f      	ldr	r2, [pc, #316]	; (80038b8 <HAL_RTC_GetTime+0x1a4>)
 800377c:	fba2 2303 	umull	r2, r3, r2, r3
 8003780:	095b      	lsrs	r3, r3, #5
 8003782:	b2da      	uxtb	r2, r3
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	4a4a      	ldr	r2, [pc, #296]	; (80038b4 <HAL_RTC_GetTime+0x1a0>)
 800378c:	fba2 1203 	umull	r1, r2, r2, r3
 8003790:	0ad2      	lsrs	r2, r2, #11
 8003792:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003796:	fb01 f202 	mul.w	r2, r1, r2
 800379a:	1a9a      	subs	r2, r3, r2
 800379c:	4b46      	ldr	r3, [pc, #280]	; (80038b8 <HAL_RTC_GetTime+0x1a4>)
 800379e:	fba3 1302 	umull	r1, r3, r3, r2
 80037a2:	0959      	lsrs	r1, r3, #5
 80037a4:	460b      	mov	r3, r1
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	1a5b      	subs	r3, r3, r1
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	1ad1      	subs	r1, r2, r3
 80037ae:	b2ca      	uxtb	r2, r1
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	2b17      	cmp	r3, #23
 80037b8:	d955      	bls.n	8003866 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	4a3f      	ldr	r2, [pc, #252]	; (80038bc <HAL_RTC_GetTime+0x1a8>)
 80037be:	fba2 2303 	umull	r2, r3, r2, r3
 80037c2:	091b      	lsrs	r3, r3, #4
 80037c4:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80037c6:	6939      	ldr	r1, [r7, #16]
 80037c8:	4b3c      	ldr	r3, [pc, #240]	; (80038bc <HAL_RTC_GetTime+0x1a8>)
 80037ca:	fba3 2301 	umull	r2, r3, r3, r1
 80037ce:	091a      	lsrs	r2, r3, #4
 80037d0:	4613      	mov	r3, r2
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	4413      	add	r3, r2
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	1aca      	subs	r2, r1, r3
 80037da:	b2d2      	uxtb	r2, r2
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f000 f9fd 	bl	8003be0 <RTC_ReadAlarmCounter>
 80037e6:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ee:	d008      	beq.n	8003802 <HAL_RTC_GetTime+0xee>
 80037f0:	69fa      	ldr	r2, [r7, #28]
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d904      	bls.n	8003802 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80037f8:	69fa      	ldr	r2, [r7, #28]
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	61fb      	str	r3, [r7, #28]
 8003800:	e002      	b.n	8003808 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8003802:	f04f 33ff 	mov.w	r3, #4294967295
 8003806:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	4a2d      	ldr	r2, [pc, #180]	; (80038c0 <HAL_RTC_GetTime+0x1ac>)
 800380c:	fb02 f303 	mul.w	r3, r2, r3
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003816:	69b9      	ldr	r1, [r7, #24]
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f000 f9ba 	bl	8003b92 <RTC_WriteTimeCounter>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e041      	b.n	80038ac <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800382e:	d00c      	beq.n	800384a <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8003830:	69fa      	ldr	r2, [r7, #28]
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	4413      	add	r3, r2
 8003836:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003838:	69f9      	ldr	r1, [r7, #28]
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f000 f9e9 	bl	8003c12 <RTC_WriteAlarmCounter>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00a      	beq.n	800385c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e030      	b.n	80038ac <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800384a:	69f9      	ldr	r1, [r7, #28]
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f000 f9e0 	bl	8003c12 <RTC_WriteAlarmCounter>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d001      	beq.n	800385c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e027      	b.n	80038ac <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 800385c:	6979      	ldr	r1, [r7, #20]
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f000 fa88 	bl	8003d74 <RTC_DateUpdate>
 8003864:	e003      	b.n	800386e <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	b2da      	uxtb	r2, r3
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d01a      	beq.n	80038aa <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	4618      	mov	r0, r3
 800387a:	f000 fa41 	bl	8003d00 <RTC_ByteToBcd2>
 800387e:	4603      	mov	r3, r0
 8003880:	461a      	mov	r2, r3
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	785b      	ldrb	r3, [r3, #1]
 800388a:	4618      	mov	r0, r3
 800388c:	f000 fa38 	bl	8003d00 <RTC_ByteToBcd2>
 8003890:	4603      	mov	r3, r0
 8003892:	461a      	mov	r2, r3
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	789b      	ldrb	r3, [r3, #2]
 800389c:	4618      	mov	r0, r3
 800389e:	f000 fa2f 	bl	8003d00 <RTC_ByteToBcd2>
 80038a2:	4603      	mov	r3, r0
 80038a4:	461a      	mov	r2, r3
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3720      	adds	r7, #32
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	91a2b3c5 	.word	0x91a2b3c5
 80038b8:	88888889 	.word	0x88888889
 80038bc:	aaaaaaab 	.word	0xaaaaaaab
 80038c0:	00015180 	.word	0x00015180

080038c4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b088      	sub	sp, #32
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80038d0:	2300      	movs	r3, #0
 80038d2:	61fb      	str	r3, [r7, #28]
 80038d4:	2300      	movs	r3, #0
 80038d6:	61bb      	str	r3, [r7, #24]
 80038d8:	2300      	movs	r3, #0
 80038da:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d002      	beq.n	80038e8 <HAL_RTC_SetDate+0x24>
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e097      	b.n	8003a1c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	7c1b      	ldrb	r3, [r3, #16]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d101      	bne.n	80038f8 <HAL_RTC_SetDate+0x34>
 80038f4:	2302      	movs	r3, #2
 80038f6:	e091      	b.n	8003a1c <HAL_RTC_SetDate+0x158>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2201      	movs	r2, #1
 80038fc:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2202      	movs	r2, #2
 8003902:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10c      	bne.n	8003924 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	78da      	ldrb	r2, [r3, #3]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	785a      	ldrb	r2, [r3, #1]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	789a      	ldrb	r2, [r3, #2]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	739a      	strb	r2, [r3, #14]
 8003922:	e01a      	b.n	800395a <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	78db      	ldrb	r3, [r3, #3]
 8003928:	4618      	mov	r0, r3
 800392a:	f000 fa06 	bl	8003d3a <RTC_Bcd2ToByte>
 800392e:	4603      	mov	r3, r0
 8003930:	461a      	mov	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	785b      	ldrb	r3, [r3, #1]
 800393a:	4618      	mov	r0, r3
 800393c:	f000 f9fd 	bl	8003d3a <RTC_Bcd2ToByte>
 8003940:	4603      	mov	r3, r0
 8003942:	461a      	mov	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	789b      	ldrb	r3, [r3, #2]
 800394c:	4618      	mov	r0, r3
 800394e:	f000 f9f4 	bl	8003d3a <RTC_Bcd2ToByte>
 8003952:	4603      	mov	r3, r0
 8003954:	461a      	mov	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	7bdb      	ldrb	r3, [r3, #15]
 800395e:	4618      	mov	r0, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	7b59      	ldrb	r1, [r3, #13]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	7b9b      	ldrb	r3, [r3, #14]
 8003968:	461a      	mov	r2, r3
 800396a:	f000 fadf 	bl	8003f2c <RTC_WeekDayNum>
 800396e:	4603      	mov	r3, r0
 8003970:	461a      	mov	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	7b1a      	ldrb	r2, [r3, #12]
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f000 f8d7 	bl	8003b32 <RTC_ReadTimeCounter>
 8003984:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	4a26      	ldr	r2, [pc, #152]	; (8003a24 <HAL_RTC_SetDate+0x160>)
 800398a:	fba2 2303 	umull	r2, r3, r2, r3
 800398e:	0adb      	lsrs	r3, r3, #11
 8003990:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2b18      	cmp	r3, #24
 8003996:	d93a      	bls.n	8003a0e <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	4a23      	ldr	r2, [pc, #140]	; (8003a28 <HAL_RTC_SetDate+0x164>)
 800399c:	fba2 2303 	umull	r2, r3, r2, r3
 80039a0:	091b      	lsrs	r3, r3, #4
 80039a2:	4a22      	ldr	r2, [pc, #136]	; (8003a2c <HAL_RTC_SetDate+0x168>)
 80039a4:	fb02 f303 	mul.w	r3, r2, r3
 80039a8:	69fa      	ldr	r2, [r7, #28]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80039ae:	69f9      	ldr	r1, [r7, #28]
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f000 f8ee 	bl	8003b92 <RTC_WriteTimeCounter>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d007      	beq.n	80039cc <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2204      	movs	r2, #4
 80039c0:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e027      	b.n	8003a1c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f000 f907 	bl	8003be0 <RTC_ReadAlarmCounter>
 80039d2:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039da:	d018      	beq.n	8003a0e <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d214      	bcs.n	8003a0e <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80039ea:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80039ee:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80039f0:	69b9      	ldr	r1, [r7, #24]
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f000 f90d 	bl	8003c12 <RTC_WriteAlarmCounter>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d007      	beq.n	8003a0e <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2204      	movs	r2, #4
 8003a02:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e006      	b.n	8003a1c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2201      	movs	r2, #1
 8003a12:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3720      	adds	r7, #32
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	91a2b3c5 	.word	0x91a2b3c5
 8003a28:	aaaaaaab 	.word	0xaaaaaaab
 8003a2c:	00015180 	.word	0x00015180

08003a30 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8003a3c:	f107 0314 	add.w	r3, r7, #20
 8003a40:	2100      	movs	r1, #0
 8003a42:	460a      	mov	r2, r1
 8003a44:	801a      	strh	r2, [r3, #0]
 8003a46:	460a      	mov	r2, r1
 8003a48:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d002      	beq.n	8003a56 <HAL_RTC_GetDate+0x26>
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e03a      	b.n	8003ad0 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8003a5a:	f107 0314 	add.w	r3, r7, #20
 8003a5e:	2200      	movs	r2, #0
 8003a60:	4619      	mov	r1, r3
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f7ff fe56 	bl	8003714 <HAL_RTC_GetTime>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e02e      	b.n	8003ad0 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	7b1a      	ldrb	r2, [r3, #12]
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	7bda      	ldrb	r2, [r3, #15]
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	7b5a      	ldrb	r2, [r3, #13]
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	7b9a      	ldrb	r2, [r3, #14]
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d01a      	beq.n	8003ace <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	78db      	ldrb	r3, [r3, #3]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 f92f 	bl	8003d00 <RTC_ByteToBcd2>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	785b      	ldrb	r3, [r3, #1]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f000 f926 	bl	8003d00 <RTC_ByteToBcd2>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	789b      	ldrb	r3, [r3, #2]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f000 f91d 	bl	8003d00 <RTC_ByteToBcd2>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	461a      	mov	r2, r3
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3718      	adds	r7, #24
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e01d      	b.n	8003b2a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 0208 	bic.w	r2, r2, #8
 8003afc:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003afe:	f7fd ffad 	bl	8001a5c <HAL_GetTick>
 8003b02:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003b04:	e009      	b.n	8003b1a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003b06:	f7fd ffa9 	bl	8001a5c <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b14:	d901      	bls.n	8003b1a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e007      	b.n	8003b2a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f003 0308 	and.w	r3, r3, #8
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d0ee      	beq.n	8003b06 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b087      	sub	sp, #28
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	827b      	strh	r3, [r7, #18]
 8003b3e:	2300      	movs	r3, #0
 8003b40:	823b      	strh	r3, [r7, #16]
 8003b42:	2300      	movs	r3, #0
 8003b44:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8003b46:	2300      	movs	r3, #0
 8003b48:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	69db      	ldr	r3, [r3, #28]
 8003b58:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8003b62:	8a7a      	ldrh	r2, [r7, #18]
 8003b64:	8a3b      	ldrh	r3, [r7, #16]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d008      	beq.n	8003b7c <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8003b6a:	8a3b      	ldrh	r3, [r7, #16]
 8003b6c:	041a      	lsls	r2, r3, #16
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	4313      	orrs	r3, r2
 8003b78:	617b      	str	r3, [r7, #20]
 8003b7a:	e004      	b.n	8003b86 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8003b7c:	8a7b      	ldrh	r3, [r7, #18]
 8003b7e:	041a      	lsls	r2, r3, #16
 8003b80:	89fb      	ldrh	r3, [r7, #14]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8003b86:	697b      	ldr	r3, [r7, #20]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	371c      	adds	r7, #28
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bc80      	pop	{r7}
 8003b90:	4770      	bx	lr

08003b92 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b084      	sub	sp, #16
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
 8003b9a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 f85d 	bl	8003c60 <RTC_EnterInitMode>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d002      	beq.n	8003bb2 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	73fb      	strb	r3, [r7, #15]
 8003bb0:	e011      	b.n	8003bd6 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	0c12      	lsrs	r2, r2, #16
 8003bba:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	b292      	uxth	r2, r2
 8003bc4:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f872 	bl	8003cb0 <RTC_ExitInitMode>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8003be8:	2300      	movs	r3, #0
 8003bea:	81fb      	strh	r3, [r7, #14]
 8003bec:	2300      	movs	r3, #0
 8003bee:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfe:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8003c00:	89fb      	ldrh	r3, [r7, #14]
 8003c02:	041a      	lsls	r2, r3, #16
 8003c04:	89bb      	ldrh	r3, [r7, #12]
 8003c06:	4313      	orrs	r3, r2
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3714      	adds	r7, #20
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bc80      	pop	{r7}
 8003c10:	4770      	bx	lr

08003c12 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b084      	sub	sp, #16
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
 8003c1a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 f81d 	bl	8003c60 <RTC_EnterInitMode>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d002      	beq.n	8003c32 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	73fb      	strb	r3, [r7, #15]
 8003c30:	e011      	b.n	8003c56 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	0c12      	lsrs	r2, r2, #16
 8003c3a:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	b292      	uxth	r2, r2
 8003c44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 f832 	bl	8003cb0 <RTC_ExitInitMode>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003c6c:	f7fd fef6 	bl	8001a5c <HAL_GetTick>
 8003c70:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003c72:	e009      	b.n	8003c88 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003c74:	f7fd fef2 	bl	8001a5c <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c82:	d901      	bls.n	8003c88 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e00f      	b.n	8003ca8 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f003 0320 	and.w	r3, r3, #32
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d0ee      	beq.n	8003c74 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f042 0210 	orr.w	r2, r2, #16
 8003ca4:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0210 	bic.w	r2, r2, #16
 8003cca:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003ccc:	f7fd fec6 	bl	8001a5c <HAL_GetTick>
 8003cd0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003cd2:	e009      	b.n	8003ce8 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003cd4:	f7fd fec2 	bl	8001a5c <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ce2:	d901      	bls.n	8003ce8 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e007      	b.n	8003cf8 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f003 0320 	and.w	r3, r3, #32
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0ee      	beq.n	8003cd4 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	4603      	mov	r3, r0
 8003d08:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8003d0e:	e005      	b.n	8003d1c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	3301      	adds	r3, #1
 8003d14:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003d16:	79fb      	ldrb	r3, [r7, #7]
 8003d18:	3b0a      	subs	r3, #10
 8003d1a:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8003d1c:	79fb      	ldrb	r3, [r7, #7]
 8003d1e:	2b09      	cmp	r3, #9
 8003d20:	d8f6      	bhi.n	8003d10 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	011b      	lsls	r3, r3, #4
 8003d28:	b2da      	uxtb	r2, r3
 8003d2a:	79fb      	ldrb	r3, [r7, #7]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	b2db      	uxtb	r3, r3
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bc80      	pop	{r7}
 8003d38:	4770      	bx	lr

08003d3a <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b085      	sub	sp, #20
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	4603      	mov	r3, r0
 8003d42:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003d44:	2300      	movs	r3, #0
 8003d46:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8003d48:	79fb      	ldrb	r3, [r7, #7]
 8003d4a:	091b      	lsrs	r3, r3, #4
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	461a      	mov	r2, r3
 8003d50:	4613      	mov	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	4413      	add	r3, r2
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003d5a:	79fb      	ldrb	r3, [r7, #7]
 8003d5c:	f003 030f 	and.w	r3, r3, #15
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	4413      	add	r3, r2
 8003d68:	b2db      	uxtb	r3, r3
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3714      	adds	r7, #20
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bc80      	pop	{r7}
 8003d72:	4770      	bx	lr

08003d74 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	617b      	str	r3, [r7, #20]
 8003d82:	2300      	movs	r3, #0
 8003d84:	613b      	str	r3, [r7, #16]
 8003d86:	2300      	movs	r3, #0
 8003d88:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	7bdb      	ldrb	r3, [r3, #15]
 8003d92:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	7b5b      	ldrb	r3, [r3, #13]
 8003d98:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	7b9b      	ldrb	r3, [r3, #14]
 8003d9e:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8003da0:	2300      	movs	r3, #0
 8003da2:	60bb      	str	r3, [r7, #8]
 8003da4:	e06f      	b.n	8003e86 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d011      	beq.n	8003dd0 <RTC_DateUpdate+0x5c>
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	2b03      	cmp	r3, #3
 8003db0:	d00e      	beq.n	8003dd0 <RTC_DateUpdate+0x5c>
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	2b05      	cmp	r3, #5
 8003db6:	d00b      	beq.n	8003dd0 <RTC_DateUpdate+0x5c>
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	2b07      	cmp	r3, #7
 8003dbc:	d008      	beq.n	8003dd0 <RTC_DateUpdate+0x5c>
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	2b08      	cmp	r3, #8
 8003dc2:	d005      	beq.n	8003dd0 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	2b0a      	cmp	r3, #10
 8003dc8:	d002      	beq.n	8003dd0 <RTC_DateUpdate+0x5c>
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	2b0c      	cmp	r3, #12
 8003dce:	d117      	bne.n	8003e00 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2b1e      	cmp	r3, #30
 8003dd4:	d803      	bhi.n	8003dde <RTC_DateUpdate+0x6a>
      {
        day++;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003ddc:	e050      	b.n	8003e80 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	2b0c      	cmp	r3, #12
 8003de2:	d005      	beq.n	8003df0 <RTC_DateUpdate+0x7c>
        {
          month++;
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	3301      	adds	r3, #1
 8003de8:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003dea:	2301      	movs	r3, #1
 8003dec:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003dee:	e047      	b.n	8003e80 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8003df0:	2301      	movs	r3, #1
 8003df2:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003df4:	2301      	movs	r3, #1
 8003df6:	60fb      	str	r3, [r7, #12]
          year++;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8003dfe:	e03f      	b.n	8003e80 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	2b04      	cmp	r3, #4
 8003e04:	d008      	beq.n	8003e18 <RTC_DateUpdate+0xa4>
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	2b06      	cmp	r3, #6
 8003e0a:	d005      	beq.n	8003e18 <RTC_DateUpdate+0xa4>
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	2b09      	cmp	r3, #9
 8003e10:	d002      	beq.n	8003e18 <RTC_DateUpdate+0xa4>
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	2b0b      	cmp	r3, #11
 8003e16:	d10c      	bne.n	8003e32 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2b1d      	cmp	r3, #29
 8003e1c:	d803      	bhi.n	8003e26 <RTC_DateUpdate+0xb2>
      {
        day++;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	3301      	adds	r3, #1
 8003e22:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003e24:	e02c      	b.n	8003e80 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	3301      	adds	r3, #1
 8003e2a:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003e30:	e026      	b.n	8003e80 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d123      	bne.n	8003e80 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2b1b      	cmp	r3, #27
 8003e3c:	d803      	bhi.n	8003e46 <RTC_DateUpdate+0xd2>
      {
        day++;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	3301      	adds	r3, #1
 8003e42:	60fb      	str	r3, [r7, #12]
 8003e44:	e01c      	b.n	8003e80 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2b1c      	cmp	r3, #28
 8003e4a:	d111      	bne.n	8003e70 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 f839 	bl	8003ec8 <RTC_IsLeapYear>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d003      	beq.n	8003e64 <RTC_DateUpdate+0xf0>
        {
          day++;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	3301      	adds	r3, #1
 8003e60:	60fb      	str	r3, [r7, #12]
 8003e62:	e00d      	b.n	8003e80 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	3301      	adds	r3, #1
 8003e68:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	60fb      	str	r3, [r7, #12]
 8003e6e:	e007      	b.n	8003e80 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2b1d      	cmp	r3, #29
 8003e74:	d104      	bne.n	8003e80 <RTC_DateUpdate+0x10c>
      {
        month++;
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	3301      	adds	r3, #1
 8003e84:	60bb      	str	r3, [r7, #8]
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d38b      	bcc.n	8003da6 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	b2da      	uxtb	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	b2da      	uxtb	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	b2d2      	uxtb	r2, r2
 8003eae:	4619      	mov	r1, r3
 8003eb0:	6978      	ldr	r0, [r7, #20]
 8003eb2:	f000 f83b 	bl	8003f2c <RTC_WeekDayNum>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	461a      	mov	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	731a      	strb	r2, [r3, #12]
}
 8003ebe:	bf00      	nop
 8003ec0:	3718      	adds	r7, #24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
	...

08003ec8 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	4603      	mov	r3, r0
 8003ed0:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8003ed2:	88fb      	ldrh	r3, [r7, #6]
 8003ed4:	f003 0303 	and.w	r3, r3, #3
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d001      	beq.n	8003ee2 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	e01d      	b.n	8003f1e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8003ee2:	88fb      	ldrh	r3, [r7, #6]
 8003ee4:	4a10      	ldr	r2, [pc, #64]	; (8003f28 <RTC_IsLeapYear+0x60>)
 8003ee6:	fba2 1203 	umull	r1, r2, r2, r3
 8003eea:	0952      	lsrs	r2, r2, #5
 8003eec:	2164      	movs	r1, #100	; 0x64
 8003eee:	fb01 f202 	mul.w	r2, r1, r2
 8003ef2:	1a9b      	subs	r3, r3, r2
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e00f      	b.n	8003f1e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8003efe:	88fb      	ldrh	r3, [r7, #6]
 8003f00:	4a09      	ldr	r2, [pc, #36]	; (8003f28 <RTC_IsLeapYear+0x60>)
 8003f02:	fba2 1203 	umull	r1, r2, r2, r3
 8003f06:	09d2      	lsrs	r2, r2, #7
 8003f08:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003f0c:	fb01 f202 	mul.w	r2, r1, r2
 8003f10:	1a9b      	subs	r3, r3, r2
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d101      	bne.n	8003f1c <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e000      	b.n	8003f1e <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8003f1c:	2300      	movs	r3, #0
  }
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bc80      	pop	{r7}
 8003f26:	4770      	bx	lr
 8003f28:	51eb851f 	.word	0x51eb851f

08003f2c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	460b      	mov	r3, r1
 8003f36:	70fb      	strb	r3, [r7, #3]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	60bb      	str	r3, [r7, #8]
 8003f40:	2300      	movs	r3, #0
 8003f42:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003f4a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003f4c:	78fb      	ldrb	r3, [r7, #3]
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d82d      	bhi.n	8003fae <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003f52:	78fa      	ldrb	r2, [r7, #3]
 8003f54:	4613      	mov	r3, r2
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	4413      	add	r3, r2
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	1a9b      	subs	r3, r3, r2
 8003f5e:	4a2c      	ldr	r2, [pc, #176]	; (8004010 <RTC_WeekDayNum+0xe4>)
 8003f60:	fba2 2303 	umull	r2, r3, r2, r3
 8003f64:	085a      	lsrs	r2, r3, #1
 8003f66:	78bb      	ldrb	r3, [r7, #2]
 8003f68:	441a      	add	r2, r3
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	441a      	add	r2, r3
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	3b01      	subs	r3, #1
 8003f72:	089b      	lsrs	r3, r3, #2
 8003f74:	441a      	add	r2, r3
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	4926      	ldr	r1, [pc, #152]	; (8004014 <RTC_WeekDayNum+0xe8>)
 8003f7c:	fba1 1303 	umull	r1, r3, r1, r3
 8003f80:	095b      	lsrs	r3, r3, #5
 8003f82:	1ad2      	subs	r2, r2, r3
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	3b01      	subs	r3, #1
 8003f88:	4922      	ldr	r1, [pc, #136]	; (8004014 <RTC_WeekDayNum+0xe8>)
 8003f8a:	fba1 1303 	umull	r1, r3, r1, r3
 8003f8e:	09db      	lsrs	r3, r3, #7
 8003f90:	4413      	add	r3, r2
 8003f92:	1d1a      	adds	r2, r3, #4
 8003f94:	4b20      	ldr	r3, [pc, #128]	; (8004018 <RTC_WeekDayNum+0xec>)
 8003f96:	fba3 1302 	umull	r1, r3, r3, r2
 8003f9a:	1ad1      	subs	r1, r2, r3
 8003f9c:	0849      	lsrs	r1, r1, #1
 8003f9e:	440b      	add	r3, r1
 8003fa0:	0899      	lsrs	r1, r3, #2
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	1a5b      	subs	r3, r3, r1
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	60fb      	str	r3, [r7, #12]
 8003fac:	e029      	b.n	8004002 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8003fae:	78fa      	ldrb	r2, [r7, #3]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	4413      	add	r3, r2
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	1a9b      	subs	r3, r3, r2
 8003fba:	4a15      	ldr	r2, [pc, #84]	; (8004010 <RTC_WeekDayNum+0xe4>)
 8003fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc0:	085a      	lsrs	r2, r3, #1
 8003fc2:	78bb      	ldrb	r3, [r7, #2]
 8003fc4:	441a      	add	r2, r3
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	441a      	add	r2, r3
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	089b      	lsrs	r3, r3, #2
 8003fce:	441a      	add	r2, r3
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	4910      	ldr	r1, [pc, #64]	; (8004014 <RTC_WeekDayNum+0xe8>)
 8003fd4:	fba1 1303 	umull	r1, r3, r1, r3
 8003fd8:	095b      	lsrs	r3, r3, #5
 8003fda:	1ad2      	subs	r2, r2, r3
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	490d      	ldr	r1, [pc, #52]	; (8004014 <RTC_WeekDayNum+0xe8>)
 8003fe0:	fba1 1303 	umull	r1, r3, r1, r3
 8003fe4:	09db      	lsrs	r3, r3, #7
 8003fe6:	4413      	add	r3, r2
 8003fe8:	1c9a      	adds	r2, r3, #2
 8003fea:	4b0b      	ldr	r3, [pc, #44]	; (8004018 <RTC_WeekDayNum+0xec>)
 8003fec:	fba3 1302 	umull	r1, r3, r3, r2
 8003ff0:	1ad1      	subs	r1, r2, r3
 8003ff2:	0849      	lsrs	r1, r1, #1
 8003ff4:	440b      	add	r3, r1
 8003ff6:	0899      	lsrs	r1, r3, #2
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	1a5b      	subs	r3, r3, r1
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	b2db      	uxtb	r3, r3
}
 8004006:	4618      	mov	r0, r3
 8004008:	3714      	adds	r7, #20
 800400a:	46bd      	mov	sp, r7
 800400c:	bc80      	pop	{r7}
 800400e:	4770      	bx	lr
 8004010:	38e38e39 	.word	0x38e38e39
 8004014:	51eb851f 	.word	0x51eb851f
 8004018:	24924925 	.word	0x24924925

0800401c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e041      	b.n	80040b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d106      	bne.n	8004048 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7fd fb2a 	bl	800169c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2202      	movs	r2, #2
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	3304      	adds	r3, #4
 8004058:	4619      	mov	r1, r3
 800405a:	4610      	mov	r0, r2
 800405c:	f000 fc28 	bl	80048b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3708      	adds	r7, #8
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
	...

080040bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d001      	beq.n	80040d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e03a      	b.n	800414a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2202      	movs	r2, #2
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68da      	ldr	r2, [r3, #12]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f042 0201 	orr.w	r2, r2, #1
 80040ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a18      	ldr	r2, [pc, #96]	; (8004154 <HAL_TIM_Base_Start_IT+0x98>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d00e      	beq.n	8004114 <HAL_TIM_Base_Start_IT+0x58>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040fe:	d009      	beq.n	8004114 <HAL_TIM_Base_Start_IT+0x58>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a14      	ldr	r2, [pc, #80]	; (8004158 <HAL_TIM_Base_Start_IT+0x9c>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d004      	beq.n	8004114 <HAL_TIM_Base_Start_IT+0x58>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a13      	ldr	r2, [pc, #76]	; (800415c <HAL_TIM_Base_Start_IT+0xa0>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d111      	bne.n	8004138 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f003 0307 	and.w	r3, r3, #7
 800411e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2b06      	cmp	r3, #6
 8004124:	d010      	beq.n	8004148 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f042 0201 	orr.w	r2, r2, #1
 8004134:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004136:	e007      	b.n	8004148 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f042 0201 	orr.w	r2, r2, #1
 8004146:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3714      	adds	r7, #20
 800414e:	46bd      	mov	sp, r7
 8004150:	bc80      	pop	{r7}
 8004152:	4770      	bx	lr
 8004154:	40012c00 	.word	0x40012c00
 8004158:	40000400 	.word	0x40000400
 800415c:	40000800 	.word	0x40000800

08004160 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e041      	b.n	80041f6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d106      	bne.n	800418c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f839 	bl	80041fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2202      	movs	r2, #2
 8004190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	3304      	adds	r3, #4
 800419c:	4619      	mov	r1, r3
 800419e:	4610      	mov	r0, r2
 80041a0:	f000 fb86 	bl	80048b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	bc80      	pop	{r7}
 800420e:	4770      	bx	lr

08004210 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d109      	bne.n	8004234 <HAL_TIM_PWM_Start+0x24>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b01      	cmp	r3, #1
 800422a:	bf14      	ite	ne
 800422c:	2301      	movne	r3, #1
 800422e:	2300      	moveq	r3, #0
 8004230:	b2db      	uxtb	r3, r3
 8004232:	e022      	b.n	800427a <HAL_TIM_PWM_Start+0x6a>
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	2b04      	cmp	r3, #4
 8004238:	d109      	bne.n	800424e <HAL_TIM_PWM_Start+0x3e>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b01      	cmp	r3, #1
 8004244:	bf14      	ite	ne
 8004246:	2301      	movne	r3, #1
 8004248:	2300      	moveq	r3, #0
 800424a:	b2db      	uxtb	r3, r3
 800424c:	e015      	b.n	800427a <HAL_TIM_PWM_Start+0x6a>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b08      	cmp	r3, #8
 8004252:	d109      	bne.n	8004268 <HAL_TIM_PWM_Start+0x58>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b01      	cmp	r3, #1
 800425e:	bf14      	ite	ne
 8004260:	2301      	movne	r3, #1
 8004262:	2300      	moveq	r3, #0
 8004264:	b2db      	uxtb	r3, r3
 8004266:	e008      	b.n	800427a <HAL_TIM_PWM_Start+0x6a>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b01      	cmp	r3, #1
 8004272:	bf14      	ite	ne
 8004274:	2301      	movne	r3, #1
 8004276:	2300      	moveq	r3, #0
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e05e      	b.n	8004340 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d104      	bne.n	8004292 <HAL_TIM_PWM_Start+0x82>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2202      	movs	r2, #2
 800428c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004290:	e013      	b.n	80042ba <HAL_TIM_PWM_Start+0xaa>
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	2b04      	cmp	r3, #4
 8004296:	d104      	bne.n	80042a2 <HAL_TIM_PWM_Start+0x92>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2202      	movs	r2, #2
 800429c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042a0:	e00b      	b.n	80042ba <HAL_TIM_PWM_Start+0xaa>
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	2b08      	cmp	r3, #8
 80042a6:	d104      	bne.n	80042b2 <HAL_TIM_PWM_Start+0xa2>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2202      	movs	r2, #2
 80042ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042b0:	e003      	b.n	80042ba <HAL_TIM_PWM_Start+0xaa>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2202      	movs	r2, #2
 80042b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2201      	movs	r2, #1
 80042c0:	6839      	ldr	r1, [r7, #0]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 fd74 	bl	8004db0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a1e      	ldr	r2, [pc, #120]	; (8004348 <HAL_TIM_PWM_Start+0x138>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d107      	bne.n	80042e2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a18      	ldr	r2, [pc, #96]	; (8004348 <HAL_TIM_PWM_Start+0x138>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d00e      	beq.n	800430a <HAL_TIM_PWM_Start+0xfa>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042f4:	d009      	beq.n	800430a <HAL_TIM_PWM_Start+0xfa>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a14      	ldr	r2, [pc, #80]	; (800434c <HAL_TIM_PWM_Start+0x13c>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d004      	beq.n	800430a <HAL_TIM_PWM_Start+0xfa>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a12      	ldr	r2, [pc, #72]	; (8004350 <HAL_TIM_PWM_Start+0x140>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d111      	bne.n	800432e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f003 0307 	and.w	r3, r3, #7
 8004314:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2b06      	cmp	r3, #6
 800431a:	d010      	beq.n	800433e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f042 0201 	orr.w	r2, r2, #1
 800432a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800432c:	e007      	b.n	800433e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f042 0201 	orr.w	r2, r2, #1
 800433c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	40012c00 	.word	0x40012c00
 800434c:	40000400 	.word	0x40000400
 8004350:	40000800 	.word	0x40000800

08004354 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b02      	cmp	r3, #2
 8004368:	d122      	bne.n	80043b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b02      	cmp	r3, #2
 8004376:	d11b      	bne.n	80043b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f06f 0202 	mvn.w	r2, #2
 8004380:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	f003 0303 	and.w	r3, r3, #3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 fa6f 	bl	800487a <HAL_TIM_IC_CaptureCallback>
 800439c:	e005      	b.n	80043aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 fa62 	bl	8004868 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 fa71 	bl	800488c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	f003 0304 	and.w	r3, r3, #4
 80043ba:	2b04      	cmp	r3, #4
 80043bc:	d122      	bne.n	8004404 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	f003 0304 	and.w	r3, r3, #4
 80043c8:	2b04      	cmp	r3, #4
 80043ca:	d11b      	bne.n	8004404 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f06f 0204 	mvn.w	r2, #4
 80043d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2202      	movs	r2, #2
 80043da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d003      	beq.n	80043f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 fa45 	bl	800487a <HAL_TIM_IC_CaptureCallback>
 80043f0:	e005      	b.n	80043fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 fa38 	bl	8004868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 fa47 	bl	800488c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	f003 0308 	and.w	r3, r3, #8
 800440e:	2b08      	cmp	r3, #8
 8004410:	d122      	bne.n	8004458 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f003 0308 	and.w	r3, r3, #8
 800441c:	2b08      	cmp	r3, #8
 800441e:	d11b      	bne.n	8004458 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f06f 0208 	mvn.w	r2, #8
 8004428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2204      	movs	r2, #4
 800442e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	f003 0303 	and.w	r3, r3, #3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d003      	beq.n	8004446 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 fa1b 	bl	800487a <HAL_TIM_IC_CaptureCallback>
 8004444:	e005      	b.n	8004452 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 fa0e 	bl	8004868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 fa1d 	bl	800488c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	f003 0310 	and.w	r3, r3, #16
 8004462:	2b10      	cmp	r3, #16
 8004464:	d122      	bne.n	80044ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f003 0310 	and.w	r3, r3, #16
 8004470:	2b10      	cmp	r3, #16
 8004472:	d11b      	bne.n	80044ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f06f 0210 	mvn.w	r2, #16
 800447c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2208      	movs	r2, #8
 8004482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	69db      	ldr	r3, [r3, #28]
 800448a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f9f1 	bl	800487a <HAL_TIM_IC_CaptureCallback>
 8004498:	e005      	b.n	80044a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f9e4 	bl	8004868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 f9f3 	bl	800488c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d10e      	bne.n	80044d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d107      	bne.n	80044d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f06f 0201 	mvn.w	r2, #1
 80044d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7fc ff7e 	bl	80013d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e2:	2b80      	cmp	r3, #128	; 0x80
 80044e4:	d10e      	bne.n	8004504 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f0:	2b80      	cmp	r3, #128	; 0x80
 80044f2:	d107      	bne.n	8004504 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 fce1 	bl	8004ec6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450e:	2b40      	cmp	r3, #64	; 0x40
 8004510:	d10e      	bne.n	8004530 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800451c:	2b40      	cmp	r3, #64	; 0x40
 800451e:	d107      	bne.n	8004530 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f9b7 	bl	800489e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	f003 0320 	and.w	r3, r3, #32
 800453a:	2b20      	cmp	r3, #32
 800453c:	d10e      	bne.n	800455c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f003 0320 	and.w	r3, r3, #32
 8004548:	2b20      	cmp	r3, #32
 800454a:	d107      	bne.n	800455c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f06f 0220 	mvn.w	r2, #32
 8004554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 fcac 	bl	8004eb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800455c:	bf00      	nop
 800455e:	3708      	adds	r7, #8
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004576:	2b01      	cmp	r3, #1
 8004578:	d101      	bne.n	800457e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800457a:	2302      	movs	r3, #2
 800457c:	e0ac      	b.n	80046d8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b0c      	cmp	r3, #12
 800458a:	f200 809f 	bhi.w	80046cc <HAL_TIM_PWM_ConfigChannel+0x168>
 800458e:	a201      	add	r2, pc, #4	; (adr r2, 8004594 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004594:	080045c9 	.word	0x080045c9
 8004598:	080046cd 	.word	0x080046cd
 800459c:	080046cd 	.word	0x080046cd
 80045a0:	080046cd 	.word	0x080046cd
 80045a4:	08004609 	.word	0x08004609
 80045a8:	080046cd 	.word	0x080046cd
 80045ac:	080046cd 	.word	0x080046cd
 80045b0:	080046cd 	.word	0x080046cd
 80045b4:	0800464b 	.word	0x0800464b
 80045b8:	080046cd 	.word	0x080046cd
 80045bc:	080046cd 	.word	0x080046cd
 80045c0:	080046cd 	.word	0x080046cd
 80045c4:	0800468b 	.word	0x0800468b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68b9      	ldr	r1, [r7, #8]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f000 f9d0 	bl	8004974 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	699a      	ldr	r2, [r3, #24]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f042 0208 	orr.w	r2, r2, #8
 80045e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	699a      	ldr	r2, [r3, #24]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 0204 	bic.w	r2, r2, #4
 80045f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6999      	ldr	r1, [r3, #24]
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	691a      	ldr	r2, [r3, #16]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	619a      	str	r2, [r3, #24]
      break;
 8004606:	e062      	b.n	80046ce <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68b9      	ldr	r1, [r7, #8]
 800460e:	4618      	mov	r0, r3
 8004610:	f000 fa16 	bl	8004a40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	699a      	ldr	r2, [r3, #24]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004622:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	699a      	ldr	r2, [r3, #24]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004632:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	6999      	ldr	r1, [r3, #24]
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	021a      	lsls	r2, r3, #8
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	619a      	str	r2, [r3, #24]
      break;
 8004648:	e041      	b.n	80046ce <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68b9      	ldr	r1, [r7, #8]
 8004650:	4618      	mov	r0, r3
 8004652:	f000 fa5f 	bl	8004b14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	69da      	ldr	r2, [r3, #28]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f042 0208 	orr.w	r2, r2, #8
 8004664:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	69da      	ldr	r2, [r3, #28]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 0204 	bic.w	r2, r2, #4
 8004674:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	69d9      	ldr	r1, [r3, #28]
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	691a      	ldr	r2, [r3, #16]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	430a      	orrs	r2, r1
 8004686:	61da      	str	r2, [r3, #28]
      break;
 8004688:	e021      	b.n	80046ce <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68b9      	ldr	r1, [r7, #8]
 8004690:	4618      	mov	r0, r3
 8004692:	f000 faa9 	bl	8004be8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	69da      	ldr	r2, [r3, #28]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	69da      	ldr	r2, [r3, #28]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	69d9      	ldr	r1, [r3, #28]
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	021a      	lsls	r2, r3, #8
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	61da      	str	r2, [r3, #28]
      break;
 80046ca:	e000      	b.n	80046ce <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80046cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d101      	bne.n	80046f8 <HAL_TIM_ConfigClockSource+0x18>
 80046f4:	2302      	movs	r3, #2
 80046f6:	e0b3      	b.n	8004860 <HAL_TIM_ConfigClockSource+0x180>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004716:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800471e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004730:	d03e      	beq.n	80047b0 <HAL_TIM_ConfigClockSource+0xd0>
 8004732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004736:	f200 8087 	bhi.w	8004848 <HAL_TIM_ConfigClockSource+0x168>
 800473a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800473e:	f000 8085 	beq.w	800484c <HAL_TIM_ConfigClockSource+0x16c>
 8004742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004746:	d87f      	bhi.n	8004848 <HAL_TIM_ConfigClockSource+0x168>
 8004748:	2b70      	cmp	r3, #112	; 0x70
 800474a:	d01a      	beq.n	8004782 <HAL_TIM_ConfigClockSource+0xa2>
 800474c:	2b70      	cmp	r3, #112	; 0x70
 800474e:	d87b      	bhi.n	8004848 <HAL_TIM_ConfigClockSource+0x168>
 8004750:	2b60      	cmp	r3, #96	; 0x60
 8004752:	d050      	beq.n	80047f6 <HAL_TIM_ConfigClockSource+0x116>
 8004754:	2b60      	cmp	r3, #96	; 0x60
 8004756:	d877      	bhi.n	8004848 <HAL_TIM_ConfigClockSource+0x168>
 8004758:	2b50      	cmp	r3, #80	; 0x50
 800475a:	d03c      	beq.n	80047d6 <HAL_TIM_ConfigClockSource+0xf6>
 800475c:	2b50      	cmp	r3, #80	; 0x50
 800475e:	d873      	bhi.n	8004848 <HAL_TIM_ConfigClockSource+0x168>
 8004760:	2b40      	cmp	r3, #64	; 0x40
 8004762:	d058      	beq.n	8004816 <HAL_TIM_ConfigClockSource+0x136>
 8004764:	2b40      	cmp	r3, #64	; 0x40
 8004766:	d86f      	bhi.n	8004848 <HAL_TIM_ConfigClockSource+0x168>
 8004768:	2b30      	cmp	r3, #48	; 0x30
 800476a:	d064      	beq.n	8004836 <HAL_TIM_ConfigClockSource+0x156>
 800476c:	2b30      	cmp	r3, #48	; 0x30
 800476e:	d86b      	bhi.n	8004848 <HAL_TIM_ConfigClockSource+0x168>
 8004770:	2b20      	cmp	r3, #32
 8004772:	d060      	beq.n	8004836 <HAL_TIM_ConfigClockSource+0x156>
 8004774:	2b20      	cmp	r3, #32
 8004776:	d867      	bhi.n	8004848 <HAL_TIM_ConfigClockSource+0x168>
 8004778:	2b00      	cmp	r3, #0
 800477a:	d05c      	beq.n	8004836 <HAL_TIM_ConfigClockSource+0x156>
 800477c:	2b10      	cmp	r3, #16
 800477e:	d05a      	beq.n	8004836 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004780:	e062      	b.n	8004848 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6818      	ldr	r0, [r3, #0]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	6899      	ldr	r1, [r3, #8]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685a      	ldr	r2, [r3, #4]
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	f000 faee 	bl	8004d72 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047a4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	609a      	str	r2, [r3, #8]
      break;
 80047ae:	e04e      	b.n	800484e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6818      	ldr	r0, [r3, #0]
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	6899      	ldr	r1, [r3, #8]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	f000 fad7 	bl	8004d72 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689a      	ldr	r2, [r3, #8]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047d2:	609a      	str	r2, [r3, #8]
      break;
 80047d4:	e03b      	b.n	800484e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6818      	ldr	r0, [r3, #0]
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	6859      	ldr	r1, [r3, #4]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	461a      	mov	r2, r3
 80047e4:	f000 fa4e 	bl	8004c84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2150      	movs	r1, #80	; 0x50
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 faa5 	bl	8004d3e <TIM_ITRx_SetConfig>
      break;
 80047f4:	e02b      	b.n	800484e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6818      	ldr	r0, [r3, #0]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	6859      	ldr	r1, [r3, #4]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	461a      	mov	r2, r3
 8004804:	f000 fa6c 	bl	8004ce0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2160      	movs	r1, #96	; 0x60
 800480e:	4618      	mov	r0, r3
 8004810:	f000 fa95 	bl	8004d3e <TIM_ITRx_SetConfig>
      break;
 8004814:	e01b      	b.n	800484e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6818      	ldr	r0, [r3, #0]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	6859      	ldr	r1, [r3, #4]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	461a      	mov	r2, r3
 8004824:	f000 fa2e 	bl	8004c84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2140      	movs	r1, #64	; 0x40
 800482e:	4618      	mov	r0, r3
 8004830:	f000 fa85 	bl	8004d3e <TIM_ITRx_SetConfig>
      break;
 8004834:	e00b      	b.n	800484e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4619      	mov	r1, r3
 8004840:	4610      	mov	r0, r2
 8004842:	f000 fa7c 	bl	8004d3e <TIM_ITRx_SetConfig>
        break;
 8004846:	e002      	b.n	800484e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004848:	bf00      	nop
 800484a:	e000      	b.n	800484e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800484c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3710      	adds	r7, #16
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	bc80      	pop	{r7}
 8004878:	4770      	bx	lr

0800487a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800487a:	b480      	push	{r7}
 800487c:	b083      	sub	sp, #12
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004882:	bf00      	nop
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	bc80      	pop	{r7}
 800488a:	4770      	bx	lr

0800488c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004894:	bf00      	nop
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	bc80      	pop	{r7}
 800489c:	4770      	bx	lr

0800489e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800489e:	b480      	push	{r7}
 80048a0:	b083      	sub	sp, #12
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048a6:	bf00      	nop
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bc80      	pop	{r7}
 80048ae:	4770      	bx	lr

080048b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a29      	ldr	r2, [pc, #164]	; (8004968 <TIM_Base_SetConfig+0xb8>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d00b      	beq.n	80048e0 <TIM_Base_SetConfig+0x30>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ce:	d007      	beq.n	80048e0 <TIM_Base_SetConfig+0x30>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a26      	ldr	r2, [pc, #152]	; (800496c <TIM_Base_SetConfig+0xbc>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d003      	beq.n	80048e0 <TIM_Base_SetConfig+0x30>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a25      	ldr	r2, [pc, #148]	; (8004970 <TIM_Base_SetConfig+0xc0>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d108      	bne.n	80048f2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a1c      	ldr	r2, [pc, #112]	; (8004968 <TIM_Base_SetConfig+0xb8>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d00b      	beq.n	8004912 <TIM_Base_SetConfig+0x62>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004900:	d007      	beq.n	8004912 <TIM_Base_SetConfig+0x62>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a19      	ldr	r2, [pc, #100]	; (800496c <TIM_Base_SetConfig+0xbc>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d003      	beq.n	8004912 <TIM_Base_SetConfig+0x62>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a18      	ldr	r2, [pc, #96]	; (8004970 <TIM_Base_SetConfig+0xc0>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d108      	bne.n	8004924 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004918:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	4313      	orrs	r3, r2
 8004922:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	4313      	orrs	r3, r2
 8004930:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	689a      	ldr	r2, [r3, #8]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a07      	ldr	r2, [pc, #28]	; (8004968 <TIM_Base_SetConfig+0xb8>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d103      	bne.n	8004958 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	691a      	ldr	r2, [r3, #16]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	615a      	str	r2, [r3, #20]
}
 800495e:	bf00      	nop
 8004960:	3714      	adds	r7, #20
 8004962:	46bd      	mov	sp, r7
 8004964:	bc80      	pop	{r7}
 8004966:	4770      	bx	lr
 8004968:	40012c00 	.word	0x40012c00
 800496c:	40000400 	.word	0x40000400
 8004970:	40000800 	.word	0x40000800

08004974 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	f023 0201 	bic.w	r2, r3, #1
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f023 0303 	bic.w	r3, r3, #3
 80049aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f023 0302 	bic.w	r3, r3, #2
 80049bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a1c      	ldr	r2, [pc, #112]	; (8004a3c <TIM_OC1_SetConfig+0xc8>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d10c      	bne.n	80049ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	f023 0308 	bic.w	r3, r3, #8
 80049d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	4313      	orrs	r3, r2
 80049e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f023 0304 	bic.w	r3, r3, #4
 80049e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a13      	ldr	r2, [pc, #76]	; (8004a3c <TIM_OC1_SetConfig+0xc8>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d111      	bne.n	8004a16 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	621a      	str	r2, [r3, #32]
}
 8004a30:	bf00      	nop
 8004a32:	371c      	adds	r7, #28
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bc80      	pop	{r7}
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	40012c00 	.word	0x40012c00

08004a40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b087      	sub	sp, #28
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	f023 0210 	bic.w	r2, r3, #16
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	021b      	lsls	r3, r3, #8
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f023 0320 	bic.w	r3, r3, #32
 8004a8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	011b      	lsls	r3, r3, #4
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a1d      	ldr	r2, [pc, #116]	; (8004b10 <TIM_OC2_SetConfig+0xd0>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d10d      	bne.n	8004abc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004aa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	011b      	lsls	r3, r3, #4
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a14      	ldr	r2, [pc, #80]	; (8004b10 <TIM_OC2_SetConfig+0xd0>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d113      	bne.n	8004aec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004aca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ad2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	695b      	ldr	r3, [r3, #20]
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	621a      	str	r2, [r3, #32]
}
 8004b06:	bf00      	nop
 8004b08:	371c      	adds	r7, #28
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bc80      	pop	{r7}
 8004b0e:	4770      	bx	lr
 8004b10:	40012c00 	.word	0x40012c00

08004b14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b087      	sub	sp, #28
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f023 0303 	bic.w	r3, r3, #3
 8004b4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	021b      	lsls	r3, r3, #8
 8004b64:	697a      	ldr	r2, [r7, #20]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a1d      	ldr	r2, [pc, #116]	; (8004be4 <TIM_OC3_SetConfig+0xd0>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d10d      	bne.n	8004b8e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	021b      	lsls	r3, r3, #8
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a14      	ldr	r2, [pc, #80]	; (8004be4 <TIM_OC3_SetConfig+0xd0>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d113      	bne.n	8004bbe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	011b      	lsls	r3, r3, #4
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	011b      	lsls	r3, r3, #4
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	685a      	ldr	r2, [r3, #4]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	621a      	str	r2, [r3, #32]
}
 8004bd8:	bf00      	nop
 8004bda:	371c      	adds	r7, #28
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bc80      	pop	{r7}
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	40012c00 	.word	0x40012c00

08004be8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b087      	sub	sp, #28
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	69db      	ldr	r3, [r3, #28]
 8004c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	021b      	lsls	r3, r3, #8
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	031b      	lsls	r3, r3, #12
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a0f      	ldr	r2, [pc, #60]	; (8004c80 <TIM_OC4_SetConfig+0x98>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d109      	bne.n	8004c5c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	695b      	ldr	r3, [r3, #20]
 8004c54:	019b      	lsls	r3, r3, #6
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	621a      	str	r2, [r3, #32]
}
 8004c76:	bf00      	nop
 8004c78:	371c      	adds	r7, #28
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bc80      	pop	{r7}
 8004c7e:	4770      	bx	lr
 8004c80:	40012c00 	.word	0x40012c00

08004c84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b087      	sub	sp, #28
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6a1b      	ldr	r3, [r3, #32]
 8004c94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	f023 0201 	bic.w	r2, r3, #1
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	011b      	lsls	r3, r3, #4
 8004cb4:	693a      	ldr	r2, [r7, #16]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f023 030a 	bic.w	r3, r3, #10
 8004cc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	621a      	str	r2, [r3, #32]
}
 8004cd6:	bf00      	nop
 8004cd8:	371c      	adds	r7, #28
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bc80      	pop	{r7}
 8004cde:	4770      	bx	lr

08004ce0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b087      	sub	sp, #28
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	f023 0210 	bic.w	r2, r3, #16
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d0a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	031b      	lsls	r3, r3, #12
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d1c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	011b      	lsls	r3, r3, #4
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	621a      	str	r2, [r3, #32]
}
 8004d34:	bf00      	nop
 8004d36:	371c      	adds	r7, #28
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bc80      	pop	{r7}
 8004d3c:	4770      	bx	lr

08004d3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b085      	sub	sp, #20
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
 8004d46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d56:	683a      	ldr	r2, [r7, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	f043 0307 	orr.w	r3, r3, #7
 8004d60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	609a      	str	r2, [r3, #8]
}
 8004d68:	bf00      	nop
 8004d6a:	3714      	adds	r7, #20
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bc80      	pop	{r7}
 8004d70:	4770      	bx	lr

08004d72 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d72:	b480      	push	{r7}
 8004d74:	b087      	sub	sp, #28
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	60f8      	str	r0, [r7, #12]
 8004d7a:	60b9      	str	r1, [r7, #8]
 8004d7c:	607a      	str	r2, [r7, #4]
 8004d7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d8c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	021a      	lsls	r2, r3, #8
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	431a      	orrs	r2, r3
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	609a      	str	r2, [r3, #8]
}
 8004da6:	bf00      	nop
 8004da8:	371c      	adds	r7, #28
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bc80      	pop	{r7}
 8004dae:	4770      	bx	lr

08004db0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b087      	sub	sp, #28
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	f003 031f 	and.w	r3, r3, #31
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6a1a      	ldr	r2, [r3, #32]
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	43db      	mvns	r3, r3
 8004dd2:	401a      	ands	r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6a1a      	ldr	r2, [r3, #32]
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	f003 031f 	and.w	r3, r3, #31
 8004de2:	6879      	ldr	r1, [r7, #4]
 8004de4:	fa01 f303 	lsl.w	r3, r1, r3
 8004de8:	431a      	orrs	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	621a      	str	r2, [r3, #32]
}
 8004dee:	bf00      	nop
 8004df0:	371c      	adds	r7, #28
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bc80      	pop	{r7}
 8004df6:	4770      	bx	lr

08004df8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d101      	bne.n	8004e10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	e046      	b.n	8004e9e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a16      	ldr	r2, [pc, #88]	; (8004ea8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d00e      	beq.n	8004e72 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e5c:	d009      	beq.n	8004e72 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a12      	ldr	r2, [pc, #72]	; (8004eac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d004      	beq.n	8004e72 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a10      	ldr	r2, [pc, #64]	; (8004eb0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d10c      	bne.n	8004e8c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3714      	adds	r7, #20
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bc80      	pop	{r7}
 8004ea6:	4770      	bx	lr
 8004ea8:	40012c00 	.word	0x40012c00
 8004eac:	40000400 	.word	0x40000400
 8004eb0:	40000800 	.word	0x40000800

08004eb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ebc:	bf00      	nop
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bc80      	pop	{r7}
 8004ec4:	4770      	bx	lr

08004ec6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b083      	sub	sp, #12
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ece:	bf00      	nop
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bc80      	pop	{r7}
 8004ed6:	4770      	bx	lr

08004ed8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e03f      	b.n	8004f6a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d106      	bne.n	8004f04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f7fc fc4a 	bl	8001798 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2224      	movs	r2, #36	; 0x24
 8004f08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68da      	ldr	r2, [r3, #12]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 faeb 	bl	80054f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	691a      	ldr	r2, [r3, #16]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	695a      	ldr	r2, [r3, #20]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68da      	ldr	r2, [r3, #12]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2220      	movs	r2, #32
 8004f64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b085      	sub	sp, #20
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	60f8      	str	r0, [r7, #12]
 8004f7a:	60b9      	str	r1, [r7, #8]
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2b20      	cmp	r3, #32
 8004f8a:	d130      	bne.n	8004fee <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d002      	beq.n	8004f98 <HAL_UART_Transmit_IT+0x26>
 8004f92:	88fb      	ldrh	r3, [r7, #6]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d101      	bne.n	8004f9c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e029      	b.n	8004ff0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d101      	bne.n	8004faa <HAL_UART_Transmit_IT+0x38>
 8004fa6:	2302      	movs	r3, #2
 8004fa8:	e022      	b.n	8004ff0 <HAL_UART_Transmit_IT+0x7e>
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2201      	movs	r2, #1
 8004fae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	88fa      	ldrh	r2, [r7, #6]
 8004fbc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	88fa      	ldrh	r2, [r7, #6]
 8004fc2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2221      	movs	r2, #33	; 0x21
 8004fce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68da      	ldr	r2, [r3, #12]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004fe8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004fea:	2300      	movs	r3, #0
 8004fec:	e000      	b.n	8004ff0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004fee:	2302      	movs	r3, #2
  }
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3714      	adds	r7, #20
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bc80      	pop	{r7}
 8004ff8:	4770      	bx	lr

08004ffa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b085      	sub	sp, #20
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	60f8      	str	r0, [r7, #12]
 8005002:	60b9      	str	r1, [r7, #8]
 8005004:	4613      	mov	r3, r2
 8005006:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b20      	cmp	r3, #32
 8005012:	d140      	bne.n	8005096 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d002      	beq.n	8005020 <HAL_UART_Receive_IT+0x26>
 800501a:	88fb      	ldrh	r3, [r7, #6]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d101      	bne.n	8005024 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e039      	b.n	8005098 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800502a:	2b01      	cmp	r3, #1
 800502c:	d101      	bne.n	8005032 <HAL_UART_Receive_IT+0x38>
 800502e:	2302      	movs	r3, #2
 8005030:	e032      	b.n	8005098 <HAL_UART_Receive_IT+0x9e>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	88fa      	ldrh	r2, [r7, #6]
 8005044:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	88fa      	ldrh	r2, [r7, #6]
 800504a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2222      	movs	r2, #34	; 0x22
 8005056:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68da      	ldr	r2, [r3, #12]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005070:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	695a      	ldr	r2, [r3, #20]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f042 0201 	orr.w	r2, r2, #1
 8005080:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68da      	ldr	r2, [r3, #12]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f042 0220 	orr.w	r2, r2, #32
 8005090:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005092:	2300      	movs	r3, #0
 8005094:	e000      	b.n	8005098 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005096:	2302      	movs	r3, #2
  }
}
 8005098:	4618      	mov	r0, r3
 800509a:	3714      	adds	r7, #20
 800509c:	46bd      	mov	sp, r7
 800509e:	bc80      	pop	{r7}
 80050a0:	4770      	bx	lr
	...

080050a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b088      	sub	sp, #32
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80050c4:	2300      	movs	r3, #0
 80050c6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80050c8:	2300      	movs	r3, #0
 80050ca:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	f003 030f 	and.w	r3, r3, #15
 80050d2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10d      	bne.n	80050f6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	f003 0320 	and.w	r3, r3, #32
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d008      	beq.n	80050f6 <HAL_UART_IRQHandler+0x52>
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	f003 0320 	and.w	r3, r3, #32
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d003      	beq.n	80050f6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f982 	bl	80053f8 <UART_Receive_IT>
      return;
 80050f4:	e0d0      	b.n	8005298 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f000 80b0 	beq.w	800525e <HAL_UART_IRQHandler+0x1ba>
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	2b00      	cmp	r3, #0
 8005106:	d105      	bne.n	8005114 <HAL_UART_IRQHandler+0x70>
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800510e:	2b00      	cmp	r3, #0
 8005110:	f000 80a5 	beq.w	800525e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00a      	beq.n	8005134 <HAL_UART_IRQHandler+0x90>
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005124:	2b00      	cmp	r3, #0
 8005126:	d005      	beq.n	8005134 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800512c:	f043 0201 	orr.w	r2, r3, #1
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	f003 0304 	and.w	r3, r3, #4
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00a      	beq.n	8005154 <HAL_UART_IRQHandler+0xb0>
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f003 0301 	and.w	r3, r3, #1
 8005144:	2b00      	cmp	r3, #0
 8005146:	d005      	beq.n	8005154 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800514c:	f043 0202 	orr.w	r2, r3, #2
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00a      	beq.n	8005174 <HAL_UART_IRQHandler+0xd0>
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	f003 0301 	and.w	r3, r3, #1
 8005164:	2b00      	cmp	r3, #0
 8005166:	d005      	beq.n	8005174 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800516c:	f043 0204 	orr.w	r2, r3, #4
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	f003 0308 	and.w	r3, r3, #8
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00f      	beq.n	800519e <HAL_UART_IRQHandler+0xfa>
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	f003 0320 	and.w	r3, r3, #32
 8005184:	2b00      	cmp	r3, #0
 8005186:	d104      	bne.n	8005192 <HAL_UART_IRQHandler+0xee>
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	2b00      	cmp	r3, #0
 8005190:	d005      	beq.n	800519e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005196:	f043 0208 	orr.w	r2, r3, #8
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d077      	beq.n	8005296 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	f003 0320 	and.w	r3, r3, #32
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d007      	beq.n	80051c0 <HAL_UART_IRQHandler+0x11c>
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	f003 0320 	and.w	r3, r3, #32
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d002      	beq.n	80051c0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 f91c 	bl	80053f8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	bf14      	ite	ne
 80051ce:	2301      	movne	r3, #1
 80051d0:	2300      	moveq	r3, #0
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051da:	f003 0308 	and.w	r3, r3, #8
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d102      	bne.n	80051e8 <HAL_UART_IRQHandler+0x144>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d031      	beq.n	800524c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 f86d 	bl	80052c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	695b      	ldr	r3, [r3, #20]
 80051f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d023      	beq.n	8005244 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	695a      	ldr	r2, [r3, #20]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800520a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005210:	2b00      	cmp	r3, #0
 8005212:	d013      	beq.n	800523c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005218:	4a21      	ldr	r2, [pc, #132]	; (80052a0 <HAL_UART_IRQHandler+0x1fc>)
 800521a:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005220:	4618      	mov	r0, r3
 8005222:	f7fd f967 	bl	80024f4 <HAL_DMA_Abort_IT>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d016      	beq.n	800525a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005236:	4610      	mov	r0, r2
 8005238:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800523a:	e00e      	b.n	800525a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 f83a 	bl	80052b6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005242:	e00a      	b.n	800525a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 f836 	bl	80052b6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800524a:	e006      	b.n	800525a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 f832 	bl	80052b6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005258:	e01d      	b.n	8005296 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800525a:	bf00      	nop
    return;
 800525c:	e01b      	b.n	8005296 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005264:	2b00      	cmp	r3, #0
 8005266:	d008      	beq.n	800527a <HAL_UART_IRQHandler+0x1d6>
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 f859 	bl	800532a <UART_Transmit_IT>
    return;
 8005278:	e00e      	b.n	8005298 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005280:	2b00      	cmp	r3, #0
 8005282:	d009      	beq.n	8005298 <HAL_UART_IRQHandler+0x1f4>
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800528a:	2b00      	cmp	r3, #0
 800528c:	d004      	beq.n	8005298 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 f89a 	bl	80053c8 <UART_EndTransmit_IT>
    return;
 8005294:	e000      	b.n	8005298 <HAL_UART_IRQHandler+0x1f4>
    return;
 8005296:	bf00      	nop
  }
}
 8005298:	3720      	adds	r7, #32
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	08005303 	.word	0x08005303

080052a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bc80      	pop	{r7}
 80052b4:	4770      	bx	lr

080052b6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052b6:	b480      	push	{r7}
 80052b8:	b083      	sub	sp, #12
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80052be:	bf00      	nop
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bc80      	pop	{r7}
 80052c6:	4770      	bx	lr

080052c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68da      	ldr	r2, [r3, #12]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80052de:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	695a      	ldr	r2, [r3, #20]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f022 0201 	bic.w	r2, r2, #1
 80052ee:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2220      	movs	r2, #32
 80052f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bc80      	pop	{r7}
 8005300:	4770      	bx	lr

08005302 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b084      	sub	sp, #16
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f7ff ffca 	bl	80052b6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005322:	bf00      	nop
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800532a:	b480      	push	{r7}
 800532c:	b085      	sub	sp, #20
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005338:	b2db      	uxtb	r3, r3
 800533a:	2b21      	cmp	r3, #33	; 0x21
 800533c:	d13e      	bne.n	80053bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005346:	d114      	bne.n	8005372 <UART_Transmit_IT+0x48>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d110      	bne.n	8005372 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a1b      	ldr	r3, [r3, #32]
 8005354:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	881b      	ldrh	r3, [r3, #0]
 800535a:	461a      	mov	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005364:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a1b      	ldr	r3, [r3, #32]
 800536a:	1c9a      	adds	r2, r3, #2
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	621a      	str	r2, [r3, #32]
 8005370:	e008      	b.n	8005384 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	1c59      	adds	r1, r3, #1
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	6211      	str	r1, [r2, #32]
 800537c:	781a      	ldrb	r2, [r3, #0]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005388:	b29b      	uxth	r3, r3
 800538a:	3b01      	subs	r3, #1
 800538c:	b29b      	uxth	r3, r3
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	4619      	mov	r1, r3
 8005392:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005394:	2b00      	cmp	r3, #0
 8005396:	d10f      	bne.n	80053b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68da      	ldr	r2, [r3, #12]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68da      	ldr	r2, [r3, #12]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80053b8:	2300      	movs	r3, #0
 80053ba:	e000      	b.n	80053be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80053bc:	2302      	movs	r3, #2
  }
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3714      	adds	r7, #20
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bc80      	pop	{r7}
 80053c6:	4770      	bx	lr

080053c8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68da      	ldr	r2, [r3, #12]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053de:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2220      	movs	r2, #32
 80053e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f7ff ff5b 	bl	80052a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3708      	adds	r7, #8
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005406:	b2db      	uxtb	r3, r3
 8005408:	2b22      	cmp	r3, #34	; 0x22
 800540a:	d170      	bne.n	80054ee <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005414:	d117      	bne.n	8005446 <UART_Receive_IT+0x4e>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d113      	bne.n	8005446 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800541e:	2300      	movs	r3, #0
 8005420:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005426:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	b29b      	uxth	r3, r3
 8005430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005434:	b29a      	uxth	r2, r3
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543e:	1c9a      	adds	r2, r3, #2
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	629a      	str	r2, [r3, #40]	; 0x28
 8005444:	e026      	b.n	8005494 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800544a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800544c:	2300      	movs	r3, #0
 800544e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005458:	d007      	beq.n	800546a <UART_Receive_IT+0x72>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10a      	bne.n	8005478 <UART_Receive_IT+0x80>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d106      	bne.n	8005478 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	b2da      	uxtb	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	701a      	strb	r2, [r3, #0]
 8005476:	e008      	b.n	800548a <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	b2db      	uxtb	r3, r3
 8005480:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005484:	b2da      	uxtb	r2, r3
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800548e:	1c5a      	adds	r2, r3, #1
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005498:	b29b      	uxth	r3, r3
 800549a:	3b01      	subs	r3, #1
 800549c:	b29b      	uxth	r3, r3
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	4619      	mov	r1, r3
 80054a2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d120      	bne.n	80054ea <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68da      	ldr	r2, [r3, #12]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f022 0220 	bic.w	r2, r2, #32
 80054b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68da      	ldr	r2, [r3, #12]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	695a      	ldr	r2, [r3, #20]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f022 0201 	bic.w	r2, r2, #1
 80054d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2220      	movs	r2, #32
 80054dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f7fb ff59 	bl	8001398 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80054e6:	2300      	movs	r3, #0
 80054e8:	e002      	b.n	80054f0 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80054ea:	2300      	movs	r3, #0
 80054ec:	e000      	b.n	80054f0 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80054ee:	2302      	movs	r3, #2
  }
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	68da      	ldr	r2, [r3, #12]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	430a      	orrs	r2, r1
 8005514:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	689a      	ldr	r2, [r3, #8]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	431a      	orrs	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	695b      	ldr	r3, [r3, #20]
 8005524:	4313      	orrs	r3, r2
 8005526:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005532:	f023 030c 	bic.w	r3, r3, #12
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	6812      	ldr	r2, [r2, #0]
 800553a:	68b9      	ldr	r1, [r7, #8]
 800553c:	430b      	orrs	r3, r1
 800553e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	699a      	ldr	r2, [r3, #24]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	430a      	orrs	r2, r1
 8005554:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a2c      	ldr	r2, [pc, #176]	; (800560c <UART_SetConfig+0x114>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d103      	bne.n	8005568 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005560:	f7fd fdfe 	bl	8003160 <HAL_RCC_GetPCLK2Freq>
 8005564:	60f8      	str	r0, [r7, #12]
 8005566:	e002      	b.n	800556e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005568:	f7fd fde6 	bl	8003138 <HAL_RCC_GetPCLK1Freq>
 800556c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	4613      	mov	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4413      	add	r3, r2
 8005576:	009a      	lsls	r2, r3, #2
 8005578:	441a      	add	r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	fbb2 f3f3 	udiv	r3, r2, r3
 8005584:	4a22      	ldr	r2, [pc, #136]	; (8005610 <UART_SetConfig+0x118>)
 8005586:	fba2 2303 	umull	r2, r3, r2, r3
 800558a:	095b      	lsrs	r3, r3, #5
 800558c:	0119      	lsls	r1, r3, #4
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	4613      	mov	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4413      	add	r3, r2
 8005596:	009a      	lsls	r2, r3, #2
 8005598:	441a      	add	r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80055a4:	4b1a      	ldr	r3, [pc, #104]	; (8005610 <UART_SetConfig+0x118>)
 80055a6:	fba3 0302 	umull	r0, r3, r3, r2
 80055aa:	095b      	lsrs	r3, r3, #5
 80055ac:	2064      	movs	r0, #100	; 0x64
 80055ae:	fb00 f303 	mul.w	r3, r0, r3
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	011b      	lsls	r3, r3, #4
 80055b6:	3332      	adds	r3, #50	; 0x32
 80055b8:	4a15      	ldr	r2, [pc, #84]	; (8005610 <UART_SetConfig+0x118>)
 80055ba:	fba2 2303 	umull	r2, r3, r2, r3
 80055be:	095b      	lsrs	r3, r3, #5
 80055c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055c4:	4419      	add	r1, r3
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	4613      	mov	r3, r2
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	4413      	add	r3, r2
 80055ce:	009a      	lsls	r2, r3, #2
 80055d0:	441a      	add	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80055dc:	4b0c      	ldr	r3, [pc, #48]	; (8005610 <UART_SetConfig+0x118>)
 80055de:	fba3 0302 	umull	r0, r3, r3, r2
 80055e2:	095b      	lsrs	r3, r3, #5
 80055e4:	2064      	movs	r0, #100	; 0x64
 80055e6:	fb00 f303 	mul.w	r3, r0, r3
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	011b      	lsls	r3, r3, #4
 80055ee:	3332      	adds	r3, #50	; 0x32
 80055f0:	4a07      	ldr	r2, [pc, #28]	; (8005610 <UART_SetConfig+0x118>)
 80055f2:	fba2 2303 	umull	r2, r3, r2, r3
 80055f6:	095b      	lsrs	r3, r3, #5
 80055f8:	f003 020f 	and.w	r2, r3, #15
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	440a      	add	r2, r1
 8005602:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005604:	bf00      	nop
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	40013800 	.word	0x40013800
 8005610:	51eb851f 	.word	0x51eb851f

08005614 <__libc_init_array>:
 8005614:	b570      	push	{r4, r5, r6, lr}
 8005616:	2600      	movs	r6, #0
 8005618:	4d0c      	ldr	r5, [pc, #48]	; (800564c <__libc_init_array+0x38>)
 800561a:	4c0d      	ldr	r4, [pc, #52]	; (8005650 <__libc_init_array+0x3c>)
 800561c:	1b64      	subs	r4, r4, r5
 800561e:	10a4      	asrs	r4, r4, #2
 8005620:	42a6      	cmp	r6, r4
 8005622:	d109      	bne.n	8005638 <__libc_init_array+0x24>
 8005624:	f000 f822 	bl	800566c <_init>
 8005628:	2600      	movs	r6, #0
 800562a:	4d0a      	ldr	r5, [pc, #40]	; (8005654 <__libc_init_array+0x40>)
 800562c:	4c0a      	ldr	r4, [pc, #40]	; (8005658 <__libc_init_array+0x44>)
 800562e:	1b64      	subs	r4, r4, r5
 8005630:	10a4      	asrs	r4, r4, #2
 8005632:	42a6      	cmp	r6, r4
 8005634:	d105      	bne.n	8005642 <__libc_init_array+0x2e>
 8005636:	bd70      	pop	{r4, r5, r6, pc}
 8005638:	f855 3b04 	ldr.w	r3, [r5], #4
 800563c:	4798      	blx	r3
 800563e:	3601      	adds	r6, #1
 8005640:	e7ee      	b.n	8005620 <__libc_init_array+0xc>
 8005642:	f855 3b04 	ldr.w	r3, [r5], #4
 8005646:	4798      	blx	r3
 8005648:	3601      	adds	r6, #1
 800564a:	e7f2      	b.n	8005632 <__libc_init_array+0x1e>
 800564c:	080056ec 	.word	0x080056ec
 8005650:	080056ec 	.word	0x080056ec
 8005654:	080056ec 	.word	0x080056ec
 8005658:	080056f0 	.word	0x080056f0

0800565c <memset>:
 800565c:	4603      	mov	r3, r0
 800565e:	4402      	add	r2, r0
 8005660:	4293      	cmp	r3, r2
 8005662:	d100      	bne.n	8005666 <memset+0xa>
 8005664:	4770      	bx	lr
 8005666:	f803 1b01 	strb.w	r1, [r3], #1
 800566a:	e7f9      	b.n	8005660 <memset+0x4>

0800566c <_init>:
 800566c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800566e:	bf00      	nop
 8005670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005672:	bc08      	pop	{r3}
 8005674:	469e      	mov	lr, r3
 8005676:	4770      	bx	lr

08005678 <_fini>:
 8005678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800567a:	bf00      	nop
 800567c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800567e:	bc08      	pop	{r3}
 8005680:	469e      	mov	lr, r3
 8005682:	4770      	bx	lr
