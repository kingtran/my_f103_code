
DQS_NBIoT_SmartLight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c34  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08005d40  08005d40  00015d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005da8  08005da8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005da8  08005da8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005da8  08005da8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005da8  08005da8  00015da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005dac  08005dac  00015dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005db0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d8  20000010  08005dbc  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005e8  08005dbc  000205e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012254  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003114  00000000  00000000  00032289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001308  00000000  00000000  000353a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001160  00000000  00000000  000366a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000199c3  00000000  00000000  00037808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000154e6  00000000  00000000  000511cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090669  00000000  00000000  000666b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f6d1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004be8  00000000  00000000  000f6d70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08005d28 	.word	0x08005d28

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08005d28 	.word	0x08005d28

0800014c <DBUG_u8Init>:
 * @pre
 * @post
 * @return
 */
uint8_t DBUG_u8Init()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	PHY_u8Uart3Init();
 8000150:	f000 fd26 	bl	8000ba0 <PHY_u8Uart3Init>
	return HAL_OK;
 8000154:	2300      	movs	r3, #0
}
 8000156:	4618      	mov	r0, r3
 8000158:	bd80      	pop	{r7, pc}

0800015a <DBUG_u8RxEnb>:
 * @pre
 * @post
 * @return
 */
uint8_t DBUG_u8RxEnb()
{
 800015a:	b580      	push	{r7, lr}
 800015c:	af00      	add	r7, sp, #0
	PHY_u8Uart3EnbInterrupt();
 800015e:	f001 f84f 	bl	8001200 <PHY_u8Uart3EnbInterrupt>
	return HAL_OK;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	bd80      	pop	{r7, pc}

08000168 <DBUG_u8SendByte>:
 * @post
 * @param u8Byte
 * @return
 */
uint8_t DBUG_u8SendByte(uint8_t* pu8Data, uint16_t u16Len)
{
 8000168:	b580      	push	{r7, lr}
 800016a:	b082      	sub	sp, #8
 800016c:	af00      	add	r7, sp, #0
 800016e:	6078      	str	r0, [r7, #4]
 8000170:	460b      	mov	r3, r1
 8000172:	807b      	strh	r3, [r7, #2]
	PHY_u8Uart3SendByte(pu8Data, u16Len);
 8000174:	887b      	ldrh	r3, [r7, #2]
 8000176:	4619      	mov	r1, r3
 8000178:	6878      	ldr	r0, [r7, #4]
 800017a:	f001 f87f 	bl	800127c <PHY_u8Uart3SendByte>
	return HAL_OK;
 800017e:	2300      	movs	r3, #0
}
 8000180:	4618      	mov	r0, r3
 8000182:	3708      	adds	r7, #8
 8000184:	46bd      	mov	sp, r7
 8000186:	bd80      	pop	{r7, pc}

08000188 <DBUG_u8GetCmdState>:
 * @pre
 * @post
 * @return
 */
uint8_t DBUG_u8GetCmdState()
{
 8000188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800018a:	b083      	sub	sp, #12
 800018c:	af00      	add	r7, sp, #0
	//-> 04 Scheduler Data
	//07 <crc> 04 <1 byte no of Slot> <3 bytes Hour/Minute/Value>
	//07070301010101
	//03 <crc> 05 -> End SCH set -> MCU storage to Flash
	//030505
	uint8_t u8Item = 0;
 800018e:	2300      	movs	r3, #0
 8000190:	71fb      	strb	r3, [r7, #7]
	u8RxByte = PHY_u8Uart3ReturnRxByte();
 8000192:	f001 f85d 	bl	8001250 <PHY_u8Uart3ReturnRxByte>
 8000196:	4603      	mov	r3, r0
 8000198:	4a84      	ldr	r2, [pc, #528]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 800019a:	6013      	str	r3, [r2, #0]

	if(u8RxByte[0] == 0 && u8RxByte[1] == 0 && u8RxByte[1] == 0)
 800019c:	4b83      	ldr	r3, [pc, #524]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	781b      	ldrb	r3, [r3, #0]
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d10d      	bne.n	80001c2 <DBUG_u8GetCmdState+0x3a>
 80001a6:	4b81      	ldr	r3, [pc, #516]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	3301      	adds	r3, #1
 80001ac:	781b      	ldrb	r3, [r3, #0]
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d107      	bne.n	80001c2 <DBUG_u8GetCmdState+0x3a>
 80001b2:	4b7e      	ldr	r3, [pc, #504]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	3301      	adds	r3, #1
 80001b8:	781b      	ldrb	r3, [r3, #0]
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d101      	bne.n	80001c2 <DBUG_u8GetCmdState+0x3a>
		return 0;
 80001be:	2300      	movs	r3, #0
 80001c0:	e251      	b.n	8000666 <DBUG_u8GetCmdState+0x4de>

	for(u8Item = 0; u8Item < MAX_OF_LEN; u8Item++)
 80001c2:	2300      	movs	r3, #0
 80001c4:	71fb      	strb	r3, [r7, #7]
 80001c6:	e249      	b.n	800065c <DBUG_u8GetCmdState+0x4d4>
	{

		if((u8RxByte[u8Item] == 0x03)
 80001c8:	4b78      	ldr	r3, [pc, #480]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 80001ca:	681a      	ldr	r2, [r3, #0]
 80001cc:	79fb      	ldrb	r3, [r7, #7]
 80001ce:	4413      	add	r3, r2
 80001d0:	781b      	ldrb	r3, [r3, #0]
 80001d2:	2b03      	cmp	r3, #3
 80001d4:	d119      	bne.n	800020a <DBUG_u8GetCmdState+0x82>
			&& (u8RxByte[u8Item+1] ==  u8RxByte[u8Item+2])
 80001d6:	4b75      	ldr	r3, [pc, #468]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 80001d8:	681a      	ldr	r2, [r3, #0]
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	3301      	adds	r3, #1
 80001de:	4413      	add	r3, r2
 80001e0:	781a      	ldrb	r2, [r3, #0]
 80001e2:	4b72      	ldr	r3, [pc, #456]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 80001e4:	6819      	ldr	r1, [r3, #0]
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	3302      	adds	r3, #2
 80001ea:	440b      	add	r3, r1
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	429a      	cmp	r2, r3
 80001f0:	d10b      	bne.n	800020a <DBUG_u8GetCmdState+0x82>
			&& (u8RxByte[u8Item+2] == 0x64))
 80001f2:	4b6e      	ldr	r3, [pc, #440]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 80001f4:	681a      	ldr	r2, [r3, #0]
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	3302      	adds	r3, #2
 80001fa:	4413      	add	r3, r2
 80001fc:	781b      	ldrb	r3, [r3, #0]
 80001fe:	2b64      	cmp	r3, #100	; 0x64
 8000200:	d103      	bne.n	800020a <DBUG_u8GetCmdState+0x82>
		{
			PHY_u8Uart3EnbInterrupt();
 8000202:	f000 fffd 	bl	8001200 <PHY_u8Uart3EnbInterrupt>
			return MA_STA_RUN_AUT1;
 8000206:	2364      	movs	r3, #100	; 0x64
 8000208:	e22d      	b.n	8000666 <DBUG_u8GetCmdState+0x4de>
		}
		else if((u8RxByte[u8Item] == 0x03)
 800020a:	4b68      	ldr	r3, [pc, #416]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 800020c:	681a      	ldr	r2, [r3, #0]
 800020e:	79fb      	ldrb	r3, [r7, #7]
 8000210:	4413      	add	r3, r2
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	2b03      	cmp	r3, #3
 8000216:	d119      	bne.n	800024c <DBUG_u8GetCmdState+0xc4>
			&& (u8RxByte[u8Item+1] ==  u8RxByte[u8Item+2])
 8000218:	4b64      	ldr	r3, [pc, #400]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 800021a:	681a      	ldr	r2, [r3, #0]
 800021c:	79fb      	ldrb	r3, [r7, #7]
 800021e:	3301      	adds	r3, #1
 8000220:	4413      	add	r3, r2
 8000222:	781a      	ldrb	r2, [r3, #0]
 8000224:	4b61      	ldr	r3, [pc, #388]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 8000226:	6819      	ldr	r1, [r3, #0]
 8000228:	79fb      	ldrb	r3, [r7, #7]
 800022a:	3302      	adds	r3, #2
 800022c:	440b      	add	r3, r1
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	429a      	cmp	r2, r3
 8000232:	d10b      	bne.n	800024c <DBUG_u8GetCmdState+0xc4>
			&& (u8RxByte[u8Item+2] == 0x65))
 8000234:	4b5d      	ldr	r3, [pc, #372]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 8000236:	681a      	ldr	r2, [r3, #0]
 8000238:	79fb      	ldrb	r3, [r7, #7]
 800023a:	3302      	adds	r3, #2
 800023c:	4413      	add	r3, r2
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	2b65      	cmp	r3, #101	; 0x65
 8000242:	d103      	bne.n	800024c <DBUG_u8GetCmdState+0xc4>
		{
			PHY_u8Uart3EnbInterrupt();
 8000244:	f000 ffdc 	bl	8001200 <PHY_u8Uart3EnbInterrupt>
			return MA_STA_RUN_AUT2;
 8000248:	2365      	movs	r3, #101	; 0x65
 800024a:	e20c      	b.n	8000666 <DBUG_u8GetCmdState+0x4de>
		}
		else if((u8RxByte[u8Item] == 0x04)
 800024c:	4b57      	ldr	r3, [pc, #348]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 800024e:	681a      	ldr	r2, [r3, #0]
 8000250:	79fb      	ldrb	r3, [r7, #7]
 8000252:	4413      	add	r3, r2
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	2b04      	cmp	r3, #4
 8000258:	d13e      	bne.n	80002d8 <DBUG_u8GetCmdState+0x150>
			&& (u8RxByte[u8Item+1] ==  (uint8_t)(u8RxByte[u8Item+2] + u8RxByte[u8Item+3]))
 800025a:	4b54      	ldr	r3, [pc, #336]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 800025c:	681a      	ldr	r2, [r3, #0]
 800025e:	79fb      	ldrb	r3, [r7, #7]
 8000260:	3301      	adds	r3, #1
 8000262:	4413      	add	r3, r2
 8000264:	781a      	ldrb	r2, [r3, #0]
 8000266:	4b51      	ldr	r3, [pc, #324]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 8000268:	6819      	ldr	r1, [r3, #0]
 800026a:	79fb      	ldrb	r3, [r7, #7]
 800026c:	3302      	adds	r3, #2
 800026e:	440b      	add	r3, r1
 8000270:	7819      	ldrb	r1, [r3, #0]
 8000272:	4b4e      	ldr	r3, [pc, #312]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 8000274:	6818      	ldr	r0, [r3, #0]
 8000276:	79fb      	ldrb	r3, [r7, #7]
 8000278:	3303      	adds	r3, #3
 800027a:	4403      	add	r3, r0
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	440b      	add	r3, r1
 8000280:	b2db      	uxtb	r3, r3
 8000282:	429a      	cmp	r2, r3
 8000284:	d128      	bne.n	80002d8 <DBUG_u8GetCmdState+0x150>
			&& (u8RxByte[u8Item+2] == 0x01)
 8000286:	4b49      	ldr	r3, [pc, #292]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 8000288:	681a      	ldr	r2, [r3, #0]
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	3302      	adds	r3, #2
 800028e:	4413      	add	r3, r2
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	2b01      	cmp	r3, #1
 8000294:	d120      	bne.n	80002d8 <DBUG_u8GetCmdState+0x150>
			&& (u8RxByte[u8Item+3] > 0))
 8000296:	4b45      	ldr	r3, [pc, #276]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 8000298:	681a      	ldr	r2, [r3, #0]
 800029a:	79fb      	ldrb	r3, [r7, #7]
 800029c:	3303      	adds	r3, #3
 800029e:	4413      	add	r3, r2
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d018      	beq.n	80002d8 <DBUG_u8GetCmdState+0x150>
		{
			u8DataCmd[0] = u8RxByte[u8Item+3] >> 4;
 80002a6:	4b41      	ldr	r3, [pc, #260]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 80002a8:	681a      	ldr	r2, [r3, #0]
 80002aa:	79fb      	ldrb	r3, [r7, #7]
 80002ac:	3303      	adds	r3, #3
 80002ae:	4413      	add	r3, r2
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	091b      	lsrs	r3, r3, #4
 80002b4:	b2da      	uxtb	r2, r3
 80002b6:	4b3e      	ldr	r3, [pc, #248]	; (80003b0 <DBUG_u8GetCmdState+0x228>)
 80002b8:	701a      	strb	r2, [r3, #0]
			u8DataCmd[1] = u8RxByte[u8Item+3] & 0x0F;
 80002ba:	4b3c      	ldr	r3, [pc, #240]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 80002bc:	681a      	ldr	r2, [r3, #0]
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	3303      	adds	r3, #3
 80002c2:	4413      	add	r3, r2
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	f003 030f 	and.w	r3, r3, #15
 80002ca:	b2da      	uxtb	r2, r3
 80002cc:	4b38      	ldr	r3, [pc, #224]	; (80003b0 <DBUG_u8GetCmdState+0x228>)
 80002ce:	705a      	strb	r2, [r3, #1]

			PHY_u8Uart3EnbInterrupt();
 80002d0:	f000 ff96 	bl	8001200 <PHY_u8Uart3EnbInterrupt>
			return MA_STA_RUN_MAN_LED;
 80002d4:	230b      	movs	r3, #11
 80002d6:	e1c6      	b.n	8000666 <DBUG_u8GetCmdState+0x4de>
		}
		else if((u8RxByte[u8Item] == 0x06)
 80002d8:	4b34      	ldr	r3, [pc, #208]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 80002da:	681a      	ldr	r2, [r3, #0]
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	4413      	add	r3, r2
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	2b06      	cmp	r3, #6
 80002e4:	d166      	bne.n	80003b4 <DBUG_u8GetCmdState+0x22c>
			&& (u8RxByte[u8Item+1] == (uint8_t)(u8RxByte[u8Item+2] + u8RxByte[u8Item+3] + u8RxByte[u8Item+4] + u8RxByte[u8Item+5]))
 80002e6:	4b31      	ldr	r3, [pc, #196]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 80002e8:	681a      	ldr	r2, [r3, #0]
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	3301      	adds	r3, #1
 80002ee:	4413      	add	r3, r2
 80002f0:	781a      	ldrb	r2, [r3, #0]
 80002f2:	4b2e      	ldr	r3, [pc, #184]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 80002f4:	6819      	ldr	r1, [r3, #0]
 80002f6:	79fb      	ldrb	r3, [r7, #7]
 80002f8:	3302      	adds	r3, #2
 80002fa:	440b      	add	r3, r1
 80002fc:	7819      	ldrb	r1, [r3, #0]
 80002fe:	4b2b      	ldr	r3, [pc, #172]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 8000300:	6818      	ldr	r0, [r3, #0]
 8000302:	79fb      	ldrb	r3, [r7, #7]
 8000304:	3303      	adds	r3, #3
 8000306:	4403      	add	r3, r0
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	440b      	add	r3, r1
 800030c:	b2d9      	uxtb	r1, r3
 800030e:	4b27      	ldr	r3, [pc, #156]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 8000310:	6818      	ldr	r0, [r3, #0]
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	3304      	adds	r3, #4
 8000316:	4403      	add	r3, r0
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	440b      	add	r3, r1
 800031c:	b2d9      	uxtb	r1, r3
 800031e:	4b23      	ldr	r3, [pc, #140]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 8000320:	6818      	ldr	r0, [r3, #0]
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	3305      	adds	r3, #5
 8000326:	4403      	add	r3, r0
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	440b      	add	r3, r1
 800032c:	b2db      	uxtb	r3, r3
 800032e:	429a      	cmp	r2, r3
 8000330:	d140      	bne.n	80003b4 <DBUG_u8GetCmdState+0x22c>
			&& (u8RxByte[u8Item+2] == 0x02)
 8000332:	4b1e      	ldr	r3, [pc, #120]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 8000334:	681a      	ldr	r2, [r3, #0]
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	3302      	adds	r3, #2
 800033a:	4413      	add	r3, r2
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	2b02      	cmp	r3, #2
 8000340:	d138      	bne.n	80003b4 <DBUG_u8GetCmdState+0x22c>
			&& (u8RxByte[u8Item+3] > 0)
 8000342:	4b1a      	ldr	r3, [pc, #104]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 8000344:	681a      	ldr	r2, [r3, #0]
 8000346:	79fb      	ldrb	r3, [r7, #7]
 8000348:	3303      	adds	r3, #3
 800034a:	4413      	add	r3, r2
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	2b00      	cmp	r3, #0
 8000350:	d030      	beq.n	80003b4 <DBUG_u8GetCmdState+0x22c>
			&& (u8RxByte[u8Item+4] > 0)
 8000352:	4b16      	ldr	r3, [pc, #88]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 8000354:	681a      	ldr	r2, [r3, #0]
 8000356:	79fb      	ldrb	r3, [r7, #7]
 8000358:	3304      	adds	r3, #4
 800035a:	4413      	add	r3, r2
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	2b00      	cmp	r3, #0
 8000360:	d028      	beq.n	80003b4 <DBUG_u8GetCmdState+0x22c>
			&& (u8RxByte[u8Item+5] > 0))
 8000362:	4b12      	ldr	r3, [pc, #72]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 8000364:	681a      	ldr	r2, [r3, #0]
 8000366:	79fb      	ldrb	r3, [r7, #7]
 8000368:	3305      	adds	r3, #5
 800036a:	4413      	add	r3, r2
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	2b00      	cmp	r3, #0
 8000370:	d020      	beq.n	80003b4 <DBUG_u8GetCmdState+0x22c>
		{
			u8DataCmd[0] = u8RxByte[u8Item+3];
 8000372:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 8000374:	681a      	ldr	r2, [r3, #0]
 8000376:	79fb      	ldrb	r3, [r7, #7]
 8000378:	3303      	adds	r3, #3
 800037a:	4413      	add	r3, r2
 800037c:	781a      	ldrb	r2, [r3, #0]
 800037e:	4b0c      	ldr	r3, [pc, #48]	; (80003b0 <DBUG_u8GetCmdState+0x228>)
 8000380:	701a      	strb	r2, [r3, #0]
			u8DataCmd[1] = u8RxByte[u8Item+4];
 8000382:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 8000384:	681a      	ldr	r2, [r3, #0]
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	3304      	adds	r3, #4
 800038a:	4413      	add	r3, r2
 800038c:	781a      	ldrb	r2, [r3, #0]
 800038e:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <DBUG_u8GetCmdState+0x228>)
 8000390:	705a      	strb	r2, [r3, #1]
			u8DataCmd[2] = u8RxByte[u8Item+5];
 8000392:	4b06      	ldr	r3, [pc, #24]	; (80003ac <DBUG_u8GetCmdState+0x224>)
 8000394:	681a      	ldr	r2, [r3, #0]
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	3305      	adds	r3, #5
 800039a:	4413      	add	r3, r2
 800039c:	781a      	ldrb	r2, [r3, #0]
 800039e:	4b04      	ldr	r3, [pc, #16]	; (80003b0 <DBUG_u8GetCmdState+0x228>)
 80003a0:	709a      	strb	r2, [r3, #2]

			PHY_u8Uart3EnbInterrupt();
 80003a2:	f000 ff2d 	bl	8001200 <PHY_u8Uart3EnbInterrupt>
			return MA_STA_RUN_MAN_PWM;
 80003a6:	230c      	movs	r3, #12
 80003a8:	e15d      	b.n	8000666 <DBUG_u8GetCmdState+0x4de>
 80003aa:	bf00      	nop
 80003ac:	20000058 	.word	0x20000058
 80003b0:	20000080 	.word	0x20000080
		}
		else if((u8RxByte[u8Item] == 0x07)
 80003b4:	4b93      	ldr	r3, [pc, #588]	; (8000604 <DBUG_u8GetCmdState+0x47c>)
 80003b6:	681a      	ldr	r2, [r3, #0]
 80003b8:	79fb      	ldrb	r3, [r7, #7]
 80003ba:	4413      	add	r3, r2
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	2b07      	cmp	r3, #7
 80003c0:	d179      	bne.n	80004b6 <DBUG_u8GetCmdState+0x32e>
			&& (u8RxByte[u8Item+1] == (uint8_t)(u8RxByte[u8Item+2] + u8RxByte[u8Item+3] + u8RxByte[u8Item+4] + u8RxByte[u8Item+5] + u8RxByte[u8Item+6]))
 80003c2:	4b90      	ldr	r3, [pc, #576]	; (8000604 <DBUG_u8GetCmdState+0x47c>)
 80003c4:	681a      	ldr	r2, [r3, #0]
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	3301      	adds	r3, #1
 80003ca:	4413      	add	r3, r2
 80003cc:	781a      	ldrb	r2, [r3, #0]
 80003ce:	4b8d      	ldr	r3, [pc, #564]	; (8000604 <DBUG_u8GetCmdState+0x47c>)
 80003d0:	6819      	ldr	r1, [r3, #0]
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	3302      	adds	r3, #2
 80003d6:	440b      	add	r3, r1
 80003d8:	7819      	ldrb	r1, [r3, #0]
 80003da:	4b8a      	ldr	r3, [pc, #552]	; (8000604 <DBUG_u8GetCmdState+0x47c>)
 80003dc:	6818      	ldr	r0, [r3, #0]
 80003de:	79fb      	ldrb	r3, [r7, #7]
 80003e0:	3303      	adds	r3, #3
 80003e2:	4403      	add	r3, r0
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	440b      	add	r3, r1
 80003e8:	b2d9      	uxtb	r1, r3
 80003ea:	4b86      	ldr	r3, [pc, #536]	; (8000604 <DBUG_u8GetCmdState+0x47c>)
 80003ec:	6818      	ldr	r0, [r3, #0]
 80003ee:	79fb      	ldrb	r3, [r7, #7]
 80003f0:	3304      	adds	r3, #4
 80003f2:	4403      	add	r3, r0
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	440b      	add	r3, r1
 80003f8:	b2d9      	uxtb	r1, r3
 80003fa:	4b82      	ldr	r3, [pc, #520]	; (8000604 <DBUG_u8GetCmdState+0x47c>)
 80003fc:	6818      	ldr	r0, [r3, #0]
 80003fe:	79fb      	ldrb	r3, [r7, #7]
 8000400:	3305      	adds	r3, #5
 8000402:	4403      	add	r3, r0
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	440b      	add	r3, r1
 8000408:	b2d9      	uxtb	r1, r3
 800040a:	4b7e      	ldr	r3, [pc, #504]	; (8000604 <DBUG_u8GetCmdState+0x47c>)
 800040c:	6818      	ldr	r0, [r3, #0]
 800040e:	79fb      	ldrb	r3, [r7, #7]
 8000410:	3306      	adds	r3, #6
 8000412:	4403      	add	r3, r0
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	440b      	add	r3, r1
 8000418:	b2db      	uxtb	r3, r3
 800041a:	429a      	cmp	r2, r3
 800041c:	d14b      	bne.n	80004b6 <DBUG_u8GetCmdState+0x32e>
			&& (u8RxByte[u8Item+2] == 0x03)
 800041e:	4b79      	ldr	r3, [pc, #484]	; (8000604 <DBUG_u8GetCmdState+0x47c>)
 8000420:	681a      	ldr	r2, [r3, #0]
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	3302      	adds	r3, #2
 8000426:	4413      	add	r3, r2
 8000428:	781b      	ldrb	r3, [r3, #0]
			&& (u8RxByte[u8Item+3] >= 0)
 800042a:	2b03      	cmp	r3, #3
 800042c:	d143      	bne.n	80004b6 <DBUG_u8GetCmdState+0x32e>
			&& (u8RxByte[u8Item+4] > 0)
 800042e:	4b75      	ldr	r3, [pc, #468]	; (8000604 <DBUG_u8GetCmdState+0x47c>)
 8000430:	681a      	ldr	r2, [r3, #0]
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	3304      	adds	r3, #4
 8000436:	4413      	add	r3, r2
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b00      	cmp	r3, #0
 800043c:	d03b      	beq.n	80004b6 <DBUG_u8GetCmdState+0x32e>
			&& (u8RxByte[u8Item+5] > 0)
 800043e:	4b71      	ldr	r3, [pc, #452]	; (8000604 <DBUG_u8GetCmdState+0x47c>)
 8000440:	681a      	ldr	r2, [r3, #0]
 8000442:	79fb      	ldrb	r3, [r7, #7]
 8000444:	3305      	adds	r3, #5
 8000446:	4413      	add	r3, r2
 8000448:	781b      	ldrb	r3, [r3, #0]
			&& (u8RxByte[u8Item+6] >= 0))
 800044a:	2b00      	cmp	r3, #0
 800044c:	d033      	beq.n	80004b6 <DBUG_u8GetCmdState+0x32e>
		{

			u8DataCmd[0] = u8RxByte[u8Item+3];
 800044e:	4b6d      	ldr	r3, [pc, #436]	; (8000604 <DBUG_u8GetCmdState+0x47c>)
 8000450:	681a      	ldr	r2, [r3, #0]
 8000452:	79fb      	ldrb	r3, [r7, #7]
 8000454:	3303      	adds	r3, #3
 8000456:	4413      	add	r3, r2
 8000458:	781a      	ldrb	r2, [r3, #0]
 800045a:	4b6b      	ldr	r3, [pc, #428]	; (8000608 <DBUG_u8GetCmdState+0x480>)
 800045c:	701a      	strb	r2, [r3, #0]
			u8DataCmd[1] = u8RxByte[u8Item+4];
 800045e:	4b69      	ldr	r3, [pc, #420]	; (8000604 <DBUG_u8GetCmdState+0x47c>)
 8000460:	681a      	ldr	r2, [r3, #0]
 8000462:	79fb      	ldrb	r3, [r7, #7]
 8000464:	3304      	adds	r3, #4
 8000466:	4413      	add	r3, r2
 8000468:	781a      	ldrb	r2, [r3, #0]
 800046a:	4b67      	ldr	r3, [pc, #412]	; (8000608 <DBUG_u8GetCmdState+0x480>)
 800046c:	705a      	strb	r2, [r3, #1]
			u8DataCmd[2] = u8RxByte[u8Item+5];
 800046e:	4b65      	ldr	r3, [pc, #404]	; (8000604 <DBUG_u8GetCmdState+0x47c>)
 8000470:	681a      	ldr	r2, [r3, #0]
 8000472:	79fb      	ldrb	r3, [r7, #7]
 8000474:	3305      	adds	r3, #5
 8000476:	4413      	add	r3, r2
 8000478:	781a      	ldrb	r2, [r3, #0]
 800047a:	4b63      	ldr	r3, [pc, #396]	; (8000608 <DBUG_u8GetCmdState+0x480>)
 800047c:	709a      	strb	r2, [r3, #2]
			u8DataCmd[3] = u8RxByte[u8Item+6];
 800047e:	4b61      	ldr	r3, [pc, #388]	; (8000604 <DBUG_u8GetCmdState+0x47c>)
 8000480:	681a      	ldr	r2, [r3, #0]
 8000482:	79fb      	ldrb	r3, [r7, #7]
 8000484:	3306      	adds	r3, #6
 8000486:	4413      	add	r3, r2
 8000488:	781a      	ldrb	r2, [r3, #0]
 800048a:	4b5f      	ldr	r3, [pc, #380]	; (8000608 <DBUG_u8GetCmdState+0x480>)
 800048c:	70da      	strb	r2, [r3, #3]

			stSchedulerDataSlot.u8DayOfWeek = u8DataCmd[0];
 800048e:	4b5e      	ldr	r3, [pc, #376]	; (8000608 <DBUG_u8GetCmdState+0x480>)
 8000490:	781a      	ldrb	r2, [r3, #0]
 8000492:	4b5e      	ldr	r3, [pc, #376]	; (800060c <DBUG_u8GetCmdState+0x484>)
 8000494:	701a      	strb	r2, [r3, #0]
			stSchedulerDataSlot.u8Day 		= u8DataCmd[1];
 8000496:	4b5c      	ldr	r3, [pc, #368]	; (8000608 <DBUG_u8GetCmdState+0x480>)
 8000498:	785a      	ldrb	r2, [r3, #1]
 800049a:	4b5c      	ldr	r3, [pc, #368]	; (800060c <DBUG_u8GetCmdState+0x484>)
 800049c:	705a      	strb	r2, [r3, #1]
			stSchedulerDataSlot.u8Month		= u8DataCmd[2];
 800049e:	4b5a      	ldr	r3, [pc, #360]	; (8000608 <DBUG_u8GetCmdState+0x480>)
 80004a0:	789a      	ldrb	r2, [r3, #2]
 80004a2:	4b5a      	ldr	r3, [pc, #360]	; (800060c <DBUG_u8GetCmdState+0x484>)
 80004a4:	709a      	strb	r2, [r3, #2]
			stSchedulerDataSlot.u8Year 		= u8DataCmd[3];
 80004a6:	4b58      	ldr	r3, [pc, #352]	; (8000608 <DBUG_u8GetCmdState+0x480>)
 80004a8:	78da      	ldrb	r2, [r3, #3]
 80004aa:	4b58      	ldr	r3, [pc, #352]	; (800060c <DBUG_u8GetCmdState+0x484>)
 80004ac:	70da      	strb	r2, [r3, #3]

			PHY_u8Uart3EnbInterrupt();
 80004ae:	f000 fea7 	bl	8001200 <PHY_u8Uart3EnbInterrupt>
			return MA_STA_SET_SCH;
 80004b2:	23c8      	movs	r3, #200	; 0xc8
 80004b4:	e0d7      	b.n	8000666 <DBUG_u8GetCmdState+0x4de>
		}
		else if((u8RxByte[u8Item] == 0x07)
 80004b6:	4b53      	ldr	r3, [pc, #332]	; (8000604 <DBUG_u8GetCmdState+0x47c>)
 80004b8:	681a      	ldr	r2, [r3, #0]
 80004ba:	79fb      	ldrb	r3, [r7, #7]
 80004bc:	4413      	add	r3, r2
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	2b07      	cmp	r3, #7
 80004c2:	f040 80a7 	bne.w	8000614 <DBUG_u8GetCmdState+0x48c>
			&& (u8RxByte[u8Item+1] == (uint8_t)(u8RxByte[u8Item+2] + u8RxByte[u8Item+3] + u8RxByte[u8Item+4] + u8RxByte[u8Item+5] + u8RxByte[u8Item+6]))
 80004c6:	4b4f      	ldr	r3, [pc, #316]	; (8000604 <DBUG_u8GetCmdState+0x47c>)
 80004c8:	681a      	ldr	r2, [r3, #0]
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	3301      	adds	r3, #1
 80004ce:	4413      	add	r3, r2
 80004d0:	781a      	ldrb	r2, [r3, #0]
 80004d2:	4b4c      	ldr	r3, [pc, #304]	; (8000604 <DBUG_u8GetCmdState+0x47c>)
 80004d4:	6819      	ldr	r1, [r3, #0]
 80004d6:	79fb      	ldrb	r3, [r7, #7]
 80004d8:	3302      	adds	r3, #2
 80004da:	440b      	add	r3, r1
 80004dc:	7819      	ldrb	r1, [r3, #0]
 80004de:	4b49      	ldr	r3, [pc, #292]	; (8000604 <DBUG_u8GetCmdState+0x47c>)
 80004e0:	6818      	ldr	r0, [r3, #0]
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	3303      	adds	r3, #3
 80004e6:	4403      	add	r3, r0
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	440b      	add	r3, r1
 80004ec:	b2d9      	uxtb	r1, r3
 80004ee:	4b45      	ldr	r3, [pc, #276]	; (8000604 <DBUG_u8GetCmdState+0x47c>)
 80004f0:	6818      	ldr	r0, [r3, #0]
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	3304      	adds	r3, #4
 80004f6:	4403      	add	r3, r0
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	440b      	add	r3, r1
 80004fc:	b2d9      	uxtb	r1, r3
 80004fe:	4b41      	ldr	r3, [pc, #260]	; (8000604 <DBUG_u8GetCmdState+0x47c>)
 8000500:	6818      	ldr	r0, [r3, #0]
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	3305      	adds	r3, #5
 8000506:	4403      	add	r3, r0
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	440b      	add	r3, r1
 800050c:	b2d9      	uxtb	r1, r3
 800050e:	4b3d      	ldr	r3, [pc, #244]	; (8000604 <DBUG_u8GetCmdState+0x47c>)
 8000510:	6818      	ldr	r0, [r3, #0]
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	3306      	adds	r3, #6
 8000516:	4403      	add	r3, r0
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	440b      	add	r3, r1
 800051c:	b2db      	uxtb	r3, r3
 800051e:	429a      	cmp	r2, r3
 8000520:	d178      	bne.n	8000614 <DBUG_u8GetCmdState+0x48c>
			&& (u8RxByte[u8Item+2] == 0x04)
 8000522:	4b38      	ldr	r3, [pc, #224]	; (8000604 <DBUG_u8GetCmdState+0x47c>)
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	3302      	adds	r3, #2
 800052a:	4413      	add	r3, r2
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b04      	cmp	r3, #4
 8000530:	d170      	bne.n	8000614 <DBUG_u8GetCmdState+0x48c>
			&& (u8RxByte[u8Item+3] > 0)
 8000532:	4b34      	ldr	r3, [pc, #208]	; (8000604 <DBUG_u8GetCmdState+0x47c>)
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	3303      	adds	r3, #3
 800053a:	4413      	add	r3, r2
 800053c:	781b      	ldrb	r3, [r3, #0]
			&& (u8RxByte[u8Item+4] >= 0)
			&& (u8RxByte[u8Item+5] >= 0)
			&& (u8RxByte[u8Item+6] >= 0))
 800053e:	2b00      	cmp	r3, #0
 8000540:	d068      	beq.n	8000614 <DBUG_u8GetCmdState+0x48c>
		{

			u8DataCmd[0] = u8RxByte[u8Item+3];
 8000542:	4b30      	ldr	r3, [pc, #192]	; (8000604 <DBUG_u8GetCmdState+0x47c>)
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	3303      	adds	r3, #3
 800054a:	4413      	add	r3, r2
 800054c:	781a      	ldrb	r2, [r3, #0]
 800054e:	4b2e      	ldr	r3, [pc, #184]	; (8000608 <DBUG_u8GetCmdState+0x480>)
 8000550:	701a      	strb	r2, [r3, #0]
			u8DataCmd[1] = u8RxByte[u8Item+4];
 8000552:	4b2c      	ldr	r3, [pc, #176]	; (8000604 <DBUG_u8GetCmdState+0x47c>)
 8000554:	681a      	ldr	r2, [r3, #0]
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	3304      	adds	r3, #4
 800055a:	4413      	add	r3, r2
 800055c:	781a      	ldrb	r2, [r3, #0]
 800055e:	4b2a      	ldr	r3, [pc, #168]	; (8000608 <DBUG_u8GetCmdState+0x480>)
 8000560:	705a      	strb	r2, [r3, #1]
			u8DataCmd[2] = u8RxByte[u8Item+5];
 8000562:	4b28      	ldr	r3, [pc, #160]	; (8000604 <DBUG_u8GetCmdState+0x47c>)
 8000564:	681a      	ldr	r2, [r3, #0]
 8000566:	79fb      	ldrb	r3, [r7, #7]
 8000568:	3305      	adds	r3, #5
 800056a:	4413      	add	r3, r2
 800056c:	781a      	ldrb	r2, [r3, #0]
 800056e:	4b26      	ldr	r3, [pc, #152]	; (8000608 <DBUG_u8GetCmdState+0x480>)
 8000570:	709a      	strb	r2, [r3, #2]
			u8DataCmd[3] = u8RxByte[u8Item+6];
 8000572:	4b24      	ldr	r3, [pc, #144]	; (8000604 <DBUG_u8GetCmdState+0x47c>)
 8000574:	681a      	ldr	r2, [r3, #0]
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	3306      	adds	r3, #6
 800057a:	4413      	add	r3, r2
 800057c:	781a      	ldrb	r2, [r3, #0]
 800057e:	4b22      	ldr	r3, [pc, #136]	; (8000608 <DBUG_u8GetCmdState+0x480>)
 8000580:	70da      	strb	r2, [r3, #3]

			Scheduler_ValueTypeDef stSchedulerValue = {0};
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	2100      	movs	r1, #0
 8000586:	460a      	mov	r2, r1
 8000588:	801a      	strh	r2, [r3, #0]
 800058a:	460a      	mov	r2, r1
 800058c:	709a      	strb	r2, [r3, #2]
			stSchedulerValue.u8Hour 	= u8DataCmd[1];
 800058e:	4b1e      	ldr	r3, [pc, #120]	; (8000608 <DBUG_u8GetCmdState+0x480>)
 8000590:	785b      	ldrb	r3, [r3, #1]
 8000592:	713b      	strb	r3, [r7, #4]
			stSchedulerValue.u8Minute	= u8DataCmd[2];
 8000594:	4b1c      	ldr	r3, [pc, #112]	; (8000608 <DBUG_u8GetCmdState+0x480>)
 8000596:	789b      	ldrb	r3, [r3, #2]
 8000598:	717b      	strb	r3, [r7, #5]
			stSchedulerValue.u8Value 	= u8DataCmd[3];
 800059a:	4b1b      	ldr	r3, [pc, #108]	; (8000608 <DBUG_u8GetCmdState+0x480>)
 800059c:	78db      	ldrb	r3, [r3, #3]
 800059e:	71bb      	strb	r3, [r7, #6]

			stSchedulerDataSlot.stSchedulerValue[u8DataCmd[0] - 1] = stSchedulerValue;
 80005a0:	4b19      	ldr	r3, [pc, #100]	; (8000608 <DBUG_u8GetCmdState+0x480>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	1e5a      	subs	r2, r3, #1
 80005a6:	4919      	ldr	r1, [pc, #100]	; (800060c <DBUG_u8GetCmdState+0x484>)
 80005a8:	4613      	mov	r3, r2
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	4413      	add	r3, r2
 80005ae:	440b      	add	r3, r1
 80005b0:	3304      	adds	r3, #4
 80005b2:	1d3a      	adds	r2, r7, #4
 80005b4:	8811      	ldrh	r1, [r2, #0]
 80005b6:	7892      	ldrb	r2, [r2, #2]
 80005b8:	8019      	strh	r1, [r3, #0]
 80005ba:	709a      	strb	r2, [r3, #2]

			stSchedulerData.stSchedulerDataSlot[stSchedulerDataSlot.u8DayOfWeek] = stSchedulerDataSlot;
 80005bc:	4b13      	ldr	r3, [pc, #76]	; (800060c <DBUG_u8GetCmdState+0x484>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	4619      	mov	r1, r3
 80005c2:	4a13      	ldr	r2, [pc, #76]	; (8000610 <DBUG_u8GetCmdState+0x488>)
 80005c4:	460b      	mov	r3, r1
 80005c6:	011b      	lsls	r3, r3, #4
 80005c8:	440b      	add	r3, r1
 80005ca:	005b      	lsls	r3, r3, #1
 80005cc:	441a      	add	r2, r3
 80005ce:	4b0f      	ldr	r3, [pc, #60]	; (800060c <DBUG_u8GetCmdState+0x484>)
 80005d0:	1cd0      	adds	r0, r2, #3
 80005d2:	f103 0420 	add.w	r4, r3, #32
 80005d6:	4602      	mov	r2, r0
 80005d8:	4619      	mov	r1, r3
 80005da:	f8d1 c000 	ldr.w	ip, [r1]
 80005de:	684e      	ldr	r6, [r1, #4]
 80005e0:	688d      	ldr	r5, [r1, #8]
 80005e2:	68c9      	ldr	r1, [r1, #12]
 80005e4:	f8c2 c000 	str.w	ip, [r2]
 80005e8:	6056      	str	r6, [r2, #4]
 80005ea:	6095      	str	r5, [r2, #8]
 80005ec:	60d1      	str	r1, [r2, #12]
 80005ee:	3310      	adds	r3, #16
 80005f0:	3010      	adds	r0, #16
 80005f2:	42a3      	cmp	r3, r4
 80005f4:	d1ef      	bne.n	80005d6 <DBUG_u8GetCmdState+0x44e>
 80005f6:	4602      	mov	r2, r0
 80005f8:	881b      	ldrh	r3, [r3, #0]
 80005fa:	8013      	strh	r3, [r2, #0]

			PHY_u8Uart3EnbInterrupt();
 80005fc:	f000 fe00 	bl	8001200 <PHY_u8Uart3EnbInterrupt>

//			if(u8DataCmd[0] == MAX_OF_SLOT)
//				return MA_STA_SET_SCH_END;

			return MA_STA_SET_SCH_UPD;
 8000600:	23c9      	movs	r3, #201	; 0xc9
 8000602:	e030      	b.n	8000666 <DBUG_u8GetCmdState+0x4de>
 8000604:	20000058 	.word	0x20000058
 8000608:	20000080 	.word	0x20000080
 800060c:	2000005c 	.word	0x2000005c
 8000610:	200003f0 	.word	0x200003f0
		}
		else if((u8RxByte[u8Item] == 0x03)
 8000614:	4b16      	ldr	r3, [pc, #88]	; (8000670 <DBUG_u8GetCmdState+0x4e8>)
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	4413      	add	r3, r2
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b03      	cmp	r3, #3
 8000620:	d119      	bne.n	8000656 <DBUG_u8GetCmdState+0x4ce>
				&& (u8RxByte[u8Item+1] ==  u8RxByte[u8Item+2])
 8000622:	4b13      	ldr	r3, [pc, #76]	; (8000670 <DBUG_u8GetCmdState+0x4e8>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	3301      	adds	r3, #1
 800062a:	4413      	add	r3, r2
 800062c:	781a      	ldrb	r2, [r3, #0]
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <DBUG_u8GetCmdState+0x4e8>)
 8000630:	6819      	ldr	r1, [r3, #0]
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	3302      	adds	r3, #2
 8000636:	440b      	add	r3, r1
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	429a      	cmp	r2, r3
 800063c:	d10b      	bne.n	8000656 <DBUG_u8GetCmdState+0x4ce>
				&& (u8RxByte[u8Item+2] == 0x05))
 800063e:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <DBUG_u8GetCmdState+0x4e8>)
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	3302      	adds	r3, #2
 8000646:	4413      	add	r3, r2
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b05      	cmp	r3, #5
 800064c:	d103      	bne.n	8000656 <DBUG_u8GetCmdState+0x4ce>
		{
			PHY_u8Uart3EnbInterrupt();
 800064e:	f000 fdd7 	bl	8001200 <PHY_u8Uart3EnbInterrupt>
			return MA_STA_SET_SCH_END;
 8000652:	23ca      	movs	r3, #202	; 0xca
 8000654:	e007      	b.n	8000666 <DBUG_u8GetCmdState+0x4de>
	for(u8Item = 0; u8Item < MAX_OF_LEN; u8Item++)
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	3301      	adds	r3, #1
 800065a:	71fb      	strb	r3, [r7, #7]
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	2bc7      	cmp	r3, #199	; 0xc7
 8000660:	f67f adb2 	bls.w	80001c8 <DBUG_u8GetCmdState+0x40>
		}
	}
	return 0;
 8000664:	2300      	movs	r3, #0
}
 8000666:	4618      	mov	r0, r3
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800066e:	bf00      	nop
 8000670:	20000058 	.word	0x20000058

08000674 <DBUG_pu8GetDataCmd>:
 * @pre
 * @post
 * @return
 */
uint8_t* DBUG_pu8GetDataCmd()
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
	return &u8DataCmd[0];
 8000678:	4b02      	ldr	r3, [pc, #8]	; (8000684 <DBUG_pu8GetDataCmd+0x10>)
}
 800067a:	4618      	mov	r0, r3
 800067c:	46bd      	mov	sp, r7
 800067e:	bc80      	pop	{r7}
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	20000080 	.word	0x20000080

08000688 <GPIO_u8ButtonInit>:
 * @pre
 * @post
 * @return
 */
uint8_t GPIO_u8ButtonInit()
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	return PHY_u8ButtonGpioInit();
 800068c:	f000 fbf2 	bl	8000e74 <PHY_u8ButtonGpioInit>
 8000690:	4603      	mov	r3, r0
}
 8000692:	4618      	mov	r0, r3
 8000694:	bd80      	pop	{r7, pc}

08000696 <GPIO_u8LedInit>:
 * @pre
 * @post
 * @return
 */
uint8_t GPIO_u8LedInit()
{
 8000696:	b580      	push	{r7, lr}
 8000698:	af00      	add	r7, sp, #0
	return PHY_u8LedGpioInit();
 800069a:	f000 fc17 	bl	8000ecc <PHY_u8LedGpioInit>
 800069e:	4603      	mov	r3, r0
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <GPIO_u8Led1On>:
 * @pre
 * @post
 * @return
 */
uint8_t GPIO_u8Led1On()
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	return PHY_u8Led1On();
 80006a8:	f000 fc42 	bl	8000f30 <PHY_u8Led1On>
 80006ac:	4603      	mov	r3, r0
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <GPIO_u8Led1Off>:
 * @pre
 * @post
 * @return
 */
uint8_t GPIO_u8Led1Off()
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	af00      	add	r7, sp, #0
	return PHY_u8Led1Off();
 80006b6:	f000 fc47 	bl	8000f48 <PHY_u8Led1Off>
 80006ba:	4603      	mov	r3, r0
}
 80006bc:	4618      	mov	r0, r3
 80006be:	bd80      	pop	{r7, pc}

080006c0 <GPIO_u8Led2On>:
 * @pre
 * @post
 * @return
 */
uint8_t GPIO_u8Led2On()
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	return PHY_u8Led2On();
 80006c4:	f000 fc4c 	bl	8000f60 <PHY_u8Led2On>
 80006c8:	4603      	mov	r3, r0
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	bd80      	pop	{r7, pc}

080006ce <GPIO_u8Led2Off>:
 * @pre
 * @post
 * @return
 */
uint8_t GPIO_u8Led2Off()
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	af00      	add	r7, sp, #0
	return PHY_u8Led2Off();
 80006d2:	f000 fc51 	bl	8000f78 <PHY_u8Led2Off>
 80006d6:	4603      	mov	r3, r0
}
 80006d8:	4618      	mov	r0, r3
 80006da:	bd80      	pop	{r7, pc}

080006dc <GPIO_u8ScanEnb>:
 * @pre
 * @post
 * @return
 */
uint8_t GPIO_u8ScanEnb()
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
	return PHY_u8Timer2EnbInterrupt();
 80006e0:	f000 fad6 	bl	8000c90 <PHY_u8Timer2EnbInterrupt>
 80006e4:	4603      	mov	r3, r0
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	bd80      	pop	{r7, pc}

080006ea <GPIO_u8ScanInit>:
 * @pre
 * @post
 * @return
 */
uint8_t GPIO_u8ScanInit()
{
 80006ea:	b580      	push	{r7, lr}
 80006ec:	af00      	add	r7, sp, #0
	return PHY_u8Timer2Init();
 80006ee:	f000 fa81 	bl	8000bf4 <PHY_u8Timer2Init>
 80006f2:	4603      	mov	r3, r0
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <LIAMBS_u8Init>:
 * @pre
 * @post
 * @return
 */
uint8_t LIAMBS_u8Init()
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	return PHY_u8Adc1Init();
 80006fc:	f000 fd26 	bl	800114c <PHY_u8Adc1Init>
 8000700:	4603      	mov	r3, r0
}
 8000702:	4618      	mov	r0, r3
 8000704:	bd80      	pop	{r7, pc}

08000706 <LIAMBS_u16Read>:
 * @pre
 * @post
 * @return
 */
uint16_t LIAMBS_u16Read()
{
 8000706:	b580      	push	{r7, lr}
 8000708:	af00      	add	r7, sp, #0
	return PHY_u16Adc1Read();
 800070a:	f000 fd5f 	bl	80011cc <PHY_u16Adc1Read>
 800070e:	4603      	mov	r3, r0
}
 8000710:	4618      	mov	r0, r3
 8000712:	bd80      	pop	{r7, pc}

08000714 <LIPWM_u8Init>:
 * @pre
 * @post
 * @return
 */
uint8_t LIPWM_u8Init()
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
	return PHY_u8Timer3Init();
 8000718:	f000 fac4 	bl	8000ca4 <PHY_u8Timer3Init>
 800071c:	4603      	mov	r3, r0
}
 800071e:	4618      	mov	r0, r3
 8000720:	bd80      	pop	{r7, pc}

08000722 <LIPWM_u8Start>:
 * @pre
 * @post
 * @return
 */
uint8_t LIPWM_u8Start()
{
 8000722:	b580      	push	{r7, lr}
 8000724:	af00      	add	r7, sp, #0
	return PHY_u8Timer3PwmStart();
 8000726:	f000 fb35 	bl	8000d94 <PHY_u8Timer3PwmStart>
 800072a:	4603      	mov	r3, r0
}
 800072c:	4618      	mov	r0, r3
 800072e:	bd80      	pop	{r7, pc}

08000730 <LIPWM_vSetValue>:
 * @post
 * @param u8Value
 * @param u16TimeSmooth
 */
void LIPWM_vSetValue(uint8_t u8Value, uint16_t u16TimeSmooth)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	460a      	mov	r2, r1
 800073a:	71fb      	strb	r3, [r7, #7]
 800073c:	4613      	mov	r3, r2
 800073e:	80bb      	strh	r3, [r7, #4]
	PHY_vTimer3SetPwmValue(u8Value, u16TimeSmooth);
 8000740:	88ba      	ldrh	r2, [r7, #4]
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	4611      	mov	r1, r2
 8000746:	4618      	mov	r0, r3
 8000748:	f000 fb34 	bl	8000db4 <PHY_vTimer3SetPwmValue>
}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000758:	f001 fa5a 	bl	8001c10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075c:	f000 f83a 	bl	80007d4 <SystemClock_Config>
//  MX_ADC1_Init();
//  MX_SPI1_Init();
//  MX_RTC_Init();
  /* USER CODE BEGIN 2 */

  u8MachineRunState = MA_STA_RUN_AUT1;
 8000760:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <main+0x78>)
 8000762:	2264      	movs	r2, #100	; 0x64
 8000764:	701a      	strb	r2, [r3, #0]

  GPIO_u8ButtonInit();
 8000766:	f7ff ff8f 	bl	8000688 <GPIO_u8ButtonInit>
  GPIO_u8LedInit();
 800076a:	f7ff ff94 	bl	8000696 <GPIO_u8LedInit>
  GPIO_u8ScanInit();
 800076e:	f7ff ffbc 	bl	80006ea <GPIO_u8ScanInit>
  GPIO_u8ScanEnb();
 8000772:	f7ff ffb3 	bl	80006dc <GPIO_u8ScanEnb>

  LIPWM_u8Init();
 8000776:	f7ff ffcd 	bl	8000714 <LIPWM_u8Init>
  LIPWM_u8Start();
 800077a:	f7ff ffd2 	bl	8000722 <LIPWM_u8Start>

  LIAMBS_u8Init();
 800077e:	f7ff ffbb 	bl	80006f8 <LIAMBS_u8Init>

  DBUG_u8Init();
 8000782:	f7ff fce3 	bl	800014c <DBUG_u8Init>
  DBUG_u8RxEnb();
 8000786:	f7ff fce8 	bl	800015a <DBUG_u8RxEnb>

  SIM_u8SimInit();
 800078a:	f001 f819 	bl	80017c0 <SIM_u8SimInit>
  SIM_vOffSim();
 800078e:	f001 f81e 	bl	80017ce <SIM_vOffSim>

  RTC_u8Init();
 8000792:	f001 f803 	bl	800179c <RTC_u8Init>

  GPIO_u8Led1On();
 8000796:	f7ff ff85 	bl	80006a4 <GPIO_u8Led1On>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  u8MachineSetState = DBUG_u8GetCmdState();
 800079a:	f7ff fcf5 	bl	8000188 <DBUG_u8GetCmdState>
 800079e:	4603      	mov	r3, r0
 80007a0:	461a      	mov	r2, r3
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <main+0x7c>)
 80007a4:	701a      	strb	r2, [r3, #0]

	  if(u8MachineSetState > 0)
 80007a6:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <main+0x7c>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d008      	beq.n	80007c0 <main+0x6c>
	  {
		  u8MachineRunState = u8CheckSetup(u8MachineSetState);
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <main+0x7c>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 f870 	bl	8000898 <u8CheckSetup>
 80007b8:	4603      	mov	r3, r0
 80007ba:	461a      	mov	r2, r3
 80007bc:	4b03      	ldr	r3, [pc, #12]	; (80007cc <main+0x78>)
 80007be:	701a      	strb	r2, [r3, #0]
	  }

	  vRun(u8MachineRunState);
 80007c0:	4b02      	ldr	r3, [pc, #8]	; (80007cc <main+0x78>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f000 f8cb 	bl	8000960 <vRun>
	  u8MachineSetState = DBUG_u8GetCmdState();
 80007ca:	e7e6      	b.n	800079a <main+0x46>
 80007cc:	200003e8 	.word	0x200003e8
 80007d0:	2000026b 	.word	0x2000026b

080007d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b094      	sub	sp, #80	; 0x50
 80007d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007de:	2228      	movs	r2, #40	; 0x28
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f005 fa98 	bl	8005d18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000804:	2305      	movs	r3, #5
 8000806:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000808:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800080c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000812:	2301      	movs	r3, #1
 8000814:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000816:	2301      	movs	r3, #1
 8000818:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081a:	2302      	movs	r3, #2
 800081c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800081e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000822:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000824:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000828:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800082e:	4618      	mov	r0, r3
 8000830:	f002 fc0c 	bl	800304c <HAL_RCC_OscConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800083a:	f000 f9a1 	bl	8000b80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083e:	230f      	movs	r3, #15
 8000840:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000842:	2302      	movs	r3, #2
 8000844:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800084a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800084e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000850:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000854:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000856:	f107 0314 	add.w	r3, r7, #20
 800085a:	2102      	movs	r1, #2
 800085c:	4618      	mov	r0, r3
 800085e:	f002 fe75 	bl	800354c <HAL_RCC_ClockConfig>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000868:	f000 f98a 	bl	8000b80 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 800086c:	2303      	movs	r3, #3
 800086e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000870:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000874:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000876:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800087a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	4618      	mov	r0, r3
 8000880:	f002 fffe 	bl	8003880 <HAL_RCCEx_PeriphCLKConfig>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800088a:	f000 f979 	bl	8000b80 <Error_Handler>
  }
}
 800088e:	bf00      	nop
 8000890:	3750      	adds	r7, #80	; 0x50
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <u8CheckSetup>:
 * @pre
 * @post
 * @param u8State
 */
uint8_t u8CheckSetup(uint8_t u8State)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]
	if(u8State == MA_STA_RUN_MAN_LED)
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	2b0b      	cmp	r3, #11
 80008a6:	d105      	bne.n	80008b4 <u8CheckSetup+0x1c>
	{
		DBUG_u8SendByte((uint8_t*)"MOK\n", 4);
 80008a8:	2104      	movs	r1, #4
 80008aa:	4824      	ldr	r0, [pc, #144]	; (800093c <u8CheckSetup+0xa4>)
 80008ac:	f7ff fc5c 	bl	8000168 <DBUG_u8SendByte>
		return u8State;
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	e03f      	b.n	8000934 <u8CheckSetup+0x9c>
	}

	if(u8State == MA_STA_RUN_MAN_PWM)
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	2b0c      	cmp	r3, #12
 80008b8:	d105      	bne.n	80008c6 <u8CheckSetup+0x2e>
	{
		DBUG_u8SendByte((uint8_t*)"MOK\n", 4);
 80008ba:	2104      	movs	r1, #4
 80008bc:	481f      	ldr	r0, [pc, #124]	; (800093c <u8CheckSetup+0xa4>)
 80008be:	f7ff fc53 	bl	8000168 <DBUG_u8SendByte>
		return u8State;
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	e036      	b.n	8000934 <u8CheckSetup+0x9c>
	}

	if(u8State == MA_STA_RUN_AUT1)
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	2b64      	cmp	r3, #100	; 0x64
 80008ca:	d105      	bne.n	80008d8 <u8CheckSetup+0x40>
	{
		DBUG_u8SendByte((uint8_t*)"A1OK\n", 5);
 80008cc:	2105      	movs	r1, #5
 80008ce:	481c      	ldr	r0, [pc, #112]	; (8000940 <u8CheckSetup+0xa8>)
 80008d0:	f7ff fc4a 	bl	8000168 <DBUG_u8SendByte>
		return u8State;
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	e02d      	b.n	8000934 <u8CheckSetup+0x9c>
	}

	if(u8State == MA_STA_RUN_AUT2)
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	2b65      	cmp	r3, #101	; 0x65
 80008dc:	d108      	bne.n	80008f0 <u8CheckSetup+0x58>
	{
		u8PwmValueStepTemp = 0;
 80008de:	4b19      	ldr	r3, [pc, #100]	; (8000944 <u8CheckSetup+0xac>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	701a      	strb	r2, [r3, #0]
		DBUG_u8SendByte((uint8_t*)"A2OK\n", 5);
 80008e4:	2105      	movs	r1, #5
 80008e6:	4818      	ldr	r0, [pc, #96]	; (8000948 <u8CheckSetup+0xb0>)
 80008e8:	f7ff fc3e 	bl	8000168 <DBUG_u8SendByte>
		return u8State;
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	e021      	b.n	8000934 <u8CheckSetup+0x9c>
	}

	if(u8State == MA_STA_SET_SCH)
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	2bc8      	cmp	r3, #200	; 0xc8
 80008f4:	d106      	bne.n	8000904 <u8CheckSetup+0x6c>
	{
		DBUG_u8SendByte((uint8_t*)"SOK\n", 4);
 80008f6:	2104      	movs	r1, #4
 80008f8:	4814      	ldr	r0, [pc, #80]	; (800094c <u8CheckSetup+0xb4>)
 80008fa:	f7ff fc35 	bl	8000168 <DBUG_u8SendByte>
		return u8MachineRunState;
 80008fe:	4b14      	ldr	r3, [pc, #80]	; (8000950 <u8CheckSetup+0xb8>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	e017      	b.n	8000934 <u8CheckSetup+0x9c>
	}

	if(u8State == MA_STA_SET_SCH_UPD)
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	2bc9      	cmp	r3, #201	; 0xc9
 8000908:	d106      	bne.n	8000918 <u8CheckSetup+0x80>
	{
		DBUG_u8SendByte((uint8_t*)"SROK\n", 5);
 800090a:	2105      	movs	r1, #5
 800090c:	4811      	ldr	r0, [pc, #68]	; (8000954 <u8CheckSetup+0xbc>)
 800090e:	f7ff fc2b 	bl	8000168 <DBUG_u8SendByte>
		return u8MachineRunState;
 8000912:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <u8CheckSetup+0xb8>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	e00d      	b.n	8000934 <u8CheckSetup+0x9c>
	}

	if(u8State == MA_STA_SET_SCH_END)
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	2bca      	cmp	r3, #202	; 0xca
 800091c:	d109      	bne.n	8000932 <u8CheckSetup+0x9a>
	{
		DBUG_u8SendByte((uint8_t*)"SEOK\n", 5);
 800091e:	2105      	movs	r1, #5
 8000920:	480d      	ldr	r0, [pc, #52]	; (8000958 <u8CheckSetup+0xc0>)
 8000922:	f7ff fc21 	bl	8000168 <DBUG_u8SendByte>
		NVM_vStorageSchedulerData(&stSchedulerData);
 8000926:	480d      	ldr	r0, [pc, #52]	; (800095c <u8CheckSetup+0xc4>)
 8000928:	f000 f92f 	bl	8000b8a <NVM_vStorageSchedulerData>
		return u8MachineRunState;
 800092c:	4b08      	ldr	r3, [pc, #32]	; (8000950 <u8CheckSetup+0xb8>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	e000      	b.n	8000934 <u8CheckSetup+0x9c>
	}
	return 0;
 8000932:	2300      	movs	r3, #0
}
 8000934:	4618      	mov	r0, r3
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	08005d40 	.word	0x08005d40
 8000940:	08005d48 	.word	0x08005d48
 8000944:	20000220 	.word	0x20000220
 8000948:	08005d50 	.word	0x08005d50
 800094c:	08005d58 	.word	0x08005d58
 8000950:	200003e8 	.word	0x200003e8
 8000954:	08005d60 	.word	0x08005d60
 8000958:	08005d68 	.word	0x08005d68
 800095c:	200003f0 	.word	0x200003f0

08000960 <vRun>:
 *
 * @pre
 * @post
 */
void vRun(uint8_t u8State)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	71fb      	strb	r3, [r7, #7]
	uint16_t u16Temp;
	if(u8State == MA_STA_RUN_MAN_LED)
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	2b0b      	cmp	r3, #11
 800096e:	d13e      	bne.n	80009ee <vRun+0x8e>
	{
		pu8DataCmd = DBUG_pu8GetDataCmd();
 8000970:	f7ff fe80 	bl	8000674 <DBUG_pu8GetDataCmd>
 8000974:	4603      	mov	r3, r0
 8000976:	4a36      	ldr	r2, [pc, #216]	; (8000a50 <vRun+0xf0>)
 8000978:	6013      	str	r3, [r2, #0]
		if(pu8DataCmd[0] == 0x01 && pu8DataCmd[1] == 0x00)
 800097a:	4b35      	ldr	r3, [pc, #212]	; (8000a50 <vRun+0xf0>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d108      	bne.n	8000996 <vRun+0x36>
 8000984:	4b32      	ldr	r3, [pc, #200]	; (8000a50 <vRun+0xf0>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	3301      	adds	r3, #1
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d102      	bne.n	8000996 <vRun+0x36>
		{
			GPIO_u8Led1Off();
 8000990:	f7ff fe8f 	bl	80006b2 <GPIO_u8Led1Off>
 8000994:	e028      	b.n	80009e8 <vRun+0x88>
		}
		else if(pu8DataCmd[0] == 0x01 && pu8DataCmd[1] == 0x01)
 8000996:	4b2e      	ldr	r3, [pc, #184]	; (8000a50 <vRun+0xf0>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d108      	bne.n	80009b2 <vRun+0x52>
 80009a0:	4b2b      	ldr	r3, [pc, #172]	; (8000a50 <vRun+0xf0>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	3301      	adds	r3, #1
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d102      	bne.n	80009b2 <vRun+0x52>
		{
			GPIO_u8Led1On();
 80009ac:	f7ff fe7a 	bl	80006a4 <GPIO_u8Led1On>
 80009b0:	e01a      	b.n	80009e8 <vRun+0x88>
		}
		else if(pu8DataCmd[0] == 0x02 && pu8DataCmd[1] == 0x00)
 80009b2:	4b27      	ldr	r3, [pc, #156]	; (8000a50 <vRun+0xf0>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	2b02      	cmp	r3, #2
 80009ba:	d108      	bne.n	80009ce <vRun+0x6e>
 80009bc:	4b24      	ldr	r3, [pc, #144]	; (8000a50 <vRun+0xf0>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	3301      	adds	r3, #1
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d102      	bne.n	80009ce <vRun+0x6e>
		{
			GPIO_u8Led2Off();
 80009c8:	f7ff fe81 	bl	80006ce <GPIO_u8Led2Off>
 80009cc:	e00c      	b.n	80009e8 <vRun+0x88>
		}
		else if(pu8DataCmd[0] == 0x02 && pu8DataCmd[1] == 0x01)
 80009ce:	4b20      	ldr	r3, [pc, #128]	; (8000a50 <vRun+0xf0>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b02      	cmp	r3, #2
 80009d6:	d107      	bne.n	80009e8 <vRun+0x88>
 80009d8:	4b1d      	ldr	r3, [pc, #116]	; (8000a50 <vRun+0xf0>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	3301      	adds	r3, #1
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d101      	bne.n	80009e8 <vRun+0x88>
		{
			GPIO_u8Led2On();
 80009e4:	f7ff fe6c 	bl	80006c0 <GPIO_u8Led2On>
		}
		vMachineRunStateFlush();
 80009e8:	f000 f8be 	bl	8000b68 <vMachineRunStateFlush>
	}
	else if(u8State == MA_STA_RUN_AUT2)
	{
		vAutoControl2();
	}
}
 80009ec:	e02c      	b.n	8000a48 <vRun+0xe8>
	else if(u8State == MA_STA_RUN_MAN_PWM)
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	2b0c      	cmp	r3, #12
 80009f2:	d11e      	bne.n	8000a32 <vRun+0xd2>
		pu8DataCmd = DBUG_pu8GetDataCmd();
 80009f4:	f7ff fe3e 	bl	8000674 <DBUG_pu8GetDataCmd>
 80009f8:	4603      	mov	r3, r0
 80009fa:	4a15      	ldr	r2, [pc, #84]	; (8000a50 <vRun+0xf0>)
 80009fc:	6013      	str	r3, [r2, #0]
		u16Temp = (uint16_t)pu8DataCmd[1];
 80009fe:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <vRun+0xf0>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	3301      	adds	r3, #1
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	81fb      	strh	r3, [r7, #14]
		u16Temp = (u16Temp << 8) + pu8DataCmd[2];
 8000a08:	89fb      	ldrh	r3, [r7, #14]
 8000a0a:	021b      	lsls	r3, r3, #8
 8000a0c:	b29a      	uxth	r2, r3
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <vRun+0xf0>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	3302      	adds	r3, #2
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	4413      	add	r3, r2
 8000a1a:	81fb      	strh	r3, [r7, #14]
		LIPWM_vSetValue(pu8DataCmd[0], u16Temp);
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <vRun+0xf0>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	89fa      	ldrh	r2, [r7, #14]
 8000a24:	4611      	mov	r1, r2
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff fe82 	bl	8000730 <LIPWM_vSetValue>
		vMachineRunStateFlush();
 8000a2c:	f000 f89c 	bl	8000b68 <vMachineRunStateFlush>
}
 8000a30:	e00a      	b.n	8000a48 <vRun+0xe8>
	else if(u8State == MA_STA_RUN_AUT1)
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	2b64      	cmp	r3, #100	; 0x64
 8000a36:	d102      	bne.n	8000a3e <vRun+0xde>
		vAutoControl1();
 8000a38:	f000 f80c 	bl	8000a54 <vAutoControl1>
}
 8000a3c:	e004      	b.n	8000a48 <vRun+0xe8>
	else if(u8State == MA_STA_RUN_AUT2)
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	2b65      	cmp	r3, #101	; 0x65
 8000a42:	d101      	bne.n	8000a48 <vRun+0xe8>
		vAutoControl2();
 8000a44:	f000 f840 	bl	8000ac8 <vAutoControl2>
}
 8000a48:	bf00      	nop
 8000a4a:	3710      	adds	r7, #16
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	2000021c 	.word	0x2000021c

08000a54 <vAutoControl1>:
 *
 * @pre
 * @post
 */
void vAutoControl1()
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
	uint16_t u16AdcValue = LIAMBS_u16Read();
 8000a5a:	f7ff fe54 	bl	8000706 <LIAMBS_u16Read>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	80fb      	strh	r3, [r7, #6]
	if(u16AdcValue < 1000)
 8000a62:	88fb      	ldrh	r3, [r7, #6]
 8000a64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a68:	d204      	bcs.n	8000a74 <vAutoControl1+0x20>
	{
		LIPWM_vSetValue(100, 0);
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	2064      	movs	r0, #100	; 0x64
 8000a6e:	f7ff fe5f 	bl	8000730 <LIPWM_vSetValue>
	}
	else if(u16AdcValue > 3000)
	{
		LIPWM_vSetValue(25, 0);
	}
}
 8000a72:	e024      	b.n	8000abe <vAutoControl1+0x6a>
	else if((u16AdcValue >= 1000) && (u16AdcValue < 2000))
 8000a74:	88fb      	ldrh	r3, [r7, #6]
 8000a76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a7a:	d308      	bcc.n	8000a8e <vAutoControl1+0x3a>
 8000a7c:	88fb      	ldrh	r3, [r7, #6]
 8000a7e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000a82:	d204      	bcs.n	8000a8e <vAutoControl1+0x3a>
		LIPWM_vSetValue(75, 0);
 8000a84:	2100      	movs	r1, #0
 8000a86:	204b      	movs	r0, #75	; 0x4b
 8000a88:	f7ff fe52 	bl	8000730 <LIPWM_vSetValue>
 8000a8c:	e017      	b.n	8000abe <vAutoControl1+0x6a>
	else if((u16AdcValue >= 2000) && (u16AdcValue < 3000))
 8000a8e:	88fb      	ldrh	r3, [r7, #6]
 8000a90:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000a94:	d309      	bcc.n	8000aaa <vAutoControl1+0x56>
 8000a96:	88fb      	ldrh	r3, [r7, #6]
 8000a98:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d804      	bhi.n	8000aaa <vAutoControl1+0x56>
		LIPWM_vSetValue(50, 0);
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	2032      	movs	r0, #50	; 0x32
 8000aa4:	f7ff fe44 	bl	8000730 <LIPWM_vSetValue>
 8000aa8:	e009      	b.n	8000abe <vAutoControl1+0x6a>
	else if(u16AdcValue > 3000)
 8000aaa:	88fb      	ldrh	r3, [r7, #6]
 8000aac:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d904      	bls.n	8000abe <vAutoControl1+0x6a>
		LIPWM_vSetValue(25, 0);
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	2019      	movs	r0, #25
 8000ab8:	f7ff fe3a 	bl	8000730 <LIPWM_vSetValue>
}
 8000abc:	e7ff      	b.n	8000abe <vAutoControl1+0x6a>
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
	...

08000ac8 <vAutoControl2>:
 *
 * @pre
 * @post
 */
void vAutoControl2()
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
	RTC_vGetDateTime(&stRtcDateTime);
 8000acc:	481f      	ldr	r0, [pc, #124]	; (8000b4c <vAutoControl2+0x84>)
 8000ace:	f000 fe6c 	bl	80017aa <RTC_vGetDateTime>
	if(u8SecondTemp != stRtcDateTime.Seconds)
 8000ad2:	4b1e      	ldr	r3, [pc, #120]	; (8000b4c <vAutoControl2+0x84>)
 8000ad4:	789a      	ldrb	r2, [r3, #2]
 8000ad6:	4b1e      	ldr	r3, [pc, #120]	; (8000b50 <vAutoControl2+0x88>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	429a      	cmp	r2, r3
 8000adc:	d034      	beq.n	8000b48 <vAutoControl2+0x80>
	{
		u8SecondTemp = stRtcDateTime.Seconds;
 8000ade:	4b1b      	ldr	r3, [pc, #108]	; (8000b4c <vAutoControl2+0x84>)
 8000ae0:	789a      	ldrb	r2, [r3, #2]
 8000ae2:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <vAutoControl2+0x88>)
 8000ae4:	701a      	strb	r2, [r3, #0]
		u8Aut2StepTemp++;
 8000ae6:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <vAutoControl2+0x8c>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	3301      	adds	r3, #1
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <vAutoControl2+0x8c>)
 8000af0:	701a      	strb	r2, [r3, #0]
		if(u8Aut2StepTemp>=3)
 8000af2:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <vAutoControl2+0x8c>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	2b02      	cmp	r3, #2
 8000af8:	d926      	bls.n	8000b48 <vAutoControl2+0x80>
		{
			u8Aut2StepTemp = 0;
 8000afa:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <vAutoControl2+0x8c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	701a      	strb	r2, [r3, #0]

			u8PwmValueTemp = stSchedulerData.stSchedulerDataSlot[0].stSchedulerValue[u8PwmValueStepTemp].u8Value;
 8000b00:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <vAutoControl2+0x90>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	4619      	mov	r1, r3
 8000b06:	4a15      	ldr	r2, [pc, #84]	; (8000b5c <vAutoControl2+0x94>)
 8000b08:	460b      	mov	r3, r1
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	440b      	add	r3, r1
 8000b0e:	4413      	add	r3, r2
 8000b10:	3309      	adds	r3, #9
 8000b12:	781a      	ldrb	r2, [r3, #0]
 8000b14:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <vAutoControl2+0x98>)
 8000b16:	701a      	strb	r2, [r3, #0]
			u8PwmValueStepTemp++;
 8000b18:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <vAutoControl2+0x90>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <vAutoControl2+0x90>)
 8000b22:	701a      	strb	r2, [r3, #0]
			if(u8PwmValueStepTemp>=10)
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <vAutoControl2+0x90>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b09      	cmp	r3, #9
 8000b2a:	d902      	bls.n	8000b32 <vAutoControl2+0x6a>
				u8PwmValueStepTemp = 0;
 8000b2c:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <vAutoControl2+0x90>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	701a      	strb	r2, [r3, #0]

			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000b32:	2101      	movs	r1, #1
 8000b34:	480b      	ldr	r0, [pc, #44]	; (8000b64 <vAutoControl2+0x9c>)
 8000b36:	f002 fa64 	bl	8003002 <HAL_GPIO_TogglePin>

			LIPWM_vSetValue(u8PwmValueTemp, 2000);
 8000b3a:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <vAutoControl2+0x98>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff fdf4 	bl	8000730 <LIPWM_vSetValue>
//			u8PwmValueTemp+=10;
//			if(u8PwmValueTemp > 100)
//				u8PwmValueTemp = 0;
		}
	}
}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20000264 	.word	0x20000264
 8000b50:	2000032c 	.word	0x2000032c
 8000b54:	200002b8 	.word	0x200002b8
 8000b58:	20000220 	.word	0x20000220
 8000b5c:	200003f0 	.word	0x200003f0
 8000b60:	20000344 	.word	0x20000344
 8000b64:	40010c00 	.word	0x40010c00

08000b68 <vMachineRunStateFlush>:
 *
 * @pre
 * @post
 */
void vMachineRunStateFlush()
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
	u8MachineRunState = MA_STA_NOP;
 8000b6c:	4b03      	ldr	r3, [pc, #12]	; (8000b7c <vMachineRunStateFlush+0x14>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	701a      	strb	r2, [r3, #0]
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bc80      	pop	{r7}
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	200003e8 	.word	0x200003e8

08000b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b84:	b672      	cpsid	i
}
 8000b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <Error_Handler+0x8>

08000b8a <NVM_vStorageSchedulerData>:
 * @pre
 * @post
 * @param pstSchedulerData
 */
void NVM_vStorageSchedulerData(Scheduler_DataTypeDef* pstSchedulerData)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b082      	sub	sp, #8
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
	PHY_vStorageSchedulerData(pstSchedulerData);
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f000 fcb8 	bl	8001508 <PHY_vStorageSchedulerData>
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <PHY_u8Uart3Init>:
 * @pre
 * @post
 * @return
 */
uint8_t PHY_u8Uart3Init()
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
	huart3.Instance = USART3;
 8000ba4:	4b11      	ldr	r3, [pc, #68]	; (8000bec <PHY_u8Uart3Init+0x4c>)
 8000ba6:	4a12      	ldr	r2, [pc, #72]	; (8000bf0 <PHY_u8Uart3Init+0x50>)
 8000ba8:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 8000baa:	4b10      	ldr	r3, [pc, #64]	; (8000bec <PHY_u8Uart3Init+0x4c>)
 8000bac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000bb0:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <PHY_u8Uart3Init+0x4c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <PHY_u8Uart3Init+0x4c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <PHY_u8Uart3Init+0x4c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000bc4:	4b09      	ldr	r3, [pc, #36]	; (8000bec <PHY_u8Uart3Init+0x4c>)
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bca:	4b08      	ldr	r3, [pc, #32]	; (8000bec <PHY_u8Uart3Init+0x4c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <PHY_u8Uart3Init+0x4c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bd6:	4805      	ldr	r0, [pc, #20]	; (8000bec <PHY_u8Uart3Init+0x4c>)
 8000bd8:	f004 fcdc 	bl	8005594 <HAL_UART_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <PHY_u8Uart3Init+0x46>
	{
		Error_Handler();
 8000be2:	f7ff ffcd 	bl	8000b80 <Error_Handler>
	}
	return HAL_OK;
 8000be6:	2300      	movs	r3, #0
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000224 	.word	0x20000224
 8000bf0:	40004800 	.word	0x40004800

08000bf4 <PHY_u8Timer2Init>:
 * @pre
 * @post
 * @return
 */
uint8_t PHY_u8Timer2Init()
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bfa:	f107 0308 	add.w	r3, r7, #8
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c08:	463b      	mov	r3, r7
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000c10:	4b1e      	ldr	r3, [pc, #120]	; (8000c8c <PHY_u8Timer2Init+0x98>)
 8000c12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c16:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 1000-1;
 8000c18:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <PHY_u8Timer2Init+0x98>)
 8000c1a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c1e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c20:	4b1a      	ldr	r3, [pc, #104]	; (8000c8c <PHY_u8Timer2Init+0x98>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 72-1;
 8000c26:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <PHY_u8Timer2Init+0x98>)
 8000c28:	2247      	movs	r2, #71	; 0x47
 8000c2a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c2c:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <PHY_u8Timer2Init+0x98>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c32:	4b16      	ldr	r3, [pc, #88]	; (8000c8c <PHY_u8Timer2Init+0x98>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c38:	4814      	ldr	r0, [pc, #80]	; (8000c8c <PHY_u8Timer2Init+0x98>)
 8000c3a:	f003 fd4d 	bl	80046d8 <HAL_TIM_Base_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <PHY_u8Timer2Init+0x54>
	{
		Error_Handler();
 8000c44:	f7ff ff9c 	bl	8000b80 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c4c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c4e:	f107 0308 	add.w	r3, r7, #8
 8000c52:	4619      	mov	r1, r3
 8000c54:	480d      	ldr	r0, [pc, #52]	; (8000c8c <PHY_u8Timer2Init+0x98>)
 8000c56:	f004 f8a1 	bl	8004d9c <HAL_TIM_ConfigClockSource>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <PHY_u8Timer2Init+0x70>
	{
		Error_Handler();
 8000c60:	f7ff ff8e 	bl	8000b80 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c64:	2300      	movs	r3, #0
 8000c66:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c6c:	463b      	mov	r3, r7
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4806      	ldr	r0, [pc, #24]	; (8000c8c <PHY_u8Timer2Init+0x98>)
 8000c72:	f004 fc1f 	bl	80054b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <PHY_u8Timer2Init+0x8c>
	{
		Error_Handler();
 8000c7c:	f7ff ff80 	bl	8000b80 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	return HAL_OK;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200003a0 	.word	0x200003a0

08000c90 <PHY_u8Timer2EnbInterrupt>:
 * @pre
 * @post
 * @return
 */
uint8_t PHY_u8Timer2EnbInterrupt()
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8000c94:	4802      	ldr	r0, [pc, #8]	; (8000ca0 <PHY_u8Timer2EnbInterrupt+0x10>)
 8000c96:	f003 fd6f 	bl	8004778 <HAL_TIM_Base_Start_IT>
	return HAL_OK;
 8000c9a:	2300      	movs	r3, #0
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	200003a0 	.word	0x200003a0

08000ca4 <PHY_u8Timer3Init>:
 * @pre
 * @post
 * @return
 */
uint8_t PHY_u8Timer3Init()
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08e      	sub	sp, #56	; 0x38
 8000ca8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000caa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
 8000cb6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cb8:	f107 0320 	add.w	r3, r7, #32
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
 8000cd0:	615a      	str	r2, [r3, #20]
 8000cd2:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000cd4:	4b2d      	ldr	r3, [pc, #180]	; (8000d8c <PHY_u8Timer3Init+0xe8>)
 8000cd6:	4a2e      	ldr	r2, [pc, #184]	; (8000d90 <PHY_u8Timer3Init+0xec>)
 8000cd8:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 360-1;
 8000cda:	4b2c      	ldr	r3, [pc, #176]	; (8000d8c <PHY_u8Timer3Init+0xe8>)
 8000cdc:	f240 1267 	movw	r2, #359	; 0x167
 8000ce0:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce2:	4b2a      	ldr	r3, [pc, #168]	; (8000d8c <PHY_u8Timer3Init+0xe8>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 100-1;
 8000ce8:	4b28      	ldr	r3, [pc, #160]	; (8000d8c <PHY_u8Timer3Init+0xe8>)
 8000cea:	2263      	movs	r2, #99	; 0x63
 8000cec:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cee:	4b27      	ldr	r3, [pc, #156]	; (8000d8c <PHY_u8Timer3Init+0xe8>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cf4:	4b25      	ldr	r3, [pc, #148]	; (8000d8c <PHY_u8Timer3Init+0xe8>)
 8000cf6:	2280      	movs	r2, #128	; 0x80
 8000cf8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cfa:	4824      	ldr	r0, [pc, #144]	; (8000d8c <PHY_u8Timer3Init+0xe8>)
 8000cfc:	f003 fcec 	bl	80046d8 <HAL_TIM_Base_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <PHY_u8Timer3Init+0x66>
	{
		Error_Handler();
 8000d06:	f7ff ff3b 	bl	8000b80 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d0e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d14:	4619      	mov	r1, r3
 8000d16:	481d      	ldr	r0, [pc, #116]	; (8000d8c <PHY_u8Timer3Init+0xe8>)
 8000d18:	f004 f840 	bl	8004d9c <HAL_TIM_ConfigClockSource>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <PHY_u8Timer3Init+0x82>
	{
		Error_Handler();
 8000d22:	f7ff ff2d 	bl	8000b80 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d26:	4819      	ldr	r0, [pc, #100]	; (8000d8c <PHY_u8Timer3Init+0xe8>)
 8000d28:	f003 fd78 	bl	800481c <HAL_TIM_PWM_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <PHY_u8Timer3Init+0x92>
	{
		Error_Handler();
 8000d32:	f7ff ff25 	bl	8000b80 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d36:	2300      	movs	r3, #0
 8000d38:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d3e:	f107 0320 	add.w	r3, r7, #32
 8000d42:	4619      	mov	r1, r3
 8000d44:	4811      	ldr	r0, [pc, #68]	; (8000d8c <PHY_u8Timer3Init+0xe8>)
 8000d46:	f004 fbb5 	bl	80054b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <PHY_u8Timer3Init+0xb0>
	{
		Error_Handler();
 8000d50:	f7ff ff16 	bl	8000b80 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d54:	2360      	movs	r3, #96	; 0x60
 8000d56:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	2200      	movs	r2, #0
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4808      	ldr	r0, [pc, #32]	; (8000d8c <PHY_u8Timer3Init+0xe8>)
 8000d6c:	f003 ff58 	bl	8004c20 <HAL_TIM_PWM_ConfigChannel>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <PHY_u8Timer3Init+0xd6>
	{
		Error_Handler();
 8000d76:	f7ff ff03 	bl	8000b80 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000d7a:	4804      	ldr	r0, [pc, #16]	; (8000d8c <PHY_u8Timer3Init+0xe8>)
 8000d7c:	f000 fdf8 	bl	8001970 <HAL_TIM_MspPostInit>
	return HAL_OK;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3738      	adds	r7, #56	; 0x38
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	2000026c 	.word	0x2000026c
 8000d90:	40000400 	.word	0x40000400

08000d94 <PHY_u8Timer3PwmStart>:
 * @pre
 * @post
 * @return
 */
uint8_t PHY_u8Timer3PwmStart()
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
	htim3.Instance->CCR1 = 10;
 8000d98:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <PHY_u8Timer3PwmStart+0x1c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	220a      	movs	r2, #10
 8000d9e:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000da0:	2100      	movs	r1, #0
 8000da2:	4803      	ldr	r0, [pc, #12]	; (8000db0 <PHY_u8Timer3PwmStart+0x1c>)
 8000da4:	f003 fd92 	bl	80048cc <HAL_TIM_PWM_Start>
	return HAL_OK;
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	2000026c 	.word	0x2000026c

08000db4 <PHY_vTimer3SetPwmValue>:
 * @post
 * @param u8Value
 * @param u16TimeSmooth
 */
void PHY_vTimer3SetPwmValue(uint8_t u8Value, uint16_t u16TimeSmooth)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	460a      	mov	r2, r1
 8000dbe:	71fb      	strb	r3, [r7, #7]
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	80bb      	strh	r3, [r7, #4]
	u8CurrentPwmValue = (uint8_t)htim3.Instance->CCR1;
 8000dc4:	4b25      	ldr	r3, [pc, #148]	; (8000e5c <PHY_vTimer3SetPwmValue+0xa8>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	4b24      	ldr	r3, [pc, #144]	; (8000e60 <PHY_vTimer3SetPwmValue+0xac>)
 8000dce:	701a      	strb	r2, [r3, #0]
	u8DestPwmValue = u8Value;
 8000dd0:	4a24      	ldr	r2, [pc, #144]	; (8000e64 <PHY_vTimer3SetPwmValue+0xb0>)
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	7013      	strb	r3, [r2, #0]
	u16SmoothPwmStepCount = 0;
 8000dd6:	4b24      	ldr	r3, [pc, #144]	; (8000e68 <PHY_vTimer3SetPwmValue+0xb4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	801a      	strh	r2, [r3, #0]

	if(u8CurrentPwmValue == u8DestPwmValue)
 8000ddc:	4b20      	ldr	r3, [pc, #128]	; (8000e60 <PHY_vTimer3SetPwmValue+0xac>)
 8000dde:	781a      	ldrb	r2, [r3, #0]
 8000de0:	4b20      	ldr	r3, [pc, #128]	; (8000e64 <PHY_vTimer3SetPwmValue+0xb0>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d103      	bne.n	8000df0 <PHY_vTimer3SetPwmValue+0x3c>
		u8SmoothPwmActive = PWM_NOP;
 8000de8:	4b20      	ldr	r3, [pc, #128]	; (8000e6c <PHY_vTimer3SetPwmValue+0xb8>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	701a      	strb	r2, [r3, #0]
		{
			u8SmoothPwmActive = PWM_NOP;
			htim3.Instance->CCR1 = (uint32_t)u8Value;
		}
	}
}
 8000dee:	e02f      	b.n	8000e50 <PHY_vTimer3SetPwmValue+0x9c>
		if(u8CurrentPwmValue > u8DestPwmValue)
 8000df0:	4b1b      	ldr	r3, [pc, #108]	; (8000e60 <PHY_vTimer3SetPwmValue+0xac>)
 8000df2:	781a      	ldrb	r2, [r3, #0]
 8000df4:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <PHY_vTimer3SetPwmValue+0xb0>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d90f      	bls.n	8000e1c <PHY_vTimer3SetPwmValue+0x68>
			u16SmoothPwmStep = u16TimeSmooth/(u8CurrentPwmValue - u8DestPwmValue);
 8000dfc:	88ba      	ldrh	r2, [r7, #4]
 8000dfe:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <PHY_vTimer3SetPwmValue+0xac>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	4619      	mov	r1, r3
 8000e04:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <PHY_vTimer3SetPwmValue+0xb0>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	1acb      	subs	r3, r1, r3
 8000e0a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e0e:	b29a      	uxth	r2, r3
 8000e10:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <PHY_vTimer3SetPwmValue+0xbc>)
 8000e12:	801a      	strh	r2, [r3, #0]
			u8SmoothPwmActive = PWM_DEC;
 8000e14:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <PHY_vTimer3SetPwmValue+0xb8>)
 8000e16:	2202      	movs	r2, #2
 8000e18:	701a      	strb	r2, [r3, #0]
 8000e1a:	e00e      	b.n	8000e3a <PHY_vTimer3SetPwmValue+0x86>
			u16SmoothPwmStep = u16TimeSmooth/(u8DestPwmValue - u8CurrentPwmValue);
 8000e1c:	88ba      	ldrh	r2, [r7, #4]
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <PHY_vTimer3SetPwmValue+0xb0>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	4619      	mov	r1, r3
 8000e24:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <PHY_vTimer3SetPwmValue+0xac>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	1acb      	subs	r3, r1, r3
 8000e2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <PHY_vTimer3SetPwmValue+0xbc>)
 8000e32:	801a      	strh	r2, [r3, #0]
			u8SmoothPwmActive = PWM_INC;
 8000e34:	4b0d      	ldr	r3, [pc, #52]	; (8000e6c <PHY_vTimer3SetPwmValue+0xb8>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	701a      	strb	r2, [r3, #0]
		if(u16SmoothPwmStep <= 0)
 8000e3a:	4b0d      	ldr	r3, [pc, #52]	; (8000e70 <PHY_vTimer3SetPwmValue+0xbc>)
 8000e3c:	881b      	ldrh	r3, [r3, #0]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d106      	bne.n	8000e50 <PHY_vTimer3SetPwmValue+0x9c>
			u8SmoothPwmActive = PWM_NOP;
 8000e42:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <PHY_vTimer3SetPwmValue+0xb8>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	701a      	strb	r2, [r3, #0]
			htim3.Instance->CCR1 = (uint32_t)u8Value;
 8000e48:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <PHY_vTimer3SetPwmValue+0xa8>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	79fa      	ldrb	r2, [r7, #7]
 8000e4e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc80      	pop	{r7}
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	2000026c 	.word	0x2000026c
 8000e60:	200005b7 	.word	0x200005b7
 8000e64:	200005bb 	.word	0x200005bb
 8000e68:	200005b4 	.word	0x200005b4
 8000e6c:	200004e9 	.word	0x200004e9
 8000e70:	200004e6 	.word	0x200004e6

08000e74 <PHY_u8ButtonGpioInit>:
 * @pre
 * @post
 * @return
 */
uint8_t PHY_u8ButtonGpioInit()
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7a:	f107 0308 	add.w	r3, r7, #8
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]
 8000e86:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e88:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <PHY_u8ButtonGpioInit+0x50>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	4a0d      	ldr	r2, [pc, #52]	; (8000ec4 <PHY_u8ButtonGpioInit+0x50>)
 8000e8e:	f043 0308 	orr.w	r3, r3, #8
 8000e92:	6193      	str	r3, [r2, #24]
 8000e94:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <PHY_u8ButtonGpioInit+0x50>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	f003 0308 	and.w	r3, r3, #8
 8000e9c:	607b      	str	r3, [r7, #4]
 8000e9e:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pins : BT_01_Pin BT_02_Pin */
	GPIO_InitStruct.Pin = BT_01_Pin|BT_02_Pin;
 8000ea0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000ea4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eae:	f107 0308 	add.w	r3, r7, #8
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4804      	ldr	r0, [pc, #16]	; (8000ec8 <PHY_u8ButtonGpioInit+0x54>)
 8000eb6:	f001 fef1 	bl	8002c9c <HAL_GPIO_Init>

	return HAL_OK;
 8000eba:	2300      	movs	r3, #0
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	40010c00 	.word	0x40010c00

08000ecc <PHY_u8LedGpioInit>:
 * @pre
 * @post
 * @return
 */
uint8_t PHY_u8LedGpioInit()
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed2:	f107 0308 	add.w	r3, r7, #8
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <PHY_u8LedGpioInit+0x5c>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	4a10      	ldr	r2, [pc, #64]	; (8000f28 <PHY_u8LedGpioInit+0x5c>)
 8000ee6:	f043 0308 	orr.w	r3, r3, #8
 8000eea:	6193      	str	r3, [r2, #24]
 8000eec:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <PHY_u8LedGpioInit+0x5c>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	f003 0308 	and.w	r3, r3, #8
 8000ef4:	607b      	str	r3, [r7, #4]
 8000ef6:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	2103      	movs	r1, #3
 8000efc:	480b      	ldr	r0, [pc, #44]	; (8000f2c <PHY_u8LedGpioInit+0x60>)
 8000efe:	f002 f868 	bl	8002fd2 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LED1_Pin LED2_Pin */
	GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000f02:	2303      	movs	r3, #3
 8000f04:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f06:	2301      	movs	r3, #1
 8000f08:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f12:	f107 0308 	add.w	r3, r7, #8
 8000f16:	4619      	mov	r1, r3
 8000f18:	4804      	ldr	r0, [pc, #16]	; (8000f2c <PHY_u8LedGpioInit+0x60>)
 8000f1a:	f001 febf 	bl	8002c9c <HAL_GPIO_Init>

	return HAL_OK;
 8000f1e:	2300      	movs	r3, #0
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	40010c00 	.word	0x40010c00

08000f30 <PHY_u8Led1On>:
 * @pre
 * @post
 * @return
 */
uint8_t PHY_u8Led1On()
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000f34:	2200      	movs	r2, #0
 8000f36:	2101      	movs	r1, #1
 8000f38:	4802      	ldr	r0, [pc, #8]	; (8000f44 <PHY_u8Led1On+0x14>)
 8000f3a:	f002 f84a 	bl	8002fd2 <HAL_GPIO_WritePin>
	return HAL_OK;
 8000f3e:	2300      	movs	r3, #0
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40010c00 	.word	0x40010c00

08000f48 <PHY_u8Led1Off>:
 * @pre
 * @post
 * @return
 */
uint8_t PHY_u8Led1Off()
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	2101      	movs	r1, #1
 8000f50:	4802      	ldr	r0, [pc, #8]	; (8000f5c <PHY_u8Led1Off+0x14>)
 8000f52:	f002 f83e 	bl	8002fd2 <HAL_GPIO_WritePin>
	return HAL_OK;
 8000f56:	2300      	movs	r3, #0
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40010c00 	.word	0x40010c00

08000f60 <PHY_u8Led2On>:
 * @pre
 * @post
 * @return
 */
uint8_t PHY_u8Led2On()
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	2102      	movs	r1, #2
 8000f68:	4802      	ldr	r0, [pc, #8]	; (8000f74 <PHY_u8Led2On+0x14>)
 8000f6a:	f002 f832 	bl	8002fd2 <HAL_GPIO_WritePin>
	return HAL_OK;
 8000f6e:	2300      	movs	r3, #0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40010c00 	.word	0x40010c00

08000f78 <PHY_u8Led2Off>:
 * @pre
 * @post
 * @return
 */
uint8_t PHY_u8Led2Off()
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	2102      	movs	r1, #2
 8000f80:	4802      	ldr	r0, [pc, #8]	; (8000f8c <PHY_u8Led2Off+0x14>)
 8000f82:	f002 f826 	bl	8002fd2 <HAL_GPIO_WritePin>
	return HAL_OK;
 8000f86:	2300      	movs	r3, #0
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40010c00 	.word	0x40010c00

08000f90 <PHY_u8RtcInit>:
 * @pre
 * @post
 * @return
 */
uint8_t PHY_u8RtcInit()
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = {0};
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	2100      	movs	r1, #0
 8000f9a:	460a      	mov	r2, r1
 8000f9c:	801a      	strh	r2, [r3, #0]
 8000f9e:	460a      	mov	r2, r1
 8000fa0:	709a      	strb	r2, [r3, #2]
	RTC_DateTypeDef DateToUpdate = {0};
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	603b      	str	r3, [r7, #0]
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	*/
	hrtc.Instance = RTC;
 8000fa6:	4b1e      	ldr	r3, [pc, #120]	; (8001020 <PHY_u8RtcInit+0x90>)
 8000fa8:	4a1e      	ldr	r2, [pc, #120]	; (8001024 <PHY_u8RtcInit+0x94>)
 8000faa:	601a      	str	r2, [r3, #0]
	hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000fac:	4b1c      	ldr	r3, [pc, #112]	; (8001020 <PHY_u8RtcInit+0x90>)
 8000fae:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb2:	605a      	str	r2, [r3, #4]
	hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000fb4:	4b1a      	ldr	r3, [pc, #104]	; (8001020 <PHY_u8RtcInit+0x90>)
 8000fb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fba:	609a      	str	r2, [r3, #8]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000fbc:	4818      	ldr	r0, [pc, #96]	; (8001020 <PHY_u8RtcInit+0x90>)
 8000fbe:	f002 fdd9 	bl	8003b74 <HAL_RTC_Init>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <PHY_u8RtcInit+0x3c>
	{
		Error_Handler();
 8000fc8:	f7ff fdda 	bl	8000b80 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	*/
	sTime.Hours = 0x11;
 8000fcc:	2311      	movs	r3, #17
 8000fce:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x25;
 8000fd0:	2325      	movs	r3, #37	; 0x25
 8000fd2:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	71bb      	strb	r3, [r7, #6]

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000fd8:	1d3b      	adds	r3, r7, #4
 8000fda:	2201      	movs	r2, #1
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4810      	ldr	r0, [pc, #64]	; (8001020 <PHY_u8RtcInit+0x90>)
 8000fe0:	f002 fe5e 	bl	8003ca0 <HAL_RTC_SetTime>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <PHY_u8RtcInit+0x5e>
	{
		Error_Handler();
 8000fea:	f7ff fdc9 	bl	8000b80 <Error_Handler>
	}
	DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	703b      	strb	r3, [r7, #0]
	DateToUpdate.Month = RTC_MONTH_JUNE;
 8000ff2:	2306      	movs	r3, #6
 8000ff4:	707b      	strb	r3, [r7, #1]
	DateToUpdate.Date = 0x21;
 8000ff6:	2321      	movs	r3, #33	; 0x21
 8000ff8:	70bb      	strb	r3, [r7, #2]
	DateToUpdate.Year = 0x21;
 8000ffa:	2321      	movs	r3, #33	; 0x21
 8000ffc:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000ffe:	463b      	mov	r3, r7
 8001000:	2201      	movs	r2, #1
 8001002:	4619      	mov	r1, r3
 8001004:	4806      	ldr	r0, [pc, #24]	; (8001020 <PHY_u8RtcInit+0x90>)
 8001006:	f002 ffbb 	bl	8003f80 <HAL_RTC_SetDate>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <PHY_u8RtcInit+0x84>
	{
		Error_Handler();
 8001010:	f7ff fdb6 	bl	8000b80 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */
	return HAL_OK;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000330 	.word	0x20000330
 8001024:	40002800 	.word	0x40002800

08001028 <PHY_vGetDateTime>:
 * @pre
 * @post
 * @param hRTC_DateTime
 */
void PHY_vGetDateTime(RTC_DateTimeTypedef* hRTC_DateTime)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef hRTC_Date = {0};
 8001030:	2300      	movs	r3, #0
 8001032:	60fb      	str	r3, [r7, #12]
	RTC_TimeTypeDef hRTC_Time = {0};
 8001034:	f107 0308 	add.w	r3, r7, #8
 8001038:	2100      	movs	r1, #0
 800103a:	460a      	mov	r2, r1
 800103c:	801a      	strh	r2, [r3, #0]
 800103e:	460a      	mov	r2, r1
 8001040:	709a      	strb	r2, [r3, #2]

	HAL_RTC_GetDate(&hrtc, &hRTC_Date, RTC_FORMAT_BIN);
 8001042:	f107 030c 	add.w	r3, r7, #12
 8001046:	2200      	movs	r2, #0
 8001048:	4619      	mov	r1, r3
 800104a:	483f      	ldr	r0, [pc, #252]	; (8001148 <PHY_vGetDateTime+0x120>)
 800104c:	f003 f84e 	bl	80040ec <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc, &hRTC_Time, RTC_FORMAT_BIN);
 8001050:	f107 0308 	add.w	r3, r7, #8
 8001054:	2200      	movs	r2, #0
 8001056:	4619      	mov	r1, r3
 8001058:	483b      	ldr	r0, [pc, #236]	; (8001148 <PHY_vGetDateTime+0x120>)
 800105a:	f002 feb9 	bl	8003dd0 <HAL_RTC_GetTime>

	hRTC_DateTime->Hours = (hRTC_Time.Hours >> 4)*10 + (hRTC_Time.Hours & 0x0f);
 800105e:	7a3b      	ldrb	r3, [r7, #8]
 8001060:	091b      	lsrs	r3, r3, #4
 8001062:	b2db      	uxtb	r3, r3
 8001064:	461a      	mov	r2, r3
 8001066:	0092      	lsls	r2, r2, #2
 8001068:	4413      	add	r3, r2
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	b2da      	uxtb	r2, r3
 800106e:	7a3b      	ldrb	r3, [r7, #8]
 8001070:	f003 030f 	and.w	r3, r3, #15
 8001074:	b2db      	uxtb	r3, r3
 8001076:	4413      	add	r3, r2
 8001078:	b2da      	uxtb	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	701a      	strb	r2, [r3, #0]
	hRTC_DateTime->Minutes = (hRTC_Time.Minutes >> 4)*10 + (hRTC_Time.Minutes & 0x0f);
 800107e:	7a7b      	ldrb	r3, [r7, #9]
 8001080:	091b      	lsrs	r3, r3, #4
 8001082:	b2db      	uxtb	r3, r3
 8001084:	461a      	mov	r2, r3
 8001086:	0092      	lsls	r2, r2, #2
 8001088:	4413      	add	r3, r2
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	b2da      	uxtb	r2, r3
 800108e:	7a7b      	ldrb	r3, [r7, #9]
 8001090:	f003 030f 	and.w	r3, r3, #15
 8001094:	b2db      	uxtb	r3, r3
 8001096:	4413      	add	r3, r2
 8001098:	b2da      	uxtb	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	705a      	strb	r2, [r3, #1]
	hRTC_DateTime->Seconds = (hRTC_Time.Seconds >> 4)*10 + (hRTC_Time.Seconds & 0x0f);
 800109e:	7abb      	ldrb	r3, [r7, #10]
 80010a0:	091b      	lsrs	r3, r3, #4
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	461a      	mov	r2, r3
 80010a6:	0092      	lsls	r2, r2, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	7abb      	ldrb	r3, [r7, #10]
 80010b0:	f003 030f 	and.w	r3, r3, #15
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	4413      	add	r3, r2
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	709a      	strb	r2, [r3, #2]

	hRTC_DateTime->WeekDay = (hRTC_Date.WeekDay >> 4)*10 + (hRTC_Date.WeekDay & 0x0f);
 80010be:	7b3b      	ldrb	r3, [r7, #12]
 80010c0:	091b      	lsrs	r3, r3, #4
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	461a      	mov	r2, r3
 80010c6:	0092      	lsls	r2, r2, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	7b3b      	ldrb	r3, [r7, #12]
 80010d0:	f003 030f 	and.w	r3, r3, #15
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	4413      	add	r3, r2
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	70da      	strb	r2, [r3, #3]
	hRTC_DateTime->Month = (hRTC_Date.Month >> 4)*10 + (hRTC_Date.Month & 0x0f);
 80010de:	7b7b      	ldrb	r3, [r7, #13]
 80010e0:	091b      	lsrs	r3, r3, #4
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	461a      	mov	r2, r3
 80010e6:	0092      	lsls	r2, r2, #2
 80010e8:	4413      	add	r3, r2
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	7b7b      	ldrb	r3, [r7, #13]
 80010f0:	f003 030f 	and.w	r3, r3, #15
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	4413      	add	r3, r2
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	711a      	strb	r2, [r3, #4]
	hRTC_DateTime->Date = (hRTC_Date.Date >> 4)*10 + (hRTC_Date.Date & 0x0f);
 80010fe:	7bbb      	ldrb	r3, [r7, #14]
 8001100:	091b      	lsrs	r3, r3, #4
 8001102:	b2db      	uxtb	r3, r3
 8001104:	461a      	mov	r2, r3
 8001106:	0092      	lsls	r2, r2, #2
 8001108:	4413      	add	r3, r2
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	b2da      	uxtb	r2, r3
 800110e:	7bbb      	ldrb	r3, [r7, #14]
 8001110:	f003 030f 	and.w	r3, r3, #15
 8001114:	b2db      	uxtb	r3, r3
 8001116:	4413      	add	r3, r2
 8001118:	b2da      	uxtb	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	715a      	strb	r2, [r3, #5]
	hRTC_DateTime->Year = (hRTC_Date.Year >> 4)*10 + (hRTC_Date.Year & 0x0f);
 800111e:	7bfb      	ldrb	r3, [r7, #15]
 8001120:	091b      	lsrs	r3, r3, #4
 8001122:	b2db      	uxtb	r3, r3
 8001124:	461a      	mov	r2, r3
 8001126:	0092      	lsls	r2, r2, #2
 8001128:	4413      	add	r3, r2
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	b2da      	uxtb	r2, r3
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	f003 030f 	and.w	r3, r3, #15
 8001134:	b2db      	uxtb	r3, r3
 8001136:	4413      	add	r3, r2
 8001138:	b2da      	uxtb	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	719a      	strb	r2, [r3, #6]
}
 800113e:	bf00      	nop
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000330 	.word	0x20000330

0800114c <PHY_u8Adc1Init>:
 * @pre
 * @post
 * @return
 */
uint8_t PHY_u8Adc1Init()
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	hadc1.Instance = ADC1;
 800115c:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <PHY_u8Adc1Init+0x78>)
 800115e:	4a1a      	ldr	r2, [pc, #104]	; (80011c8 <PHY_u8Adc1Init+0x7c>)
 8001160:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001162:	4b18      	ldr	r3, [pc, #96]	; (80011c4 <PHY_u8Adc1Init+0x78>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001168:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <PHY_u8Adc1Init+0x78>)
 800116a:	2200      	movs	r2, #0
 800116c:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800116e:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <PHY_u8Adc1Init+0x78>)
 8001170:	2200      	movs	r2, #0
 8001172:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001174:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <PHY_u8Adc1Init+0x78>)
 8001176:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800117a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800117c:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <PHY_u8Adc1Init+0x78>)
 800117e:	2200      	movs	r2, #0
 8001180:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8001182:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <PHY_u8Adc1Init+0x78>)
 8001184:	2201      	movs	r2, #1
 8001186:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001188:	480e      	ldr	r0, [pc, #56]	; (80011c4 <PHY_u8Adc1Init+0x78>)
 800118a:	f000 fdc7 	bl	8001d1c <HAL_ADC_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <PHY_u8Adc1Init+0x4c>
	{
		Error_Handler();
 8001194:	f7ff fcf4 	bl	8000b80 <Error_Handler>
	}
	/** Configure Regular Channel
	*/
	sConfig.Channel = ADC_CHANNEL_0;
 8001198:	2300      	movs	r3, #0
 800119a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800119c:	2301      	movs	r3, #1
 800119e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	4619      	mov	r1, r3
 80011a8:	4806      	ldr	r0, [pc, #24]	; (80011c4 <PHY_u8Adc1Init+0x78>)
 80011aa:	f001 f843 	bl	8002234 <HAL_ADC_ConfigChannel>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <PHY_u8Adc1Init+0x6c>
	{
		Error_Handler();
 80011b4:	f7ff fce4 	bl	8000b80 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */
	return HAL_OK;
 80011b8:	2300      	movs	r3, #0
	/* USER CODE END ADC1_Init 2 */
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	200002bc 	.word	0x200002bc
 80011c8:	40012400 	.word	0x40012400

080011cc <PHY_u16Adc1Read>:
 * @pre
 * @post
 * @return
 */
uint16_t PHY_u16Adc1Read()
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
	uint16_t mResult = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Start(&hadc1);
 80011d6:	4809      	ldr	r0, [pc, #36]	; (80011fc <PHY_u16Adc1Read+0x30>)
 80011d8:	f000 fe78 	bl	8001ecc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80011dc:	f04f 31ff 	mov.w	r1, #4294967295
 80011e0:	4806      	ldr	r0, [pc, #24]	; (80011fc <PHY_u16Adc1Read+0x30>)
 80011e2:	f000 ff21 	bl	8002028 <HAL_ADC_PollForConversion>
	mResult = HAL_ADC_GetValue(&hadc1);
 80011e6:	4805      	ldr	r0, [pc, #20]	; (80011fc <PHY_u16Adc1Read+0x30>)
 80011e8:	f001 f818 	bl	800221c <HAL_ADC_GetValue>
 80011ec:	4603      	mov	r3, r0
 80011ee:	80fb      	strh	r3, [r7, #6]
	return mResult;
 80011f0:	88fb      	ldrh	r3, [r7, #6]
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	200002bc 	.word	0x200002bc

08001200 <PHY_u8Uart3EnbInterrupt>:
 * @pre
 * @post
 * @return
 */
uint8_t PHY_u8Uart3EnbInterrupt()
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
	uint8_t u8Flush;
	u8Uart3Path = 0;
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <PHY_u8Uart3EnbInterrupt+0x40>)
 8001208:	2200      	movs	r2, #0
 800120a:	701a      	strb	r2, [r3, #0]
	u8Uart3IrptState = 0;
 800120c:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <PHY_u8Uart3EnbInterrupt+0x44>)
 800120e:	2200      	movs	r2, #0
 8001210:	701a      	strb	r2, [r3, #0]
	for(u8Flush = 0; u8Flush < RX_MAX_LEN; u8Flush++)
 8001212:	2300      	movs	r3, #0
 8001214:	71fb      	strb	r3, [r7, #7]
 8001216:	e006      	b.n	8001226 <PHY_u8Uart3EnbInterrupt+0x26>
		u8Rx3Data[u8Flush] = 0;
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	4a0b      	ldr	r2, [pc, #44]	; (8001248 <PHY_u8Uart3EnbInterrupt+0x48>)
 800121c:	2100      	movs	r1, #0
 800121e:	54d1      	strb	r1, [r2, r3]
	for(u8Flush = 0; u8Flush < RX_MAX_LEN; u8Flush++)
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	3301      	adds	r3, #1
 8001224:	71fb      	strb	r3, [r7, #7]
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d0f5      	beq.n	8001218 <PHY_u8Uart3EnbInterrupt+0x18>
	HAL_UART_Receive_IT(&huart3, (uint8_t*)u8Rx3Data, RX_MAX_LEN);
 800122c:	2201      	movs	r2, #1
 800122e:	4906      	ldr	r1, [pc, #24]	; (8001248 <PHY_u8Uart3EnbInterrupt+0x48>)
 8001230:	4806      	ldr	r0, [pc, #24]	; (800124c <PHY_u8Uart3EnbInterrupt+0x4c>)
 8001232:	f004 fa40 	bl	80056b6 <HAL_UART_Receive_IT>
	return HAL_OK;
 8001236:	2300      	movs	r3, #0
}
 8001238:	4618      	mov	r0, r3
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	200005ba 	.word	0x200005ba
 8001244:	200004ea 	.word	0x200004ea
 8001248:	20000150 	.word	0x20000150
 800124c:	20000224 	.word	0x20000224

08001250 <PHY_u8Uart3ReturnRxByte>:
 * @pre
 * @post
 * @return
 */
uint8_t* PHY_u8Uart3ReturnRxByte()
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
	if(u8Uart3IrptState == 1)
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <PHY_u8Uart3ReturnRxByte+0x20>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d104      	bne.n	8001266 <PHY_u8Uart3ReturnRxByte+0x16>
	{
		u8Uart3IrptState = 0;
 800125c:	4b04      	ldr	r3, [pc, #16]	; (8001270 <PHY_u8Uart3ReturnRxByte+0x20>)
 800125e:	2200      	movs	r2, #0
 8001260:	701a      	strb	r2, [r3, #0]
		return (uint8_t*)u8Rx3Data;
 8001262:	4b04      	ldr	r3, [pc, #16]	; (8001274 <PHY_u8Uart3ReturnRxByte+0x24>)
 8001264:	e000      	b.n	8001268 <PHY_u8Uart3ReturnRxByte+0x18>
	}
	return (uint8_t*)u8Uart3RxByte;
 8001266:	4b04      	ldr	r3, [pc, #16]	; (8001278 <PHY_u8Uart3ReturnRxByte+0x28>)
}
 8001268:	4618      	mov	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr
 8001270:	200004ea 	.word	0x200004ea
 8001274:	20000150 	.word	0x20000150
 8001278:	200004ec 	.word	0x200004ec

0800127c <PHY_u8Uart3SendByte>:
 * @pre
 * @post
 * @return
 */
uint8_t PHY_u8Uart3SendByte(uint8_t* pu8Data, uint16_t u16Len)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	460b      	mov	r3, r1
 8001286:	807b      	strh	r3, [r7, #2]
	return HAL_UART_Transmit_IT(&huart3, pu8Data, u16Len);
 8001288:	887b      	ldrh	r3, [r7, #2]
 800128a:	461a      	mov	r2, r3
 800128c:	6879      	ldr	r1, [r7, #4]
 800128e:	4804      	ldr	r0, [pc, #16]	; (80012a0 <PHY_u8Uart3SendByte+0x24>)
 8001290:	f004 f9cd 	bl	800562e <HAL_UART_Transmit_IT>
 8001294:	4603      	mov	r3, r0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000224 	.word	0x20000224

080012a4 <HAL_UART_RxCpltCallback>:
 * @post
 * @param Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
 */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart1.Instance)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <HAL_UART_RxCpltCallback+0x48>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d014      	beq.n	80012e2 <HAL_UART_RxCpltCallback+0x3e>
	{

	}
	else if(huart->Instance == huart3.Instance)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <HAL_UART_RxCpltCallback+0x4c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d10e      	bne.n	80012e2 <HAL_UART_RxCpltCallback+0x3e>
	{
		u8Uart3IrptState = 1;
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <HAL_UART_RxCpltCallback+0x50>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, (uint8_t*)u8Rx3Data, RX_MAX_LEN);
 80012ca:	2201      	movs	r2, #1
 80012cc:	490a      	ldr	r1, [pc, #40]	; (80012f8 <HAL_UART_RxCpltCallback+0x54>)
 80012ce:	4808      	ldr	r0, [pc, #32]	; (80012f0 <HAL_UART_RxCpltCallback+0x4c>)
 80012d0:	f004 f9f1 	bl	80056b6 <HAL_UART_Receive_IT>
		switch(u8Uart3Path)
 80012d4:	4b09      	ldr	r3, [pc, #36]	; (80012fc <HAL_UART_RxCpltCallback+0x58>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d102      	bne.n	80012e2 <HAL_UART_RxCpltCallback+0x3e>
		{
			case 0:
				if(u8Rx3Data[0] == 0x01)
 80012dc:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <HAL_UART_RxCpltCallback+0x54>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b01      	cmp	r3, #1
			break;
		}
	}
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200002ec 	.word	0x200002ec
 80012f0:	20000224 	.word	0x20000224
 80012f4:	200004ea 	.word	0x200004ea
 80012f8:	20000150 	.word	0x20000150
 80012fc:	200005ba 	.word	0x200005ba

08001300 <HAL_TIM_PeriodElapsedCallback>:
 * @pre
 * @post
 * @param htim
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]

	if(htim->Instance == htim2.Instance)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4b05      	ldr	r3, [pc, #20]	; (8001324 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	429a      	cmp	r2, r3
 8001312:	d103      	bne.n	800131c <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		vButtonRead();
 8001314:	f000 f808 	bl	8001328 <vButtonRead>
		vSmoothPwmActive();
 8001318:	f000 f846 	bl	80013a8 <vSmoothPwmActive>

	}
}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	200003a0 	.word	0x200003a0

08001328 <vButtonRead>:
 *
 * @pre
 * @post
 */
void vButtonRead()
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(BT_01_GPIO_Port, BT_01_Pin) == GPIO_PIN_RESET)
 800132c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001330:	4819      	ldr	r0, [pc, #100]	; (8001398 <vButtonRead+0x70>)
 8001332:	f001 fe37 	bl	8002fa4 <HAL_GPIO_ReadPin>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d107      	bne.n	800134c <vButtonRead+0x24>
	{
		if(u8Button1Detect == 0)
 800133c:	4b17      	ldr	r3, [pc, #92]	; (800139c <vButtonRead+0x74>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d10d      	bne.n	8001360 <vButtonRead+0x38>
			u8Button1Detect = 1;
 8001344:	4b15      	ldr	r3, [pc, #84]	; (800139c <vButtonRead+0x74>)
 8001346:	2201      	movs	r2, #1
 8001348:	701a      	strb	r2, [r3, #0]
 800134a:	e009      	b.n	8001360 <vButtonRead+0x38>
	}
	else
	{
		if(u8Button1Detect == 1)
 800134c:	4b13      	ldr	r3, [pc, #76]	; (800139c <vButtonRead+0x74>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d105      	bne.n	8001360 <vButtonRead+0x38>
		{
			u8Button1Detect = 0;
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <vButtonRead+0x74>)
 8001356:	2200      	movs	r2, #0
 8001358:	701a      	strb	r2, [r3, #0]
			u8ButtonState = 1;
 800135a:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <vButtonRead+0x78>)
 800135c:	2201      	movs	r2, #1
 800135e:	701a      	strb	r2, [r3, #0]
		}
	}

	if(HAL_GPIO_ReadPin(BT_02_GPIO_Port, BT_02_Pin) == GPIO_PIN_RESET)
 8001360:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001364:	480c      	ldr	r0, [pc, #48]	; (8001398 <vButtonRead+0x70>)
 8001366:	f001 fe1d 	bl	8002fa4 <HAL_GPIO_ReadPin>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d107      	bne.n	8001380 <vButtonRead+0x58>
	{
		if(u8Button2Detect == 0)
 8001370:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <vButtonRead+0x7c>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d10d      	bne.n	8001394 <vButtonRead+0x6c>
			u8Button2Detect = 1;
 8001378:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <vButtonRead+0x7c>)
 800137a:	2201      	movs	r2, #1
 800137c:	701a      	strb	r2, [r3, #0]
		{
			u8Button2Detect = 0;
			u8ButtonState = 2;
		}
	}
}
 800137e:	e009      	b.n	8001394 <vButtonRead+0x6c>
		if(u8Button2Detect == 1)
 8001380:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <vButtonRead+0x7c>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d105      	bne.n	8001394 <vButtonRead+0x6c>
			u8Button2Detect = 0;
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <vButtonRead+0x7c>)
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]
			u8ButtonState = 2;
 800138e:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <vButtonRead+0x78>)
 8001390:	2202      	movs	r2, #2
 8001392:	701a      	strb	r2, [r3, #0]
}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40010c00 	.word	0x40010c00
 800139c:	200005b6 	.word	0x200005b6
 80013a0:	200005b8 	.word	0x200005b8
 80013a4:	200004e8 	.word	0x200004e8

080013a8 <vSmoothPwmActive>:
 *
 * @pre
 * @post
 */
void vSmoothPwmActive()
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
	if(u8SmoothPwmActive == PWM_INC)
 80013ac:	4b2f      	ldr	r3, [pc, #188]	; (800146c <vSmoothPwmActive+0xc4>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d123      	bne.n	80013fc <vSmoothPwmActive+0x54>
	{
		u16SmoothPwmStepCount++;
 80013b4:	4b2e      	ldr	r3, [pc, #184]	; (8001470 <vSmoothPwmActive+0xc8>)
 80013b6:	881b      	ldrh	r3, [r3, #0]
 80013b8:	3301      	adds	r3, #1
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	4b2c      	ldr	r3, [pc, #176]	; (8001470 <vSmoothPwmActive+0xc8>)
 80013be:	801a      	strh	r2, [r3, #0]
		if(u16SmoothPwmStepCount>= u16SmoothPwmStep)
 80013c0:	4b2b      	ldr	r3, [pc, #172]	; (8001470 <vSmoothPwmActive+0xc8>)
 80013c2:	881a      	ldrh	r2, [r3, #0]
 80013c4:	4b2b      	ldr	r3, [pc, #172]	; (8001474 <vSmoothPwmActive+0xcc>)
 80013c6:	881b      	ldrh	r3, [r3, #0]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d34b      	bcc.n	8001464 <vSmoothPwmActive+0xbc>
		{
			u16SmoothPwmStepCount = 0;
 80013cc:	4b28      	ldr	r3, [pc, #160]	; (8001470 <vSmoothPwmActive+0xc8>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	801a      	strh	r2, [r3, #0]
			htim3.Instance->CCR1++;
 80013d2:	4b29      	ldr	r3, [pc, #164]	; (8001478 <vSmoothPwmActive+0xd0>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013d8:	3201      	adds	r2, #1
 80013da:	635a      	str	r2, [r3, #52]	; 0x34
			if(htim3.Instance->CCR1>= (uint32_t)u8DestPwmValue)
 80013dc:	4b26      	ldr	r3, [pc, #152]	; (8001478 <vSmoothPwmActive+0xd0>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013e2:	4a26      	ldr	r2, [pc, #152]	; (800147c <vSmoothPwmActive+0xd4>)
 80013e4:	7812      	ldrb	r2, [r2, #0]
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d33c      	bcc.n	8001464 <vSmoothPwmActive+0xbc>
			{
				htim3.Instance->CCR1 = (uint32_t)u8DestPwmValue;
 80013ea:	4b24      	ldr	r3, [pc, #144]	; (800147c <vSmoothPwmActive+0xd4>)
 80013ec:	781a      	ldrb	r2, [r3, #0]
 80013ee:	4b22      	ldr	r3, [pc, #136]	; (8001478 <vSmoothPwmActive+0xd0>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	635a      	str	r2, [r3, #52]	; 0x34
				u8SmoothPwmActive = PWM_NOP;
 80013f4:	4b1d      	ldr	r3, [pc, #116]	; (800146c <vSmoothPwmActive+0xc4>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	701a      	strb	r2, [r3, #0]
					u8SmoothPwmActive = PWM_NOP;
				}
			}
		}
	}
}
 80013fa:	e033      	b.n	8001464 <vSmoothPwmActive+0xbc>
	else if(u8SmoothPwmActive == PWM_DEC)
 80013fc:	4b1b      	ldr	r3, [pc, #108]	; (800146c <vSmoothPwmActive+0xc4>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b02      	cmp	r3, #2
 8001402:	d12f      	bne.n	8001464 <vSmoothPwmActive+0xbc>
		u16SmoothPwmStepCount++;
 8001404:	4b1a      	ldr	r3, [pc, #104]	; (8001470 <vSmoothPwmActive+0xc8>)
 8001406:	881b      	ldrh	r3, [r3, #0]
 8001408:	3301      	adds	r3, #1
 800140a:	b29a      	uxth	r2, r3
 800140c:	4b18      	ldr	r3, [pc, #96]	; (8001470 <vSmoothPwmActive+0xc8>)
 800140e:	801a      	strh	r2, [r3, #0]
		if(u16SmoothPwmStepCount>= u16SmoothPwmStep)
 8001410:	4b17      	ldr	r3, [pc, #92]	; (8001470 <vSmoothPwmActive+0xc8>)
 8001412:	881a      	ldrh	r2, [r3, #0]
 8001414:	4b17      	ldr	r3, [pc, #92]	; (8001474 <vSmoothPwmActive+0xcc>)
 8001416:	881b      	ldrh	r3, [r3, #0]
 8001418:	429a      	cmp	r2, r3
 800141a:	d323      	bcc.n	8001464 <vSmoothPwmActive+0xbc>
			u16SmoothPwmStepCount = 0;
 800141c:	4b14      	ldr	r3, [pc, #80]	; (8001470 <vSmoothPwmActive+0xc8>)
 800141e:	2200      	movs	r2, #0
 8001420:	801a      	strh	r2, [r3, #0]
			if(htim3.Instance->CCR1 <= 0)
 8001422:	4b15      	ldr	r3, [pc, #84]	; (8001478 <vSmoothPwmActive+0xd0>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001428:	2b00      	cmp	r3, #0
 800142a:	d107      	bne.n	800143c <vSmoothPwmActive+0x94>
				htim3.Instance->CCR1 = 0;
 800142c:	4b12      	ldr	r3, [pc, #72]	; (8001478 <vSmoothPwmActive+0xd0>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2200      	movs	r2, #0
 8001432:	635a      	str	r2, [r3, #52]	; 0x34
				u8SmoothPwmActive = PWM_NOP;
 8001434:	4b0d      	ldr	r3, [pc, #52]	; (800146c <vSmoothPwmActive+0xc4>)
 8001436:	2200      	movs	r2, #0
 8001438:	701a      	strb	r2, [r3, #0]
}
 800143a:	e013      	b.n	8001464 <vSmoothPwmActive+0xbc>
				htim3.Instance->CCR1--;
 800143c:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <vSmoothPwmActive+0xd0>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001442:	3a01      	subs	r2, #1
 8001444:	635a      	str	r2, [r3, #52]	; 0x34
				if(htim3.Instance->CCR1<= (uint32_t)u8DestPwmValue)
 8001446:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <vSmoothPwmActive+0xd0>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800144c:	4a0b      	ldr	r2, [pc, #44]	; (800147c <vSmoothPwmActive+0xd4>)
 800144e:	7812      	ldrb	r2, [r2, #0]
 8001450:	4293      	cmp	r3, r2
 8001452:	d807      	bhi.n	8001464 <vSmoothPwmActive+0xbc>
					htim3.Instance->CCR1 = (uint32_t)u8DestPwmValue;
 8001454:	4b09      	ldr	r3, [pc, #36]	; (800147c <vSmoothPwmActive+0xd4>)
 8001456:	781a      	ldrb	r2, [r3, #0]
 8001458:	4b07      	ldr	r3, [pc, #28]	; (8001478 <vSmoothPwmActive+0xd0>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	635a      	str	r2, [r3, #52]	; 0x34
					u8SmoothPwmActive = PWM_NOP;
 800145e:	4b03      	ldr	r3, [pc, #12]	; (800146c <vSmoothPwmActive+0xc4>)
 8001460:	2200      	movs	r2, #0
 8001462:	701a      	strb	r2, [r3, #0]
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr
 800146c:	200004e9 	.word	0x200004e9
 8001470:	200005b4 	.word	0x200005b4
 8001474:	200004e6 	.word	0x200004e6
 8001478:	2000026c 	.word	0x2000026c
 800147c:	200005bb 	.word	0x200005bb

08001480 <PHY_u8SimInit>:
 * @pre
 * @post
 * @return
 */
uint8_t PHY_u8SimInit()
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001486:	f107 0308 	add.w	r3, r7, #8
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001494:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <PHY_u8SimInit+0x60>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	4a11      	ldr	r2, [pc, #68]	; (80014e0 <PHY_u8SimInit+0x60>)
 800149a:	f043 0304 	orr.w	r3, r3, #4
 800149e:	6193      	str	r3, [r2, #24]
 80014a0:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <PHY_u8SimInit+0x60>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	f003 0304 	and.w	r3, r3, #4
 80014a8:	607b      	str	r3, [r7, #4]
 80014aa:	687b      	ldr	r3, [r7, #4]

	HAL_GPIO_WritePin(SIM_KEY_GPIO_Port, SIM_KEY_Pin, GPIO_PIN_RESET);
 80014ac:	2200      	movs	r2, #0
 80014ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014b2:	480c      	ldr	r0, [pc, #48]	; (80014e4 <PHY_u8SimInit+0x64>)
 80014b4:	f001 fd8d 	bl	8002fd2 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : SIM_KEY_Pin */
	GPIO_InitStruct.Pin = SIM_KEY_Pin;
 80014b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014bc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014be:	2301      	movs	r3, #1
 80014c0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014c2:	2301      	movs	r3, #1
 80014c4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80014c6:	2301      	movs	r3, #1
 80014c8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(SIM_KEY_GPIO_Port, &GPIO_InitStruct);
 80014ca:	f107 0308 	add.w	r3, r7, #8
 80014ce:	4619      	mov	r1, r3
 80014d0:	4804      	ldr	r0, [pc, #16]	; (80014e4 <PHY_u8SimInit+0x64>)
 80014d2:	f001 fbe3 	bl	8002c9c <HAL_GPIO_Init>

	return HAL_OK;
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40010800 	.word	0x40010800

080014e8 <PHY_vOffSim>:
 *
 * @pre
 * @post
 */
void PHY_vOffSim()
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SIM_KEY_GPIO_Port, SIM_KEY_Pin, GPIO_PIN_RESET);
 80014ec:	2200      	movs	r2, #0
 80014ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014f2:	4804      	ldr	r0, [pc, #16]	; (8001504 <PHY_vOffSim+0x1c>)
 80014f4:	f001 fd6d 	bl	8002fd2 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80014f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014fc:	f000 fbea 	bl	8001cd4 <HAL_Delay>
}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40010800 	.word	0x40010800

08001508 <PHY_vStorageSchedulerData>:
 * @pre
 * @post
 * @param pstSchedulerData
 */
void PHY_vStorageSchedulerData(Scheduler_DataTypeDef* pstSchedulerData)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08a      	sub	sp, #40	; 0x28
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
	volatile HAL_StatusTypeDef status;
	FLASH_EraseInitTypeDef EraseInitStruct;
	volatile uint32_t u32Temp = 0x00000000;
 8001510:	2300      	movs	r3, #0
 8001512:	613b      	str	r3, [r7, #16]
	volatile uint32_t u32Addr = START_OF_FLASH;
 8001514:	4b9e      	ldr	r3, [pc, #632]	; (8001790 <PHY_vStorageSchedulerData+0x288>)
 8001516:	60fb      	str	r3, [r7, #12]
	uint32_t u32PageError;
	uint8_t u8LoopDay, u8LoopSlot;
	HAL_FLASH_Unlock();
 8001518:	f001 fa04 	bl	8002924 <HAL_FLASH_Unlock>
	HAL_FLASH_OB_Unlock();
 800151c:	f001 fa38 	bl	8002990 <HAL_FLASH_OB_Unlock>
	PHY_u8Led1On();
 8001520:	f7ff fd06 	bl	8000f30 <PHY_u8Led1On>
	//
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
	EraseInitStruct.PageAddress = START_OF_FLASH;
 8001528:	4b99      	ldr	r3, [pc, #612]	; (8001790 <PHY_vStorageSchedulerData+0x288>)
 800152a:	61fb      	str	r3, [r7, #28]
	EraseInitStruct.NbPages = 2; // 1 page = 1KB
 800152c:	2302      	movs	r3, #2
 800152e:	623b      	str	r3, [r7, #32]
	status = HAL_FLASHEx_Erase(&EraseInitStruct, &u32PageError);
 8001530:	f107 0208 	add.w	r2, r7, #8
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	4611      	mov	r1, r2
 800153a:	4618      	mov	r0, r3
 800153c:	f001 fb06 	bl	8002b4c <HAL_FLASHEx_Erase>
 8001540:	4603      	mov	r3, r0
 8001542:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	//
	pstSchedulerData->u8Temp1 = 0x11;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2211      	movs	r2, #17
 800154a:	701a      	strb	r2, [r3, #0]
	u32Temp = (uint32_t)pstSchedulerData->u8Temp1;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	613b      	str	r3, [r7, #16]
	status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, START_OF_FLASH, u32Temp);
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	461a      	mov	r2, r3
 8001556:	f04f 0300 	mov.w	r3, #0
 800155a:	498d      	ldr	r1, [pc, #564]	; (8001790 <PHY_vStorageSchedulerData+0x288>)
 800155c:	2002      	movs	r0, #2
 800155e:	f001 f971 	bl	8002844 <HAL_FLASH_Program>
 8001562:	4603      	mov	r3, r0
 8001564:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	u32Addr+=4;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	3304      	adds	r3, #4
 800156c:	60fb      	str	r3, [r7, #12]
	pstSchedulerData->u8Temp2 = 0x22;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2222      	movs	r2, #34	; 0x22
 8001572:	705a      	strb	r2, [r3, #1]
	u32Temp = (uint32_t)pstSchedulerData->u8Temp2;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	785b      	ldrb	r3, [r3, #1]
 8001578:	613b      	str	r3, [r7, #16]
	status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, START_OF_FLASH+4, u32Temp);
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	461a      	mov	r2, r3
 800157e:	f04f 0300 	mov.w	r3, #0
 8001582:	4984      	ldr	r1, [pc, #528]	; (8001794 <PHY_vStorageSchedulerData+0x28c>)
 8001584:	2002      	movs	r0, #2
 8001586:	f001 f95d 	bl	8002844 <HAL_FLASH_Program>
 800158a:	4603      	mov	r3, r0
 800158c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	u32Addr+=4;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	3304      	adds	r3, #4
 8001594:	60fb      	str	r3, [r7, #12]
	pstSchedulerData->u8Temp3 = 0x33;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2233      	movs	r2, #51	; 0x33
 800159a:	709a      	strb	r2, [r3, #2]
	u32Temp = (uint32_t)pstSchedulerData->u8Temp3;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	789b      	ldrb	r3, [r3, #2]
 80015a0:	613b      	str	r3, [r7, #16]
	status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, START_OF_FLASH+8, u32Temp);
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	461a      	mov	r2, r3
 80015a6:	f04f 0300 	mov.w	r3, #0
 80015aa:	497b      	ldr	r1, [pc, #492]	; (8001798 <PHY_vStorageSchedulerData+0x290>)
 80015ac:	2002      	movs	r0, #2
 80015ae:	f001 f949 	bl	8002844 <HAL_FLASH_Program>
 80015b2:	4603      	mov	r3, r0
 80015b4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	//

	for(u8LoopDay = 0; u8LoopDay < DAY_OF_WEEK; u8LoopDay++)
 80015b8:	2300      	movs	r3, #0
 80015ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80015be:	e0d2      	b.n	8001766 <PHY_vStorageSchedulerData+0x25e>
	{
		//
		u32Addr +=4;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	3304      	adds	r3, #4
 80015c4:	60fb      	str	r3, [r7, #12]
		u32Temp = (uint32_t)pstSchedulerData->stSchedulerDataSlot[u8LoopDay].u8DayOfWeek;
 80015c6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	4613      	mov	r3, r2
 80015ce:	011b      	lsls	r3, r3, #4
 80015d0:	4413      	add	r3, r2
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	440b      	add	r3, r1
 80015d6:	3303      	adds	r3, #3
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	613b      	str	r3, [r7, #16]
		status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, u32Addr, u32Temp);
 80015dc:	68f9      	ldr	r1, [r7, #12]
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	461a      	mov	r2, r3
 80015e2:	f04f 0300 	mov.w	r3, #0
 80015e6:	2002      	movs	r0, #2
 80015e8:	f001 f92c 	bl	8002844 <HAL_FLASH_Program>
 80015ec:	4603      	mov	r3, r0
 80015ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		u32Addr+=4;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	3304      	adds	r3, #4
 80015f6:	60fb      	str	r3, [r7, #12]
		u32Temp = (uint32_t)pstSchedulerData->stSchedulerDataSlot[u8LoopDay].u8Day;
 80015f8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80015fc:	6879      	ldr	r1, [r7, #4]
 80015fe:	4613      	mov	r3, r2
 8001600:	011b      	lsls	r3, r3, #4
 8001602:	4413      	add	r3, r2
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	440b      	add	r3, r1
 8001608:	3304      	adds	r3, #4
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	613b      	str	r3, [r7, #16]
		status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, u32Addr, u32Temp);
 800160e:	68f9      	ldr	r1, [r7, #12]
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	461a      	mov	r2, r3
 8001614:	f04f 0300 	mov.w	r3, #0
 8001618:	2002      	movs	r0, #2
 800161a:	f001 f913 	bl	8002844 <HAL_FLASH_Program>
 800161e:	4603      	mov	r3, r0
 8001620:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		u32Addr+=4;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	3304      	adds	r3, #4
 8001628:	60fb      	str	r3, [r7, #12]
		u32Temp = (uint32_t)pstSchedulerData->stSchedulerDataSlot[u8LoopDay].u8Month;
 800162a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	4613      	mov	r3, r2
 8001632:	011b      	lsls	r3, r3, #4
 8001634:	4413      	add	r3, r2
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	440b      	add	r3, r1
 800163a:	3305      	adds	r3, #5
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	613b      	str	r3, [r7, #16]
		status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, u32Addr, u32Temp);
 8001640:	68f9      	ldr	r1, [r7, #12]
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	461a      	mov	r2, r3
 8001646:	f04f 0300 	mov.w	r3, #0
 800164a:	2002      	movs	r0, #2
 800164c:	f001 f8fa 	bl	8002844 <HAL_FLASH_Program>
 8001650:	4603      	mov	r3, r0
 8001652:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		u32Addr+=4;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	3304      	adds	r3, #4
 800165a:	60fb      	str	r3, [r7, #12]
		u32Temp = (uint32_t)pstSchedulerData->stSchedulerDataSlot[u8LoopDay].u8Year;
 800165c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001660:	6879      	ldr	r1, [r7, #4]
 8001662:	4613      	mov	r3, r2
 8001664:	011b      	lsls	r3, r3, #4
 8001666:	4413      	add	r3, r2
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	440b      	add	r3, r1
 800166c:	3306      	adds	r3, #6
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	613b      	str	r3, [r7, #16]
		status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, u32Addr, u32Temp);
 8001672:	68f9      	ldr	r1, [r7, #12]
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	461a      	mov	r2, r3
 8001678:	f04f 0300 	mov.w	r3, #0
 800167c:	2002      	movs	r0, #2
 800167e:	f001 f8e1 	bl	8002844 <HAL_FLASH_Program>
 8001682:	4603      	mov	r3, r0
 8001684:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		//
		for(u8LoopSlot = 0; u8LoopSlot < MAX_OF_SLOT; u8LoopSlot++)
 8001688:	2300      	movs	r3, #0
 800168a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800168e:	e061      	b.n	8001754 <PHY_vStorageSchedulerData+0x24c>
		{
			u32Addr+=4;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	3304      	adds	r3, #4
 8001694:	60fb      	str	r3, [r7, #12]
			u32Temp = (uint32_t)pstSchedulerData->stSchedulerDataSlot[u8LoopDay].stSchedulerValue[u8LoopSlot].u8Hour;
 8001696:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800169a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	461a      	mov	r2, r3
 80016a2:	0052      	lsls	r2, r2, #1
 80016a4:	441a      	add	r2, r3
 80016a6:	460b      	mov	r3, r1
 80016a8:	011b      	lsls	r3, r3, #4
 80016aa:	440b      	add	r3, r1
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	4413      	add	r3, r2
 80016b0:	4403      	add	r3, r0
 80016b2:	3307      	adds	r3, #7
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	613b      	str	r3, [r7, #16]
			status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, u32Addr, u32Temp);
 80016b8:	68f9      	ldr	r1, [r7, #12]
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	461a      	mov	r2, r3
 80016be:	f04f 0300 	mov.w	r3, #0
 80016c2:	2002      	movs	r0, #2
 80016c4:	f001 f8be 	bl	8002844 <HAL_FLASH_Program>
 80016c8:	4603      	mov	r3, r0
 80016ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			u32Addr+=4;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	3304      	adds	r3, #4
 80016d2:	60fb      	str	r3, [r7, #12]
			u32Temp = (uint32_t)pstSchedulerData->stSchedulerDataSlot[u8LoopDay].stSchedulerValue[u8LoopSlot].u8Minute;
 80016d4:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80016d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	461a      	mov	r2, r3
 80016e0:	0052      	lsls	r2, r2, #1
 80016e2:	441a      	add	r2, r3
 80016e4:	460b      	mov	r3, r1
 80016e6:	011b      	lsls	r3, r3, #4
 80016e8:	440b      	add	r3, r1
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	4413      	add	r3, r2
 80016ee:	4403      	add	r3, r0
 80016f0:	3308      	adds	r3, #8
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	613b      	str	r3, [r7, #16]
			status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, u32Addr, u32Temp);
 80016f6:	68f9      	ldr	r1, [r7, #12]
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	461a      	mov	r2, r3
 80016fc:	f04f 0300 	mov.w	r3, #0
 8001700:	2002      	movs	r0, #2
 8001702:	f001 f89f 	bl	8002844 <HAL_FLASH_Program>
 8001706:	4603      	mov	r3, r0
 8001708:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			u32Addr+=4;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	3304      	adds	r3, #4
 8001710:	60fb      	str	r3, [r7, #12]
			u32Temp = (uint32_t)pstSchedulerData->stSchedulerDataSlot[u8LoopDay].stSchedulerValue[u8LoopSlot].u8Value;
 8001712:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8001716:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	461a      	mov	r2, r3
 800171e:	0052      	lsls	r2, r2, #1
 8001720:	441a      	add	r2, r3
 8001722:	460b      	mov	r3, r1
 8001724:	011b      	lsls	r3, r3, #4
 8001726:	440b      	add	r3, r1
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	4413      	add	r3, r2
 800172c:	4403      	add	r3, r0
 800172e:	3309      	adds	r3, #9
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	613b      	str	r3, [r7, #16]
			status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, u32Addr, u32Temp);
 8001734:	68f9      	ldr	r1, [r7, #12]
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	461a      	mov	r2, r3
 800173a:	f04f 0300 	mov.w	r3, #0
 800173e:	2002      	movs	r0, #2
 8001740:	f001 f880 	bl	8002844 <HAL_FLASH_Program>
 8001744:	4603      	mov	r3, r0
 8001746:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		for(u8LoopSlot = 0; u8LoopSlot < MAX_OF_SLOT; u8LoopSlot++)
 800174a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800174e:	3301      	adds	r3, #1
 8001750:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001754:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001758:	2b09      	cmp	r3, #9
 800175a:	d999      	bls.n	8001690 <PHY_vStorageSchedulerData+0x188>
	for(u8LoopDay = 0; u8LoopDay < DAY_OF_WEEK; u8LoopDay++)
 800175c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001760:	3301      	adds	r3, #1
 8001762:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001766:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800176a:	2b06      	cmp	r3, #6
 800176c:	f67f af28 	bls.w	80015c0 <PHY_vStorageSchedulerData+0xb8>
		}
	}

	if(status == HAL_OK)
 8001770:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <PHY_vStorageSchedulerData+0x276>
		PHY_u8Led1Off();
 800177a:	f7ff fbe5 	bl	8000f48 <PHY_u8Led1Off>
	HAL_FLASH_OB_Lock();
 800177e:	f001 f923 	bl	80029c8 <HAL_FLASH_OB_Lock>
	HAL_FLASH_Lock();
 8001782:	f001 f8f5 	bl	8002970 <HAL_FLASH_Lock>
}
 8001786:	bf00      	nop
 8001788:	3728      	adds	r7, #40	; 0x28
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	0800f000 	.word	0x0800f000
 8001794:	0800f004 	.word	0x0800f004
 8001798:	0800f008 	.word	0x0800f008

0800179c <RTC_u8Init>:
 * @pre
 * @post
 * @return
 */
uint8_t RTC_u8Init()
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
	return PHY_u8RtcInit();
 80017a0:	f7ff fbf6 	bl	8000f90 <PHY_u8RtcInit>
 80017a4:	4603      	mov	r3, r0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	bd80      	pop	{r7, pc}

080017aa <RTC_vGetDateTime>:
 * @pre
 * @post
 * @param hRTC_DateTime
 */
void RTC_vGetDateTime(RTC_DateTimeTypedef* hRTC_DateTime)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
	PHY_vGetDateTime(hRTC_DateTime);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7ff fc38 	bl	8001028 <PHY_vGetDateTime>
}
 80017b8:	bf00      	nop
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <SIM_u8SimInit>:
 * @pre
 * @post
 * @return
 */
uint8_t SIM_u8SimInit()
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
	return PHY_u8SimInit();
 80017c4:	f7ff fe5c 	bl	8001480 <PHY_u8SimInit>
 80017c8:	4603      	mov	r3, r0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	bd80      	pop	{r7, pc}

080017ce <SIM_vOffSim>:
 *
 * @pre
 * @post
 */
void SIM_vOffSim()
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	af00      	add	r7, sp, #0
	PHY_vOffSim();
 80017d2:	f7ff fe89 	bl	80014e8 <PHY_vOffSim>
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017e2:	4b15      	ldr	r3, [pc, #84]	; (8001838 <HAL_MspInit+0x5c>)
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	4a14      	ldr	r2, [pc, #80]	; (8001838 <HAL_MspInit+0x5c>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6193      	str	r3, [r2, #24]
 80017ee:	4b12      	ldr	r3, [pc, #72]	; (8001838 <HAL_MspInit+0x5c>)
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fa:	4b0f      	ldr	r3, [pc, #60]	; (8001838 <HAL_MspInit+0x5c>)
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	4a0e      	ldr	r2, [pc, #56]	; (8001838 <HAL_MspInit+0x5c>)
 8001800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001804:	61d3      	str	r3, [r2, #28]
 8001806:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <HAL_MspInit+0x5c>)
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001812:	4b0a      	ldr	r3, [pc, #40]	; (800183c <HAL_MspInit+0x60>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	4a04      	ldr	r2, [pc, #16]	; (800183c <HAL_MspInit+0x60>)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800182e:	bf00      	nop
 8001830:	3714      	adds	r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr
 8001838:	40021000 	.word	0x40021000
 800183c:	40010000 	.word	0x40010000

08001840 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b088      	sub	sp, #32
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 0310 	add.w	r3, r7, #16
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a14      	ldr	r2, [pc, #80]	; (80018ac <HAL_ADC_MspInit+0x6c>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d121      	bne.n	80018a4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001860:	4b13      	ldr	r3, [pc, #76]	; (80018b0 <HAL_ADC_MspInit+0x70>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	4a12      	ldr	r2, [pc, #72]	; (80018b0 <HAL_ADC_MspInit+0x70>)
 8001866:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800186a:	6193      	str	r3, [r2, #24]
 800186c:	4b10      	ldr	r3, [pc, #64]	; (80018b0 <HAL_ADC_MspInit+0x70>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001878:	4b0d      	ldr	r3, [pc, #52]	; (80018b0 <HAL_ADC_MspInit+0x70>)
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	4a0c      	ldr	r2, [pc, #48]	; (80018b0 <HAL_ADC_MspInit+0x70>)
 800187e:	f043 0304 	orr.w	r3, r3, #4
 8001882:	6193      	str	r3, [r2, #24]
 8001884:	4b0a      	ldr	r3, [pc, #40]	; (80018b0 <HAL_ADC_MspInit+0x70>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	60bb      	str	r3, [r7, #8]
 800188e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001890:	2301      	movs	r3, #1
 8001892:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001894:	2303      	movs	r3, #3
 8001896:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001898:	f107 0310 	add.w	r3, r7, #16
 800189c:	4619      	mov	r1, r3
 800189e:	4805      	ldr	r0, [pc, #20]	; (80018b4 <HAL_ADC_MspInit+0x74>)
 80018a0:	f001 f9fc 	bl	8002c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018a4:	bf00      	nop
 80018a6:	3720      	adds	r7, #32
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40012400 	.word	0x40012400
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40010800 	.word	0x40010800

080018b8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a0b      	ldr	r2, [pc, #44]	; (80018f4 <HAL_RTC_MspInit+0x3c>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d110      	bne.n	80018ec <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80018ca:	f001 fbb3 	bl	8003034 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80018ce:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <HAL_RTC_MspInit+0x40>)
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	4a09      	ldr	r2, [pc, #36]	; (80018f8 <HAL_RTC_MspInit+0x40>)
 80018d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80018d8:	61d3      	str	r3, [r2, #28]
 80018da:	4b07      	ldr	r3, [pc, #28]	; (80018f8 <HAL_RTC_MspInit+0x40>)
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80018e6:	4b05      	ldr	r3, [pc, #20]	; (80018fc <HAL_RTC_MspInit+0x44>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80018ec:	bf00      	nop
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40002800 	.word	0x40002800
 80018f8:	40021000 	.word	0x40021000
 80018fc:	4242043c 	.word	0x4242043c

08001900 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001910:	d114      	bne.n	800193c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001912:	4b15      	ldr	r3, [pc, #84]	; (8001968 <HAL_TIM_Base_MspInit+0x68>)
 8001914:	69db      	ldr	r3, [r3, #28]
 8001916:	4a14      	ldr	r2, [pc, #80]	; (8001968 <HAL_TIM_Base_MspInit+0x68>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	61d3      	str	r3, [r2, #28]
 800191e:	4b12      	ldr	r3, [pc, #72]	; (8001968 <HAL_TIM_Base_MspInit+0x68>)
 8001920:	69db      	ldr	r3, [r3, #28]
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800192a:	2200      	movs	r2, #0
 800192c:	2100      	movs	r1, #0
 800192e:	201c      	movs	r0, #28
 8001930:	f000 fedb 	bl	80026ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001934:	201c      	movs	r0, #28
 8001936:	f000 fef4 	bl	8002722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800193a:	e010      	b.n	800195e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a0a      	ldr	r2, [pc, #40]	; (800196c <HAL_TIM_Base_MspInit+0x6c>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d10b      	bne.n	800195e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001946:	4b08      	ldr	r3, [pc, #32]	; (8001968 <HAL_TIM_Base_MspInit+0x68>)
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	4a07      	ldr	r2, [pc, #28]	; (8001968 <HAL_TIM_Base_MspInit+0x68>)
 800194c:	f043 0302 	orr.w	r3, r3, #2
 8001950:	61d3      	str	r3, [r2, #28]
 8001952:	4b05      	ldr	r3, [pc, #20]	; (8001968 <HAL_TIM_Base_MspInit+0x68>)
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	60bb      	str	r3, [r7, #8]
 800195c:	68bb      	ldr	r3, [r7, #8]
}
 800195e:	bf00      	nop
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40021000 	.word	0x40021000
 800196c:	40000400 	.word	0x40000400

08001970 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001978:	f107 030c 	add.w	r3, r7, #12
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a18      	ldr	r2, [pc, #96]	; (80019ec <HAL_TIM_MspPostInit+0x7c>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d129      	bne.n	80019e4 <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001990:	4b17      	ldr	r3, [pc, #92]	; (80019f0 <HAL_TIM_MspPostInit+0x80>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	4a16      	ldr	r2, [pc, #88]	; (80019f0 <HAL_TIM_MspPostInit+0x80>)
 8001996:	f043 0308 	orr.w	r3, r3, #8
 800199a:	6193      	str	r3, [r2, #24]
 800199c:	4b14      	ldr	r3, [pc, #80]	; (80019f0 <HAL_TIM_MspPostInit+0x80>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	f003 0308 	and.w	r3, r3, #8
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80019a8:	2310      	movs	r3, #16
 80019aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ac:	2302      	movs	r3, #2
 80019ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b0:	2302      	movs	r3, #2
 80019b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b4:	f107 030c 	add.w	r3, r7, #12
 80019b8:	4619      	mov	r1, r3
 80019ba:	480e      	ldr	r0, [pc, #56]	; (80019f4 <HAL_TIM_MspPostInit+0x84>)
 80019bc:	f001 f96e 	bl	8002c9c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80019c0:	4b0d      	ldr	r3, [pc, #52]	; (80019f8 <HAL_TIM_MspPostInit+0x88>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	61fb      	str	r3, [r7, #28]
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80019cc:	61fb      	str	r3, [r7, #28]
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80019d4:	61fb      	str	r3, [r7, #28]
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019dc:	61fb      	str	r3, [r7, #28]
 80019de:	4a06      	ldr	r2, [pc, #24]	; (80019f8 <HAL_TIM_MspPostInit+0x88>)
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80019e4:	bf00      	nop
 80019e6:	3720      	adds	r7, #32
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40000400 	.word	0x40000400
 80019f0:	40021000 	.word	0x40021000
 80019f4:	40010c00 	.word	0x40010c00
 80019f8:	40010000 	.word	0x40010000

080019fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08a      	sub	sp, #40	; 0x28
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a04:	f107 0318 	add.w	r3, r7, #24
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a40      	ldr	r2, [pc, #256]	; (8001b18 <HAL_UART_MspInit+0x11c>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d13a      	bne.n	8001a92 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a1c:	4b3f      	ldr	r3, [pc, #252]	; (8001b1c <HAL_UART_MspInit+0x120>)
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	4a3e      	ldr	r2, [pc, #248]	; (8001b1c <HAL_UART_MspInit+0x120>)
 8001a22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a26:	6193      	str	r3, [r2, #24]
 8001a28:	4b3c      	ldr	r3, [pc, #240]	; (8001b1c <HAL_UART_MspInit+0x120>)
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a34:	4b39      	ldr	r3, [pc, #228]	; (8001b1c <HAL_UART_MspInit+0x120>)
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	4a38      	ldr	r2, [pc, #224]	; (8001b1c <HAL_UART_MspInit+0x120>)
 8001a3a:	f043 0304 	orr.w	r3, r3, #4
 8001a3e:	6193      	str	r3, [r2, #24]
 8001a40:	4b36      	ldr	r3, [pc, #216]	; (8001b1c <HAL_UART_MspInit+0x120>)
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a52:	2302      	movs	r3, #2
 8001a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a56:	2303      	movs	r3, #3
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5a:	f107 0318 	add.w	r3, r7, #24
 8001a5e:	4619      	mov	r1, r3
 8001a60:	482f      	ldr	r0, [pc, #188]	; (8001b20 <HAL_UART_MspInit+0x124>)
 8001a62:	f001 f91b 	bl	8002c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a74:	f107 0318 	add.w	r3, r7, #24
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4829      	ldr	r0, [pc, #164]	; (8001b20 <HAL_UART_MspInit+0x124>)
 8001a7c:	f001 f90e 	bl	8002c9c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a80:	2200      	movs	r2, #0
 8001a82:	2100      	movs	r1, #0
 8001a84:	2025      	movs	r0, #37	; 0x25
 8001a86:	f000 fe30 	bl	80026ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a8a:	2025      	movs	r0, #37	; 0x25
 8001a8c:	f000 fe49 	bl	8002722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a90:	e03e      	b.n	8001b10 <HAL_UART_MspInit+0x114>
  else if(huart->Instance==USART3)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a23      	ldr	r2, [pc, #140]	; (8001b24 <HAL_UART_MspInit+0x128>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d139      	bne.n	8001b10 <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a9c:	4b1f      	ldr	r3, [pc, #124]	; (8001b1c <HAL_UART_MspInit+0x120>)
 8001a9e:	69db      	ldr	r3, [r3, #28]
 8001aa0:	4a1e      	ldr	r2, [pc, #120]	; (8001b1c <HAL_UART_MspInit+0x120>)
 8001aa2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aa6:	61d3      	str	r3, [r2, #28]
 8001aa8:	4b1c      	ldr	r3, [pc, #112]	; (8001b1c <HAL_UART_MspInit+0x120>)
 8001aaa:	69db      	ldr	r3, [r3, #28]
 8001aac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab4:	4b19      	ldr	r3, [pc, #100]	; (8001b1c <HAL_UART_MspInit+0x120>)
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	4a18      	ldr	r2, [pc, #96]	; (8001b1c <HAL_UART_MspInit+0x120>)
 8001aba:	f043 0308 	orr.w	r3, r3, #8
 8001abe:	6193      	str	r3, [r2, #24]
 8001ac0:	4b16      	ldr	r3, [pc, #88]	; (8001b1c <HAL_UART_MspInit+0x120>)
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	f003 0308 	and.w	r3, r3, #8
 8001ac8:	60bb      	str	r3, [r7, #8]
 8001aca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001acc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ada:	f107 0318 	add.w	r3, r7, #24
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4811      	ldr	r0, [pc, #68]	; (8001b28 <HAL_UART_MspInit+0x12c>)
 8001ae2:	f001 f8db 	bl	8002c9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001ae6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aec:	2300      	movs	r3, #0
 8001aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af4:	f107 0318 	add.w	r3, r7, #24
 8001af8:	4619      	mov	r1, r3
 8001afa:	480b      	ldr	r0, [pc, #44]	; (8001b28 <HAL_UART_MspInit+0x12c>)
 8001afc:	f001 f8ce 	bl	8002c9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001b00:	2200      	movs	r2, #0
 8001b02:	2100      	movs	r1, #0
 8001b04:	2027      	movs	r0, #39	; 0x27
 8001b06:	f000 fdf0 	bl	80026ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b0a:	2027      	movs	r0, #39	; 0x27
 8001b0c:	f000 fe09 	bl	8002722 <HAL_NVIC_EnableIRQ>
}
 8001b10:	bf00      	nop
 8001b12:	3728      	adds	r7, #40	; 0x28
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40013800 	.word	0x40013800
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40010800 	.word	0x40010800
 8001b24:	40004800 	.word	0x40004800
 8001b28:	40010c00 	.word	0x40010c00

08001b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <NMI_Handler+0x4>

08001b32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b36:	e7fe      	b.n	8001b36 <HardFault_Handler+0x4>

08001b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b3c:	e7fe      	b.n	8001b3c <MemManage_Handler+0x4>

08001b3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b42:	e7fe      	b.n	8001b42 <BusFault_Handler+0x4>

08001b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b48:	e7fe      	b.n	8001b48 <UsageFault_Handler+0x4>

08001b4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bc80      	pop	{r7}
 8001b54:	4770      	bx	lr

08001b56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b56:	b480      	push	{r7}
 8001b58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bc80      	pop	{r7}
 8001b60:	4770      	bx	lr

08001b62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bc80      	pop	{r7}
 8001b6c:	4770      	bx	lr

08001b6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b72:	f000 f893 	bl	8001c9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
	...

08001b7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b80:	4802      	ldr	r0, [pc, #8]	; (8001b8c <TIM2_IRQHandler+0x10>)
 8001b82:	f002 ff45 	bl	8004a10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	200003a0 	.word	0x200003a0

08001b90 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b94:	4802      	ldr	r0, [pc, #8]	; (8001ba0 <USART1_IRQHandler+0x10>)
 8001b96:	f003 fde3 	bl	8005760 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	200002ec 	.word	0x200002ec

08001ba4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ba8:	4802      	ldr	r0, [pc, #8]	; (8001bb4 <USART3_IRQHandler+0x10>)
 8001baa:	f003 fdd9 	bl	8005760 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000224 	.word	0x20000224

08001bb8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr

08001bc4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001bc4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001bc6:	e003      	b.n	8001bd0 <LoopCopyDataInit>

08001bc8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001bca:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001bcc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001bce:	3104      	adds	r1, #4

08001bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001bd0:	480a      	ldr	r0, [pc, #40]	; (8001bfc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001bd4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001bd6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001bd8:	d3f6      	bcc.n	8001bc8 <CopyDataInit>
  ldr r2, =_sbss
 8001bda:	4a0a      	ldr	r2, [pc, #40]	; (8001c04 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001bdc:	e002      	b.n	8001be4 <LoopFillZerobss>

08001bde <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001bde:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001be0:	f842 3b04 	str.w	r3, [r2], #4

08001be4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001be4:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001be6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001be8:	d3f9      	bcc.n	8001bde <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bea:	f7ff ffe5 	bl	8001bb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bee:	f004 f86f 	bl	8005cd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bf2:	f7fe fdaf 	bl	8000754 <main>
  bx lr
 8001bf6:	4770      	bx	lr
  ldr r3, =_sidata
 8001bf8:	08005db0 	.word	0x08005db0
  ldr r0, =_sdata
 8001bfc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001c00:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001c04:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8001c08:	200005e8 	.word	0x200005e8

08001c0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c0c:	e7fe      	b.n	8001c0c <ADC1_2_IRQHandler>
	...

08001c10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c14:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <HAL_Init+0x28>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a07      	ldr	r2, [pc, #28]	; (8001c38 <HAL_Init+0x28>)
 8001c1a:	f043 0310 	orr.w	r3, r3, #16
 8001c1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c20:	2003      	movs	r0, #3
 8001c22:	f000 fd57 	bl	80026d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c26:	2000      	movs	r0, #0
 8001c28:	f000 f808 	bl	8001c3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c2c:	f7ff fdd6 	bl	80017dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40022000 	.word	0x40022000

08001c3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c44:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <HAL_InitTick+0x54>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <HAL_InitTick+0x58>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 fd6f 	bl	800273e <HAL_SYSTICK_Config>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e00e      	b.n	8001c88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b0f      	cmp	r3, #15
 8001c6e:	d80a      	bhi.n	8001c86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c70:	2200      	movs	r2, #0
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	f04f 30ff 	mov.w	r0, #4294967295
 8001c78:	f000 fd37 	bl	80026ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c7c:	4a06      	ldr	r2, [pc, #24]	; (8001c98 <HAL_InitTick+0x5c>)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
 8001c84:	e000      	b.n	8001c88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20000000 	.word	0x20000000
 8001c94:	20000008 	.word	0x20000008
 8001c98:	20000004 	.word	0x20000004

08001c9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca0:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <HAL_IncTick+0x1c>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <HAL_IncTick+0x20>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4413      	add	r3, r2
 8001cac:	4a03      	ldr	r2, [pc, #12]	; (8001cbc <HAL_IncTick+0x20>)
 8001cae:	6013      	str	r3, [r2, #0]
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr
 8001cb8:	20000008 	.word	0x20000008
 8001cbc:	200005c0 	.word	0x200005c0

08001cc0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc4:	4b02      	ldr	r3, [pc, #8]	; (8001cd0 <HAL_GetTick+0x10>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr
 8001cd0:	200005c0 	.word	0x200005c0

08001cd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cdc:	f7ff fff0 	bl	8001cc0 <HAL_GetTick>
 8001ce0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cec:	d005      	beq.n	8001cfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cee:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <HAL_Delay+0x44>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cfa:	bf00      	nop
 8001cfc:	f7ff ffe0 	bl	8001cc0 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d8f7      	bhi.n	8001cfc <HAL_Delay+0x28>
  {
  }
}
 8001d0c:	bf00      	nop
 8001d0e:	bf00      	nop
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000008 	.word	0x20000008

08001d1c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d24:	2300      	movs	r3, #0
 8001d26:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e0be      	b.n	8001ebc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d109      	bne.n	8001d60 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f7ff fd70 	bl	8001840 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 fbb1 	bl	80024c8 <ADC_ConversionStop_Disable>
 8001d66:	4603      	mov	r3, r0
 8001d68:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6e:	f003 0310 	and.w	r3, r3, #16
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f040 8099 	bne.w	8001eaa <HAL_ADC_Init+0x18e>
 8001d78:	7dfb      	ldrb	r3, [r7, #23]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f040 8095 	bne.w	8001eaa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d84:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d88:	f023 0302 	bic.w	r3, r3, #2
 8001d8c:	f043 0202 	orr.w	r2, r3, #2
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d9c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	7b1b      	ldrb	r3, [r3, #12]
 8001da2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001da4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001da6:	68ba      	ldr	r2, [r7, #8]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001db4:	d003      	beq.n	8001dbe <HAL_ADC_Init+0xa2>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d102      	bne.n	8001dc4 <HAL_ADC_Init+0xa8>
 8001dbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dc2:	e000      	b.n	8001dc6 <HAL_ADC_Init+0xaa>
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	7d1b      	ldrb	r3, [r3, #20]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d119      	bne.n	8001e08 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	7b1b      	ldrb	r3, [r3, #12]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d109      	bne.n	8001df0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	3b01      	subs	r3, #1
 8001de2:	035a      	lsls	r2, r3, #13
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001dec:	613b      	str	r3, [r7, #16]
 8001dee:	e00b      	b.n	8001e08 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df4:	f043 0220 	orr.w	r2, r3, #32
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e00:	f043 0201 	orr.w	r2, r3, #1
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	689a      	ldr	r2, [r3, #8]
 8001e22:	4b28      	ldr	r3, [pc, #160]	; (8001ec4 <HAL_ADC_Init+0x1a8>)
 8001e24:	4013      	ands	r3, r2
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6812      	ldr	r2, [r2, #0]
 8001e2a:	68b9      	ldr	r1, [r7, #8]
 8001e2c:	430b      	orrs	r3, r1
 8001e2e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e38:	d003      	beq.n	8001e42 <HAL_ADC_Init+0x126>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d104      	bne.n	8001e4c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	051b      	lsls	r3, r3, #20
 8001e4a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e52:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	689a      	ldr	r2, [r3, #8]
 8001e66:	4b18      	ldr	r3, [pc, #96]	; (8001ec8 <HAL_ADC_Init+0x1ac>)
 8001e68:	4013      	ands	r3, r2
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d10b      	bne.n	8001e88 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7a:	f023 0303 	bic.w	r3, r3, #3
 8001e7e:	f043 0201 	orr.w	r2, r3, #1
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e86:	e018      	b.n	8001eba <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8c:	f023 0312 	bic.w	r3, r3, #18
 8001e90:	f043 0210 	orr.w	r2, r3, #16
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9c:	f043 0201 	orr.w	r2, r3, #1
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ea8:	e007      	b.n	8001eba <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eae:	f043 0210 	orr.w	r2, r3, #16
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	ffe1f7fd 	.word	0xffe1f7fd
 8001ec8:	ff1f0efe 	.word	0xff1f0efe

08001ecc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d101      	bne.n	8001ee6 <HAL_ADC_Start+0x1a>
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	e098      	b.n	8002018 <HAL_ADC_Start+0x14c>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 fa98 	bl	8002424 <ADC_Enable>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001ef8:	7bfb      	ldrb	r3, [r7, #15]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f040 8087 	bne.w	800200e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f08:	f023 0301 	bic.w	r3, r3, #1
 8001f0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a41      	ldr	r2, [pc, #260]	; (8002020 <HAL_ADC_Start+0x154>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d105      	bne.n	8001f2a <HAL_ADC_Start+0x5e>
 8001f1e:	4b41      	ldr	r3, [pc, #260]	; (8002024 <HAL_ADC_Start+0x158>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d115      	bne.n	8001f56 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d026      	beq.n	8001f92 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f48:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f4c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f54:	e01d      	b.n	8001f92 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a2f      	ldr	r2, [pc, #188]	; (8002024 <HAL_ADC_Start+0x158>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d004      	beq.n	8001f76 <HAL_ADC_Start+0xaa>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a2b      	ldr	r2, [pc, #172]	; (8002020 <HAL_ADC_Start+0x154>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d10d      	bne.n	8001f92 <HAL_ADC_Start+0xc6>
 8001f76:	4b2b      	ldr	r3, [pc, #172]	; (8002024 <HAL_ADC_Start+0x158>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d007      	beq.n	8001f92 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f86:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f8a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d006      	beq.n	8001fac <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa2:	f023 0206 	bic.w	r2, r3, #6
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001faa:	e002      	b.n	8001fb2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f06f 0202 	mvn.w	r2, #2
 8001fc2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001fce:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001fd2:	d113      	bne.n	8001ffc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001fd8:	4a11      	ldr	r2, [pc, #68]	; (8002020 <HAL_ADC_Start+0x154>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d105      	bne.n	8001fea <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001fde:	4b11      	ldr	r3, [pc, #68]	; (8002024 <HAL_ADC_Start+0x158>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d108      	bne.n	8001ffc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001ff8:	609a      	str	r2, [r3, #8]
 8001ffa:	e00c      	b.n	8002016 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	e003      	b.n	8002016 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002016:	7bfb      	ldrb	r3, [r7, #15]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40012800 	.word	0x40012800
 8002024:	40012400 	.word	0x40012400

08002028 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002028:	b590      	push	{r4, r7, lr}
 800202a:	b087      	sub	sp, #28
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800203a:	2300      	movs	r3, #0
 800203c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800203e:	f7ff fe3f 	bl	8001cc0 <HAL_GetTick>
 8002042:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00b      	beq.n	800206a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002056:	f043 0220 	orr.w	r2, r3, #32
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e0c8      	b.n	80021fc <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002074:	2b00      	cmp	r3, #0
 8002076:	d12a      	bne.n	80020ce <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002082:	2b00      	cmp	r3, #0
 8002084:	d123      	bne.n	80020ce <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002086:	e01a      	b.n	80020be <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800208e:	d016      	beq.n	80020be <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d007      	beq.n	80020a6 <HAL_ADC_PollForConversion+0x7e>
 8002096:	f7ff fe13 	bl	8001cc0 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d20b      	bcs.n	80020be <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020aa:	f043 0204 	orr.w	r2, r3, #4
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e09e      	b.n	80021fc <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0dd      	beq.n	8002088 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80020cc:	e06c      	b.n	80021a8 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80020ce:	4b4d      	ldr	r3, [pc, #308]	; (8002204 <HAL_ADC_PollForConversion+0x1dc>)
 80020d0:	681c      	ldr	r4, [r3, #0]
 80020d2:	2002      	movs	r0, #2
 80020d4:	f001 fc8a 	bl	80039ec <HAL_RCCEx_GetPeriphCLKFreq>
 80020d8:	4603      	mov	r3, r0
 80020da:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	6919      	ldr	r1, [r3, #16]
 80020e4:	4b48      	ldr	r3, [pc, #288]	; (8002208 <HAL_ADC_PollForConversion+0x1e0>)
 80020e6:	400b      	ands	r3, r1
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d118      	bne.n	800211e <HAL_ADC_PollForConversion+0xf6>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68d9      	ldr	r1, [r3, #12]
 80020f2:	4b46      	ldr	r3, [pc, #280]	; (800220c <HAL_ADC_PollForConversion+0x1e4>)
 80020f4:	400b      	ands	r3, r1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d111      	bne.n	800211e <HAL_ADC_PollForConversion+0xf6>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6919      	ldr	r1, [r3, #16]
 8002100:	4b43      	ldr	r3, [pc, #268]	; (8002210 <HAL_ADC_PollForConversion+0x1e8>)
 8002102:	400b      	ands	r3, r1
 8002104:	2b00      	cmp	r3, #0
 8002106:	d108      	bne.n	800211a <HAL_ADC_PollForConversion+0xf2>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68d9      	ldr	r1, [r3, #12]
 800210e:	4b41      	ldr	r3, [pc, #260]	; (8002214 <HAL_ADC_PollForConversion+0x1ec>)
 8002110:	400b      	ands	r3, r1
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_ADC_PollForConversion+0xf2>
 8002116:	2314      	movs	r3, #20
 8002118:	e020      	b.n	800215c <HAL_ADC_PollForConversion+0x134>
 800211a:	2329      	movs	r3, #41	; 0x29
 800211c:	e01e      	b.n	800215c <HAL_ADC_PollForConversion+0x134>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6919      	ldr	r1, [r3, #16]
 8002124:	4b3a      	ldr	r3, [pc, #232]	; (8002210 <HAL_ADC_PollForConversion+0x1e8>)
 8002126:	400b      	ands	r3, r1
 8002128:	2b00      	cmp	r3, #0
 800212a:	d106      	bne.n	800213a <HAL_ADC_PollForConversion+0x112>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68d9      	ldr	r1, [r3, #12]
 8002132:	4b38      	ldr	r3, [pc, #224]	; (8002214 <HAL_ADC_PollForConversion+0x1ec>)
 8002134:	400b      	ands	r3, r1
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00d      	beq.n	8002156 <HAL_ADC_PollForConversion+0x12e>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6919      	ldr	r1, [r3, #16]
 8002140:	4b35      	ldr	r3, [pc, #212]	; (8002218 <HAL_ADC_PollForConversion+0x1f0>)
 8002142:	400b      	ands	r3, r1
 8002144:	2b00      	cmp	r3, #0
 8002146:	d108      	bne.n	800215a <HAL_ADC_PollForConversion+0x132>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68d9      	ldr	r1, [r3, #12]
 800214e:	4b32      	ldr	r3, [pc, #200]	; (8002218 <HAL_ADC_PollForConversion+0x1f0>)
 8002150:	400b      	ands	r3, r1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_ADC_PollForConversion+0x132>
 8002156:	2354      	movs	r3, #84	; 0x54
 8002158:	e000      	b.n	800215c <HAL_ADC_PollForConversion+0x134>
 800215a:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800215c:	fb02 f303 	mul.w	r3, r2, r3
 8002160:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002162:	e01d      	b.n	80021a0 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800216a:	d016      	beq.n	800219a <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d007      	beq.n	8002182 <HAL_ADC_PollForConversion+0x15a>
 8002172:	f7ff fda5 	bl	8001cc0 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	429a      	cmp	r2, r3
 8002180:	d20b      	bcs.n	800219a <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002186:	f043 0204 	orr.w	r2, r3, #4
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e030      	b.n	80021fc <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	3301      	adds	r3, #1
 800219e:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d8dd      	bhi.n	8002164 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f06f 0212 	mvn.w	r2, #18
 80021b0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80021c8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80021cc:	d115      	bne.n	80021fa <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d111      	bne.n	80021fa <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d105      	bne.n	80021fa <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f2:	f043 0201 	orr.w	r2, r3, #1
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	371c      	adds	r7, #28
 8002200:	46bd      	mov	sp, r7
 8002202:	bd90      	pop	{r4, r7, pc}
 8002204:	20000000 	.word	0x20000000
 8002208:	24924924 	.word	0x24924924
 800220c:	00924924 	.word	0x00924924
 8002210:	12492492 	.word	0x12492492
 8002214:	00492492 	.word	0x00492492
 8002218:	00249249 	.word	0x00249249

0800221c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800222a:	4618      	mov	r0, r3
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr

08002234 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800223e:	2300      	movs	r3, #0
 8002240:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002242:	2300      	movs	r3, #0
 8002244:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800224c:	2b01      	cmp	r3, #1
 800224e:	d101      	bne.n	8002254 <HAL_ADC_ConfigChannel+0x20>
 8002250:	2302      	movs	r3, #2
 8002252:	e0dc      	b.n	800240e <HAL_ADC_ConfigChannel+0x1da>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2b06      	cmp	r3, #6
 8002262:	d81c      	bhi.n	800229e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	4613      	mov	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	3b05      	subs	r3, #5
 8002276:	221f      	movs	r2, #31
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	4019      	ands	r1, r3
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	6818      	ldr	r0, [r3, #0]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	4613      	mov	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	3b05      	subs	r3, #5
 8002290:	fa00 f203 	lsl.w	r2, r0, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	430a      	orrs	r2, r1
 800229a:	635a      	str	r2, [r3, #52]	; 0x34
 800229c:	e03c      	b.n	8002318 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b0c      	cmp	r3, #12
 80022a4:	d81c      	bhi.n	80022e0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685a      	ldr	r2, [r3, #4]
 80022b0:	4613      	mov	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4413      	add	r3, r2
 80022b6:	3b23      	subs	r3, #35	; 0x23
 80022b8:	221f      	movs	r2, #31
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43db      	mvns	r3, r3
 80022c0:	4019      	ands	r1, r3
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	6818      	ldr	r0, [r3, #0]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	4613      	mov	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	3b23      	subs	r3, #35	; 0x23
 80022d2:	fa00 f203 	lsl.w	r2, r0, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	430a      	orrs	r2, r1
 80022dc:	631a      	str	r2, [r3, #48]	; 0x30
 80022de:	e01b      	b.n	8002318 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	3b41      	subs	r3, #65	; 0x41
 80022f2:	221f      	movs	r2, #31
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	4019      	ands	r1, r3
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	6818      	ldr	r0, [r3, #0]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	4613      	mov	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	3b41      	subs	r3, #65	; 0x41
 800230c:	fa00 f203 	lsl.w	r2, r0, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	430a      	orrs	r2, r1
 8002316:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b09      	cmp	r3, #9
 800231e:	d91c      	bls.n	800235a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68d9      	ldr	r1, [r3, #12]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	4613      	mov	r3, r2
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	4413      	add	r3, r2
 8002330:	3b1e      	subs	r3, #30
 8002332:	2207      	movs	r2, #7
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	4019      	ands	r1, r3
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	6898      	ldr	r0, [r3, #8]
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	4613      	mov	r3, r2
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	4413      	add	r3, r2
 800234a:	3b1e      	subs	r3, #30
 800234c:	fa00 f203 	lsl.w	r2, r0, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	60da      	str	r2, [r3, #12]
 8002358:	e019      	b.n	800238e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6919      	ldr	r1, [r3, #16]
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	4613      	mov	r3, r2
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4413      	add	r3, r2
 800236a:	2207      	movs	r2, #7
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	4019      	ands	r1, r3
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	6898      	ldr	r0, [r3, #8]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	4613      	mov	r3, r2
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	4413      	add	r3, r2
 8002382:	fa00 f203 	lsl.w	r2, r0, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	430a      	orrs	r2, r1
 800238c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2b10      	cmp	r3, #16
 8002394:	d003      	beq.n	800239e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800239a:	2b11      	cmp	r3, #17
 800239c:	d132      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a1d      	ldr	r2, [pc, #116]	; (8002418 <HAL_ADC_ConfigChannel+0x1e4>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d125      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d126      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80023c4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2b10      	cmp	r3, #16
 80023cc:	d11a      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023ce:	4b13      	ldr	r3, [pc, #76]	; (800241c <HAL_ADC_ConfigChannel+0x1e8>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a13      	ldr	r2, [pc, #76]	; (8002420 <HAL_ADC_ConfigChannel+0x1ec>)
 80023d4:	fba2 2303 	umull	r2, r3, r2, r3
 80023d8:	0c9a      	lsrs	r2, r3, #18
 80023da:	4613      	mov	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023e4:	e002      	b.n	80023ec <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	3b01      	subs	r3, #1
 80023ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f9      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x1b2>
 80023f2:	e007      	b.n	8002404 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f8:	f043 0220 	orr.w	r2, r3, #32
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800240c:	7bfb      	ldrb	r3, [r7, #15]
}
 800240e:	4618      	mov	r0, r3
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	bc80      	pop	{r7}
 8002416:	4770      	bx	lr
 8002418:	40012400 	.word	0x40012400
 800241c:	20000000 	.word	0x20000000
 8002420:	431bde83 	.word	0x431bde83

08002424 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800242c:	2300      	movs	r3, #0
 800242e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002430:	2300      	movs	r3, #0
 8002432:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b01      	cmp	r3, #1
 8002440:	d039      	beq.n	80024b6 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f042 0201 	orr.w	r2, r2, #1
 8002450:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002452:	4b1b      	ldr	r3, [pc, #108]	; (80024c0 <ADC_Enable+0x9c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a1b      	ldr	r2, [pc, #108]	; (80024c4 <ADC_Enable+0xa0>)
 8002458:	fba2 2303 	umull	r2, r3, r2, r3
 800245c:	0c9b      	lsrs	r3, r3, #18
 800245e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002460:	e002      	b.n	8002468 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	3b01      	subs	r3, #1
 8002466:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f9      	bne.n	8002462 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800246e:	f7ff fc27 	bl	8001cc0 <HAL_GetTick>
 8002472:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002474:	e018      	b.n	80024a8 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002476:	f7ff fc23 	bl	8001cc0 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d911      	bls.n	80024a8 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002488:	f043 0210 	orr.w	r2, r3, #16
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002494:	f043 0201 	orr.w	r2, r3, #1
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e007      	b.n	80024b8 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d1df      	bne.n	8002476 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	20000000 	.word	0x20000000
 80024c4:	431bde83 	.word	0x431bde83

080024c8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d127      	bne.n	8002532 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0201 	bic.w	r2, r2, #1
 80024f0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024f2:	f7ff fbe5 	bl	8001cc0 <HAL_GetTick>
 80024f6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80024f8:	e014      	b.n	8002524 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80024fa:	f7ff fbe1 	bl	8001cc0 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d90d      	bls.n	8002524 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250c:	f043 0210 	orr.w	r2, r3, #16
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002518:	f043 0201 	orr.w	r2, r3, #1
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e007      	b.n	8002534 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b01      	cmp	r3, #1
 8002530:	d0e3      	beq.n	80024fa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800254c:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <__NVIC_SetPriorityGrouping+0x44>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002558:	4013      	ands	r3, r2
 800255a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002564:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800256c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800256e:	4a04      	ldr	r2, [pc, #16]	; (8002580 <__NVIC_SetPriorityGrouping+0x44>)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	60d3      	str	r3, [r2, #12]
}
 8002574:	bf00      	nop
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002588:	4b04      	ldr	r3, [pc, #16]	; (800259c <__NVIC_GetPriorityGrouping+0x18>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	0a1b      	lsrs	r3, r3, #8
 800258e:	f003 0307 	and.w	r3, r3, #7
}
 8002592:	4618      	mov	r0, r3
 8002594:	46bd      	mov	sp, r7
 8002596:	bc80      	pop	{r7}
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	e000ed00 	.word	0xe000ed00

080025a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	db0b      	blt.n	80025ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025b2:	79fb      	ldrb	r3, [r7, #7]
 80025b4:	f003 021f 	and.w	r2, r3, #31
 80025b8:	4906      	ldr	r1, [pc, #24]	; (80025d4 <__NVIC_EnableIRQ+0x34>)
 80025ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025be:	095b      	lsrs	r3, r3, #5
 80025c0:	2001      	movs	r0, #1
 80025c2:	fa00 f202 	lsl.w	r2, r0, r2
 80025c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr
 80025d4:	e000e100 	.word	0xe000e100

080025d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	6039      	str	r1, [r7, #0]
 80025e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	db0a      	blt.n	8002602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	490c      	ldr	r1, [pc, #48]	; (8002624 <__NVIC_SetPriority+0x4c>)
 80025f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f6:	0112      	lsls	r2, r2, #4
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	440b      	add	r3, r1
 80025fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002600:	e00a      	b.n	8002618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	b2da      	uxtb	r2, r3
 8002606:	4908      	ldr	r1, [pc, #32]	; (8002628 <__NVIC_SetPriority+0x50>)
 8002608:	79fb      	ldrb	r3, [r7, #7]
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	3b04      	subs	r3, #4
 8002610:	0112      	lsls	r2, r2, #4
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	440b      	add	r3, r1
 8002616:	761a      	strb	r2, [r3, #24]
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	e000e100 	.word	0xe000e100
 8002628:	e000ed00 	.word	0xe000ed00

0800262c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800262c:	b480      	push	{r7}
 800262e:	b089      	sub	sp, #36	; 0x24
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	f1c3 0307 	rsb	r3, r3, #7
 8002646:	2b04      	cmp	r3, #4
 8002648:	bf28      	it	cs
 800264a:	2304      	movcs	r3, #4
 800264c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	3304      	adds	r3, #4
 8002652:	2b06      	cmp	r3, #6
 8002654:	d902      	bls.n	800265c <NVIC_EncodePriority+0x30>
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	3b03      	subs	r3, #3
 800265a:	e000      	b.n	800265e <NVIC_EncodePriority+0x32>
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002660:	f04f 32ff 	mov.w	r2, #4294967295
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43da      	mvns	r2, r3
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	401a      	ands	r2, r3
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002674:	f04f 31ff 	mov.w	r1, #4294967295
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	fa01 f303 	lsl.w	r3, r1, r3
 800267e:	43d9      	mvns	r1, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002684:	4313      	orrs	r3, r2
         );
}
 8002686:	4618      	mov	r0, r3
 8002688:	3724      	adds	r7, #36	; 0x24
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr

08002690 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3b01      	subs	r3, #1
 800269c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026a0:	d301      	bcc.n	80026a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026a2:	2301      	movs	r3, #1
 80026a4:	e00f      	b.n	80026c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026a6:	4a0a      	ldr	r2, [pc, #40]	; (80026d0 <SysTick_Config+0x40>)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ae:	210f      	movs	r1, #15
 80026b0:	f04f 30ff 	mov.w	r0, #4294967295
 80026b4:	f7ff ff90 	bl	80025d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026b8:	4b05      	ldr	r3, [pc, #20]	; (80026d0 <SysTick_Config+0x40>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026be:	4b04      	ldr	r3, [pc, #16]	; (80026d0 <SysTick_Config+0x40>)
 80026c0:	2207      	movs	r2, #7
 80026c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	e000e010 	.word	0xe000e010

080026d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f7ff ff2d 	bl	800253c <__NVIC_SetPriorityGrouping>
}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b086      	sub	sp, #24
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	4603      	mov	r3, r0
 80026f2:	60b9      	str	r1, [r7, #8]
 80026f4:	607a      	str	r2, [r7, #4]
 80026f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026fc:	f7ff ff42 	bl	8002584 <__NVIC_GetPriorityGrouping>
 8002700:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	68b9      	ldr	r1, [r7, #8]
 8002706:	6978      	ldr	r0, [r7, #20]
 8002708:	f7ff ff90 	bl	800262c <NVIC_EncodePriority>
 800270c:	4602      	mov	r2, r0
 800270e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002712:	4611      	mov	r1, r2
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff ff5f 	bl	80025d8 <__NVIC_SetPriority>
}
 800271a:	bf00      	nop
 800271c:	3718      	adds	r7, #24
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b082      	sub	sp, #8
 8002726:	af00      	add	r7, sp, #0
 8002728:	4603      	mov	r3, r0
 800272a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800272c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff ff35 	bl	80025a0 <__NVIC_EnableIRQ>
}
 8002736:	bf00      	nop
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b082      	sub	sp, #8
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7ff ffa2 	bl	8002690 <SysTick_Config>
 800274c:	4603      	mov	r3, r0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002760:	2300      	movs	r3, #0
 8002762:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800276a:	2b02      	cmp	r3, #2
 800276c:	d005      	beq.n	800277a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2204      	movs	r2, #4
 8002772:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	73fb      	strb	r3, [r7, #15]
 8002778:	e051      	b.n	800281e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 020e 	bic.w	r2, r2, #14
 8002788:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 0201 	bic.w	r2, r2, #1
 8002798:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a22      	ldr	r2, [pc, #136]	; (8002828 <HAL_DMA_Abort_IT+0xd0>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d029      	beq.n	80027f8 <HAL_DMA_Abort_IT+0xa0>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a20      	ldr	r2, [pc, #128]	; (800282c <HAL_DMA_Abort_IT+0xd4>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d022      	beq.n	80027f4 <HAL_DMA_Abort_IT+0x9c>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a1f      	ldr	r2, [pc, #124]	; (8002830 <HAL_DMA_Abort_IT+0xd8>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d01a      	beq.n	80027ee <HAL_DMA_Abort_IT+0x96>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a1d      	ldr	r2, [pc, #116]	; (8002834 <HAL_DMA_Abort_IT+0xdc>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d012      	beq.n	80027e8 <HAL_DMA_Abort_IT+0x90>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a1c      	ldr	r2, [pc, #112]	; (8002838 <HAL_DMA_Abort_IT+0xe0>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d00a      	beq.n	80027e2 <HAL_DMA_Abort_IT+0x8a>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a1a      	ldr	r2, [pc, #104]	; (800283c <HAL_DMA_Abort_IT+0xe4>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d102      	bne.n	80027dc <HAL_DMA_Abort_IT+0x84>
 80027d6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80027da:	e00e      	b.n	80027fa <HAL_DMA_Abort_IT+0xa2>
 80027dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027e0:	e00b      	b.n	80027fa <HAL_DMA_Abort_IT+0xa2>
 80027e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027e6:	e008      	b.n	80027fa <HAL_DMA_Abort_IT+0xa2>
 80027e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027ec:	e005      	b.n	80027fa <HAL_DMA_Abort_IT+0xa2>
 80027ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027f2:	e002      	b.n	80027fa <HAL_DMA_Abort_IT+0xa2>
 80027f4:	2310      	movs	r3, #16
 80027f6:	e000      	b.n	80027fa <HAL_DMA_Abort_IT+0xa2>
 80027f8:	2301      	movs	r3, #1
 80027fa:	4a11      	ldr	r2, [pc, #68]	; (8002840 <HAL_DMA_Abort_IT+0xe8>)
 80027fc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	4798      	blx	r3
    } 
  }
  return status;
 800281e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40020008 	.word	0x40020008
 800282c:	4002001c 	.word	0x4002001c
 8002830:	40020030 	.word	0x40020030
 8002834:	40020044 	.word	0x40020044
 8002838:	40020058 	.word	0x40020058
 800283c:	4002006c 	.word	0x4002006c
 8002840:	40020000 	.word	0x40020000

08002844 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002846:	b087      	sub	sp, #28
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8002856:	2300      	movs	r3, #0
 8002858:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800285a:	2300      	movs	r3, #0
 800285c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800285e:	4b2f      	ldr	r3, [pc, #188]	; (800291c <HAL_FLASH_Program+0xd8>)
 8002860:	7e1b      	ldrb	r3, [r3, #24]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d101      	bne.n	800286a <HAL_FLASH_Program+0x26>
 8002866:	2302      	movs	r3, #2
 8002868:	e054      	b.n	8002914 <HAL_FLASH_Program+0xd0>
 800286a:	4b2c      	ldr	r3, [pc, #176]	; (800291c <HAL_FLASH_Program+0xd8>)
 800286c:	2201      	movs	r2, #1
 800286e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002870:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002874:	f000 f8d4 	bl	8002a20 <FLASH_WaitForLastOperation>
 8002878:	4603      	mov	r3, r0
 800287a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 800287c:	7dfb      	ldrb	r3, [r7, #23]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d144      	bne.n	800290c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d102      	bne.n	800288e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002888:	2301      	movs	r3, #1
 800288a:	757b      	strb	r3, [r7, #21]
 800288c:	e007      	b.n	800289e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2b02      	cmp	r3, #2
 8002892:	d102      	bne.n	800289a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002894:	2302      	movs	r3, #2
 8002896:	757b      	strb	r3, [r7, #21]
 8002898:	e001      	b.n	800289e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800289a:	2304      	movs	r3, #4
 800289c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800289e:	2300      	movs	r3, #0
 80028a0:	75bb      	strb	r3, [r7, #22]
 80028a2:	e02d      	b.n	8002900 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80028a4:	7dbb      	ldrb	r3, [r7, #22]
 80028a6:	005a      	lsls	r2, r3, #1
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	eb02 0c03 	add.w	ip, r2, r3
 80028ae:	7dbb      	ldrb	r3, [r7, #22]
 80028b0:	0119      	lsls	r1, r3, #4
 80028b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028b6:	f1c1 0620 	rsb	r6, r1, #32
 80028ba:	f1a1 0020 	sub.w	r0, r1, #32
 80028be:	fa22 f401 	lsr.w	r4, r2, r1
 80028c2:	fa03 f606 	lsl.w	r6, r3, r6
 80028c6:	4334      	orrs	r4, r6
 80028c8:	fa23 f000 	lsr.w	r0, r3, r0
 80028cc:	4304      	orrs	r4, r0
 80028ce:	fa23 f501 	lsr.w	r5, r3, r1
 80028d2:	b2a3      	uxth	r3, r4
 80028d4:	4619      	mov	r1, r3
 80028d6:	4660      	mov	r0, ip
 80028d8:	f000 f886 	bl	80029e8 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80028dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80028e0:	f000 f89e 	bl	8002a20 <FLASH_WaitForLastOperation>
 80028e4:	4603      	mov	r3, r0
 80028e6:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80028e8:	4b0d      	ldr	r3, [pc, #52]	; (8002920 <HAL_FLASH_Program+0xdc>)
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	4a0c      	ldr	r2, [pc, #48]	; (8002920 <HAL_FLASH_Program+0xdc>)
 80028ee:	f023 0301 	bic.w	r3, r3, #1
 80028f2:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80028f4:	7dfb      	ldrb	r3, [r7, #23]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d107      	bne.n	800290a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80028fa:	7dbb      	ldrb	r3, [r7, #22]
 80028fc:	3301      	adds	r3, #1
 80028fe:	75bb      	strb	r3, [r7, #22]
 8002900:	7dba      	ldrb	r2, [r7, #22]
 8002902:	7d7b      	ldrb	r3, [r7, #21]
 8002904:	429a      	cmp	r2, r3
 8002906:	d3cd      	bcc.n	80028a4 <HAL_FLASH_Program+0x60>
 8002908:	e000      	b.n	800290c <HAL_FLASH_Program+0xc8>
      {
        break;
 800290a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800290c:	4b03      	ldr	r3, [pc, #12]	; (800291c <HAL_FLASH_Program+0xd8>)
 800290e:	2200      	movs	r2, #0
 8002910:	761a      	strb	r2, [r3, #24]

  return status;
 8002912:	7dfb      	ldrb	r3, [r7, #23]
}
 8002914:	4618      	mov	r0, r3
 8002916:	371c      	adds	r7, #28
 8002918:	46bd      	mov	sp, r7
 800291a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800291c:	200005c8 	.word	0x200005c8
 8002920:	40022000 	.word	0x40022000

08002924 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800292a:	2300      	movs	r3, #0
 800292c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800292e:	4b0d      	ldr	r3, [pc, #52]	; (8002964 <HAL_FLASH_Unlock+0x40>)
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00d      	beq.n	8002956 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800293a:	4b0a      	ldr	r3, [pc, #40]	; (8002964 <HAL_FLASH_Unlock+0x40>)
 800293c:	4a0a      	ldr	r2, [pc, #40]	; (8002968 <HAL_FLASH_Unlock+0x44>)
 800293e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002940:	4b08      	ldr	r3, [pc, #32]	; (8002964 <HAL_FLASH_Unlock+0x40>)
 8002942:	4a0a      	ldr	r2, [pc, #40]	; (800296c <HAL_FLASH_Unlock+0x48>)
 8002944:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002946:	4b07      	ldr	r3, [pc, #28]	; (8002964 <HAL_FLASH_Unlock+0x40>)
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8002956:	79fb      	ldrb	r3, [r7, #7]
}
 8002958:	4618      	mov	r0, r3
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	bc80      	pop	{r7}
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	40022000 	.word	0x40022000
 8002968:	45670123 	.word	0x45670123
 800296c:	cdef89ab 	.word	0xcdef89ab

08002970 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002974:	4b05      	ldr	r3, [pc, #20]	; (800298c <HAL_FLASH_Lock+0x1c>)
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	4a04      	ldr	r2, [pc, #16]	; (800298c <HAL_FLASH_Lock+0x1c>)
 800297a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800297e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	40022000 	.word	0x40022000

08002990 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 8002994:	4b09      	ldr	r3, [pc, #36]	; (80029bc <HAL_FLASH_OB_Unlock+0x2c>)
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800299c:	2b00      	cmp	r3, #0
 800299e:	d107      	bne.n	80029b0 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 80029a0:	4b06      	ldr	r3, [pc, #24]	; (80029bc <HAL_FLASH_OB_Unlock+0x2c>)
 80029a2:	4a07      	ldr	r2, [pc, #28]	; (80029c0 <HAL_FLASH_OB_Unlock+0x30>)
 80029a4:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 80029a6:	4b05      	ldr	r3, [pc, #20]	; (80029bc <HAL_FLASH_OB_Unlock+0x2c>)
 80029a8:	4a06      	ldr	r2, [pc, #24]	; (80029c4 <HAL_FLASH_OB_Unlock+0x34>)
 80029aa:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 80029ac:	2300      	movs	r3, #0
 80029ae:	e000      	b.n	80029b2 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bc80      	pop	{r7}
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	40022000 	.word	0x40022000
 80029c0:	45670123 	.word	0x45670123
 80029c4:	cdef89ab 	.word	0xcdef89ab

080029c8 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 80029cc:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <HAL_FLASH_OB_Lock+0x1c>)
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	4a04      	ldr	r2, [pc, #16]	; (80029e4 <HAL_FLASH_OB_Lock+0x1c>)
 80029d2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029d6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	46bd      	mov	sp, r7
 80029de:	bc80      	pop	{r7}
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	40022000 	.word	0x40022000

080029e8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	460b      	mov	r3, r1
 80029f2:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80029f4:	4b08      	ldr	r3, [pc, #32]	; (8002a18 <FLASH_Program_HalfWord+0x30>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80029fa:	4b08      	ldr	r3, [pc, #32]	; (8002a1c <FLASH_Program_HalfWord+0x34>)
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	4a07      	ldr	r2, [pc, #28]	; (8002a1c <FLASH_Program_HalfWord+0x34>)
 8002a00:	f043 0301 	orr.w	r3, r3, #1
 8002a04:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	887a      	ldrh	r2, [r7, #2]
 8002a0a:	801a      	strh	r2, [r3, #0]
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bc80      	pop	{r7}
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	200005c8 	.word	0x200005c8
 8002a1c:	40022000 	.word	0x40022000

08002a20 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002a28:	f7ff f94a 	bl	8001cc0 <HAL_GetTick>
 8002a2c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002a2e:	e010      	b.n	8002a52 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a36:	d00c      	beq.n	8002a52 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d007      	beq.n	8002a4e <FLASH_WaitForLastOperation+0x2e>
 8002a3e:	f7ff f93f 	bl	8001cc0 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d201      	bcs.n	8002a52 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e025      	b.n	8002a9e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002a52:	4b15      	ldr	r3, [pc, #84]	; (8002aa8 <FLASH_WaitForLastOperation+0x88>)
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1e8      	bne.n	8002a30 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002a5e:	4b12      	ldr	r3, [pc, #72]	; (8002aa8 <FLASH_WaitForLastOperation+0x88>)
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	f003 0320 	and.w	r3, r3, #32
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d002      	beq.n	8002a70 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002a6a:	4b0f      	ldr	r3, [pc, #60]	; (8002aa8 <FLASH_WaitForLastOperation+0x88>)
 8002a6c:	2220      	movs	r2, #32
 8002a6e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002a70:	4b0d      	ldr	r3, [pc, #52]	; (8002aa8 <FLASH_WaitForLastOperation+0x88>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	f003 0310 	and.w	r3, r3, #16
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10b      	bne.n	8002a94 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002a7c:	4b0a      	ldr	r3, [pc, #40]	; (8002aa8 <FLASH_WaitForLastOperation+0x88>)
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d105      	bne.n	8002a94 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002a88:	4b07      	ldr	r3, [pc, #28]	; (8002aa8 <FLASH_WaitForLastOperation+0x88>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d003      	beq.n	8002a9c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002a94:	f000 f80a 	bl	8002aac <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e000      	b.n	8002a9e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40022000 	.word	0x40022000

08002aac <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002ab6:	4b23      	ldr	r3, [pc, #140]	; (8002b44 <FLASH_SetErrorCode+0x98>)
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f003 0310 	and.w	r3, r3, #16
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d009      	beq.n	8002ad6 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002ac2:	4b21      	ldr	r3, [pc, #132]	; (8002b48 <FLASH_SetErrorCode+0x9c>)
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	f043 0302 	orr.w	r3, r3, #2
 8002aca:	4a1f      	ldr	r2, [pc, #124]	; (8002b48 <FLASH_SetErrorCode+0x9c>)
 8002acc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f043 0310 	orr.w	r3, r3, #16
 8002ad4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002ad6:	4b1b      	ldr	r3, [pc, #108]	; (8002b44 <FLASH_SetErrorCode+0x98>)
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	f003 0304 	and.w	r3, r3, #4
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d009      	beq.n	8002af6 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002ae2:	4b19      	ldr	r3, [pc, #100]	; (8002b48 <FLASH_SetErrorCode+0x9c>)
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	f043 0301 	orr.w	r3, r3, #1
 8002aea:	4a17      	ldr	r2, [pc, #92]	; (8002b48 <FLASH_SetErrorCode+0x9c>)
 8002aec:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f043 0304 	orr.w	r3, r3, #4
 8002af4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002af6:	4b13      	ldr	r3, [pc, #76]	; (8002b44 <FLASH_SetErrorCode+0x98>)
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00b      	beq.n	8002b1a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002b02:	4b11      	ldr	r3, [pc, #68]	; (8002b48 <FLASH_SetErrorCode+0x9c>)
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	f043 0304 	orr.w	r3, r3, #4
 8002b0a:	4a0f      	ldr	r2, [pc, #60]	; (8002b48 <FLASH_SetErrorCode+0x9c>)
 8002b0c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002b0e:	4b0d      	ldr	r3, [pc, #52]	; (8002b44 <FLASH_SetErrorCode+0x98>)
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	4a0c      	ldr	r2, [pc, #48]	; (8002b44 <FLASH_SetErrorCode+0x98>)
 8002b14:	f023 0301 	bic.w	r3, r3, #1
 8002b18:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f240 1201 	movw	r2, #257	; 0x101
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d106      	bne.n	8002b32 <FLASH_SetErrorCode+0x86>
 8002b24:	4b07      	ldr	r3, [pc, #28]	; (8002b44 <FLASH_SetErrorCode+0x98>)
 8002b26:	69db      	ldr	r3, [r3, #28]
 8002b28:	4a06      	ldr	r2, [pc, #24]	; (8002b44 <FLASH_SetErrorCode+0x98>)
 8002b2a:	f023 0301 	bic.w	r3, r3, #1
 8002b2e:	61d3      	str	r3, [r2, #28]
}  
 8002b30:	e002      	b.n	8002b38 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002b32:	4a04      	ldr	r2, [pc, #16]	; (8002b44 <FLASH_SetErrorCode+0x98>)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	60d3      	str	r3, [r2, #12]
}  
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc80      	pop	{r7}
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	40022000 	.word	0x40022000
 8002b48:	200005c8 	.word	0x200005c8

08002b4c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002b5e:	4b2f      	ldr	r3, [pc, #188]	; (8002c1c <HAL_FLASHEx_Erase+0xd0>)
 8002b60:	7e1b      	ldrb	r3, [r3, #24]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d101      	bne.n	8002b6a <HAL_FLASHEx_Erase+0x1e>
 8002b66:	2302      	movs	r3, #2
 8002b68:	e053      	b.n	8002c12 <HAL_FLASHEx_Erase+0xc6>
 8002b6a:	4b2c      	ldr	r3, [pc, #176]	; (8002c1c <HAL_FLASHEx_Erase+0xd0>)
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d116      	bne.n	8002ba6 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002b78:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b7c:	f7ff ff50 	bl	8002a20 <FLASH_WaitForLastOperation>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d141      	bne.n	8002c0a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002b86:	2001      	movs	r0, #1
 8002b88:	f000 f84c 	bl	8002c24 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b8c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b90:	f7ff ff46 	bl	8002a20 <FLASH_WaitForLastOperation>
 8002b94:	4603      	mov	r3, r0
 8002b96:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002b98:	4b21      	ldr	r3, [pc, #132]	; (8002c20 <HAL_FLASHEx_Erase+0xd4>)
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	4a20      	ldr	r2, [pc, #128]	; (8002c20 <HAL_FLASHEx_Erase+0xd4>)
 8002b9e:	f023 0304 	bic.w	r3, r3, #4
 8002ba2:	6113      	str	r3, [r2, #16]
 8002ba4:	e031      	b.n	8002c0a <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002ba6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002baa:	f7ff ff39 	bl	8002a20 <FLASH_WaitForLastOperation>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d12a      	bne.n	8002c0a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8002bba:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	e019      	b.n	8002bf8 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002bc4:	68b8      	ldr	r0, [r7, #8]
 8002bc6:	f000 f849 	bl	8002c5c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002bca:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002bce:	f7ff ff27 	bl	8002a20 <FLASH_WaitForLastOperation>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002bd6:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <HAL_FLASHEx_Erase+0xd4>)
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	4a11      	ldr	r2, [pc, #68]	; (8002c20 <HAL_FLASHEx_Erase+0xd4>)
 8002bdc:	f023 0302 	bic.w	r3, r3, #2
 8002be0:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002be2:	7bfb      	ldrb	r3, [r7, #15]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d003      	beq.n	8002bf0 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	601a      	str	r2, [r3, #0]
            break;
 8002bee:	e00c      	b.n	8002c0a <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bf6:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	029a      	lsls	r2, r3, #10
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8002c04:	68ba      	ldr	r2, [r7, #8]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d3dc      	bcc.n	8002bc4 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002c0a:	4b04      	ldr	r3, [pc, #16]	; (8002c1c <HAL_FLASHEx_Erase+0xd0>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	761a      	strb	r2, [r3, #24]

  return status;
 8002c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	200005c8 	.word	0x200005c8
 8002c20:	40022000 	.word	0x40022000

08002c24 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002c2c:	4b09      	ldr	r3, [pc, #36]	; (8002c54 <FLASH_MassErase+0x30>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002c32:	4b09      	ldr	r3, [pc, #36]	; (8002c58 <FLASH_MassErase+0x34>)
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	4a08      	ldr	r2, [pc, #32]	; (8002c58 <FLASH_MassErase+0x34>)
 8002c38:	f043 0304 	orr.w	r3, r3, #4
 8002c3c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002c3e:	4b06      	ldr	r3, [pc, #24]	; (8002c58 <FLASH_MassErase+0x34>)
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	4a05      	ldr	r2, [pc, #20]	; (8002c58 <FLASH_MassErase+0x34>)
 8002c44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c48:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr
 8002c54:	200005c8 	.word	0x200005c8
 8002c58:	40022000 	.word	0x40022000

08002c5c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002c64:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <FLASH_PageErase+0x38>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002c6a:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <FLASH_PageErase+0x3c>)
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	4a0a      	ldr	r2, [pc, #40]	; (8002c98 <FLASH_PageErase+0x3c>)
 8002c70:	f043 0302 	orr.w	r3, r3, #2
 8002c74:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002c76:	4a08      	ldr	r2, [pc, #32]	; (8002c98 <FLASH_PageErase+0x3c>)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002c7c:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <FLASH_PageErase+0x3c>)
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	4a05      	ldr	r2, [pc, #20]	; (8002c98 <FLASH_PageErase+0x3c>)
 8002c82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c86:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bc80      	pop	{r7}
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	200005c8 	.word	0x200005c8
 8002c98:	40022000 	.word	0x40022000

08002c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b08b      	sub	sp, #44	; 0x2c
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002caa:	2300      	movs	r3, #0
 8002cac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cae:	e169      	b.n	8002f84 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	69fa      	ldr	r2, [r7, #28]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	f040 8158 	bne.w	8002f7e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	4a9a      	ldr	r2, [pc, #616]	; (8002f3c <HAL_GPIO_Init+0x2a0>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d05e      	beq.n	8002d96 <HAL_GPIO_Init+0xfa>
 8002cd8:	4a98      	ldr	r2, [pc, #608]	; (8002f3c <HAL_GPIO_Init+0x2a0>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d875      	bhi.n	8002dca <HAL_GPIO_Init+0x12e>
 8002cde:	4a98      	ldr	r2, [pc, #608]	; (8002f40 <HAL_GPIO_Init+0x2a4>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d058      	beq.n	8002d96 <HAL_GPIO_Init+0xfa>
 8002ce4:	4a96      	ldr	r2, [pc, #600]	; (8002f40 <HAL_GPIO_Init+0x2a4>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d86f      	bhi.n	8002dca <HAL_GPIO_Init+0x12e>
 8002cea:	4a96      	ldr	r2, [pc, #600]	; (8002f44 <HAL_GPIO_Init+0x2a8>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d052      	beq.n	8002d96 <HAL_GPIO_Init+0xfa>
 8002cf0:	4a94      	ldr	r2, [pc, #592]	; (8002f44 <HAL_GPIO_Init+0x2a8>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d869      	bhi.n	8002dca <HAL_GPIO_Init+0x12e>
 8002cf6:	4a94      	ldr	r2, [pc, #592]	; (8002f48 <HAL_GPIO_Init+0x2ac>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d04c      	beq.n	8002d96 <HAL_GPIO_Init+0xfa>
 8002cfc:	4a92      	ldr	r2, [pc, #584]	; (8002f48 <HAL_GPIO_Init+0x2ac>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d863      	bhi.n	8002dca <HAL_GPIO_Init+0x12e>
 8002d02:	4a92      	ldr	r2, [pc, #584]	; (8002f4c <HAL_GPIO_Init+0x2b0>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d046      	beq.n	8002d96 <HAL_GPIO_Init+0xfa>
 8002d08:	4a90      	ldr	r2, [pc, #576]	; (8002f4c <HAL_GPIO_Init+0x2b0>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d85d      	bhi.n	8002dca <HAL_GPIO_Init+0x12e>
 8002d0e:	2b12      	cmp	r3, #18
 8002d10:	d82a      	bhi.n	8002d68 <HAL_GPIO_Init+0xcc>
 8002d12:	2b12      	cmp	r3, #18
 8002d14:	d859      	bhi.n	8002dca <HAL_GPIO_Init+0x12e>
 8002d16:	a201      	add	r2, pc, #4	; (adr r2, 8002d1c <HAL_GPIO_Init+0x80>)
 8002d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1c:	08002d97 	.word	0x08002d97
 8002d20:	08002d71 	.word	0x08002d71
 8002d24:	08002d83 	.word	0x08002d83
 8002d28:	08002dc5 	.word	0x08002dc5
 8002d2c:	08002dcb 	.word	0x08002dcb
 8002d30:	08002dcb 	.word	0x08002dcb
 8002d34:	08002dcb 	.word	0x08002dcb
 8002d38:	08002dcb 	.word	0x08002dcb
 8002d3c:	08002dcb 	.word	0x08002dcb
 8002d40:	08002dcb 	.word	0x08002dcb
 8002d44:	08002dcb 	.word	0x08002dcb
 8002d48:	08002dcb 	.word	0x08002dcb
 8002d4c:	08002dcb 	.word	0x08002dcb
 8002d50:	08002dcb 	.word	0x08002dcb
 8002d54:	08002dcb 	.word	0x08002dcb
 8002d58:	08002dcb 	.word	0x08002dcb
 8002d5c:	08002dcb 	.word	0x08002dcb
 8002d60:	08002d79 	.word	0x08002d79
 8002d64:	08002d8d 	.word	0x08002d8d
 8002d68:	4a79      	ldr	r2, [pc, #484]	; (8002f50 <HAL_GPIO_Init+0x2b4>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d013      	beq.n	8002d96 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d6e:	e02c      	b.n	8002dca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	623b      	str	r3, [r7, #32]
          break;
 8002d76:	e029      	b.n	8002dcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	3304      	adds	r3, #4
 8002d7e:	623b      	str	r3, [r7, #32]
          break;
 8002d80:	e024      	b.n	8002dcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	3308      	adds	r3, #8
 8002d88:	623b      	str	r3, [r7, #32]
          break;
 8002d8a:	e01f      	b.n	8002dcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	330c      	adds	r3, #12
 8002d92:	623b      	str	r3, [r7, #32]
          break;
 8002d94:	e01a      	b.n	8002dcc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d102      	bne.n	8002da4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d9e:	2304      	movs	r3, #4
 8002da0:	623b      	str	r3, [r7, #32]
          break;
 8002da2:	e013      	b.n	8002dcc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d105      	bne.n	8002db8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002dac:	2308      	movs	r3, #8
 8002dae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69fa      	ldr	r2, [r7, #28]
 8002db4:	611a      	str	r2, [r3, #16]
          break;
 8002db6:	e009      	b.n	8002dcc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002db8:	2308      	movs	r3, #8
 8002dba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	69fa      	ldr	r2, [r7, #28]
 8002dc0:	615a      	str	r2, [r3, #20]
          break;
 8002dc2:	e003      	b.n	8002dcc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	623b      	str	r3, [r7, #32]
          break;
 8002dc8:	e000      	b.n	8002dcc <HAL_GPIO_Init+0x130>
          break;
 8002dca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	2bff      	cmp	r3, #255	; 0xff
 8002dd0:	d801      	bhi.n	8002dd6 <HAL_GPIO_Init+0x13a>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	e001      	b.n	8002dda <HAL_GPIO_Init+0x13e>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	3304      	adds	r3, #4
 8002dda:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	2bff      	cmp	r3, #255	; 0xff
 8002de0:	d802      	bhi.n	8002de8 <HAL_GPIO_Init+0x14c>
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	e002      	b.n	8002dee <HAL_GPIO_Init+0x152>
 8002de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dea:	3b08      	subs	r3, #8
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	210f      	movs	r1, #15
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	401a      	ands	r2, r3
 8002e00:	6a39      	ldr	r1, [r7, #32]
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	fa01 f303 	lsl.w	r3, r1, r3
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f000 80b1 	beq.w	8002f7e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e1c:	4b4d      	ldr	r3, [pc, #308]	; (8002f54 <HAL_GPIO_Init+0x2b8>)
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	4a4c      	ldr	r2, [pc, #304]	; (8002f54 <HAL_GPIO_Init+0x2b8>)
 8002e22:	f043 0301 	orr.w	r3, r3, #1
 8002e26:	6193      	str	r3, [r2, #24]
 8002e28:	4b4a      	ldr	r3, [pc, #296]	; (8002f54 <HAL_GPIO_Init+0x2b8>)
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	60bb      	str	r3, [r7, #8]
 8002e32:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e34:	4a48      	ldr	r2, [pc, #288]	; (8002f58 <HAL_GPIO_Init+0x2bc>)
 8002e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e38:	089b      	lsrs	r3, r3, #2
 8002e3a:	3302      	adds	r3, #2
 8002e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e40:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e44:	f003 0303 	and.w	r3, r3, #3
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	220f      	movs	r2, #15
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	43db      	mvns	r3, r3
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	4013      	ands	r3, r2
 8002e56:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a40      	ldr	r2, [pc, #256]	; (8002f5c <HAL_GPIO_Init+0x2c0>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d013      	beq.n	8002e88 <HAL_GPIO_Init+0x1ec>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a3f      	ldr	r2, [pc, #252]	; (8002f60 <HAL_GPIO_Init+0x2c4>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d00d      	beq.n	8002e84 <HAL_GPIO_Init+0x1e8>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a3e      	ldr	r2, [pc, #248]	; (8002f64 <HAL_GPIO_Init+0x2c8>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d007      	beq.n	8002e80 <HAL_GPIO_Init+0x1e4>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a3d      	ldr	r2, [pc, #244]	; (8002f68 <HAL_GPIO_Init+0x2cc>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d101      	bne.n	8002e7c <HAL_GPIO_Init+0x1e0>
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e006      	b.n	8002e8a <HAL_GPIO_Init+0x1ee>
 8002e7c:	2304      	movs	r3, #4
 8002e7e:	e004      	b.n	8002e8a <HAL_GPIO_Init+0x1ee>
 8002e80:	2302      	movs	r3, #2
 8002e82:	e002      	b.n	8002e8a <HAL_GPIO_Init+0x1ee>
 8002e84:	2301      	movs	r3, #1
 8002e86:	e000      	b.n	8002e8a <HAL_GPIO_Init+0x1ee>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e8c:	f002 0203 	and.w	r2, r2, #3
 8002e90:	0092      	lsls	r2, r2, #2
 8002e92:	4093      	lsls	r3, r2
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e9a:	492f      	ldr	r1, [pc, #188]	; (8002f58 <HAL_GPIO_Init+0x2bc>)
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	089b      	lsrs	r3, r3, #2
 8002ea0:	3302      	adds	r3, #2
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d006      	beq.n	8002ec2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002eb4:	4b2d      	ldr	r3, [pc, #180]	; (8002f6c <HAL_GPIO_Init+0x2d0>)
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	492c      	ldr	r1, [pc, #176]	; (8002f6c <HAL_GPIO_Init+0x2d0>)
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	600b      	str	r3, [r1, #0]
 8002ec0:	e006      	b.n	8002ed0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ec2:	4b2a      	ldr	r3, [pc, #168]	; (8002f6c <HAL_GPIO_Init+0x2d0>)
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	4928      	ldr	r1, [pc, #160]	; (8002f6c <HAL_GPIO_Init+0x2d0>)
 8002ecc:	4013      	ands	r3, r2
 8002ece:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d006      	beq.n	8002eea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002edc:	4b23      	ldr	r3, [pc, #140]	; (8002f6c <HAL_GPIO_Init+0x2d0>)
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	4922      	ldr	r1, [pc, #136]	; (8002f6c <HAL_GPIO_Init+0x2d0>)
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	604b      	str	r3, [r1, #4]
 8002ee8:	e006      	b.n	8002ef8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002eea:	4b20      	ldr	r3, [pc, #128]	; (8002f6c <HAL_GPIO_Init+0x2d0>)
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	491e      	ldr	r1, [pc, #120]	; (8002f6c <HAL_GPIO_Init+0x2d0>)
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d006      	beq.n	8002f12 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f04:	4b19      	ldr	r3, [pc, #100]	; (8002f6c <HAL_GPIO_Init+0x2d0>)
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	4918      	ldr	r1, [pc, #96]	; (8002f6c <HAL_GPIO_Init+0x2d0>)
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	608b      	str	r3, [r1, #8]
 8002f10:	e006      	b.n	8002f20 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f12:	4b16      	ldr	r3, [pc, #88]	; (8002f6c <HAL_GPIO_Init+0x2d0>)
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	43db      	mvns	r3, r3
 8002f1a:	4914      	ldr	r1, [pc, #80]	; (8002f6c <HAL_GPIO_Init+0x2d0>)
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d021      	beq.n	8002f70 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f2c:	4b0f      	ldr	r3, [pc, #60]	; (8002f6c <HAL_GPIO_Init+0x2d0>)
 8002f2e:	68da      	ldr	r2, [r3, #12]
 8002f30:	490e      	ldr	r1, [pc, #56]	; (8002f6c <HAL_GPIO_Init+0x2d0>)
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	60cb      	str	r3, [r1, #12]
 8002f38:	e021      	b.n	8002f7e <HAL_GPIO_Init+0x2e2>
 8002f3a:	bf00      	nop
 8002f3c:	10320000 	.word	0x10320000
 8002f40:	10310000 	.word	0x10310000
 8002f44:	10220000 	.word	0x10220000
 8002f48:	10210000 	.word	0x10210000
 8002f4c:	10120000 	.word	0x10120000
 8002f50:	10110000 	.word	0x10110000
 8002f54:	40021000 	.word	0x40021000
 8002f58:	40010000 	.word	0x40010000
 8002f5c:	40010800 	.word	0x40010800
 8002f60:	40010c00 	.word	0x40010c00
 8002f64:	40011000 	.word	0x40011000
 8002f68:	40011400 	.word	0x40011400
 8002f6c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f70:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <HAL_GPIO_Init+0x304>)
 8002f72:	68da      	ldr	r2, [r3, #12]
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	43db      	mvns	r3, r3
 8002f78:	4909      	ldr	r1, [pc, #36]	; (8002fa0 <HAL_GPIO_Init+0x304>)
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	3301      	adds	r3, #1
 8002f82:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f47f ae8e 	bne.w	8002cb0 <HAL_GPIO_Init+0x14>
  }
}
 8002f94:	bf00      	nop
 8002f96:	bf00      	nop
 8002f98:	372c      	adds	r7, #44	; 0x2c
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bc80      	pop	{r7}
 8002f9e:	4770      	bx	lr
 8002fa0:	40010400 	.word	0x40010400

08002fa4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	460b      	mov	r3, r1
 8002fae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	887b      	ldrh	r3, [r7, #2]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d002      	beq.n	8002fc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	73fb      	strb	r3, [r7, #15]
 8002fc0:	e001      	b.n	8002fc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3714      	adds	r7, #20
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bc80      	pop	{r7}
 8002fd0:	4770      	bx	lr

08002fd2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
 8002fda:	460b      	mov	r3, r1
 8002fdc:	807b      	strh	r3, [r7, #2]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fe2:	787b      	ldrb	r3, [r7, #1]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d003      	beq.n	8002ff0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fe8:	887a      	ldrh	r2, [r7, #2]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002fee:	e003      	b.n	8002ff8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ff0:	887b      	ldrh	r3, [r7, #2]
 8002ff2:	041a      	lsls	r2, r3, #16
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	611a      	str	r2, [r3, #16]
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bc80      	pop	{r7}
 8003000:	4770      	bx	lr

08003002 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003002:	b480      	push	{r7}
 8003004:	b085      	sub	sp, #20
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
 800300a:	460b      	mov	r3, r1
 800300c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003014:	887a      	ldrh	r2, [r7, #2]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	4013      	ands	r3, r2
 800301a:	041a      	lsls	r2, r3, #16
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	43d9      	mvns	r1, r3
 8003020:	887b      	ldrh	r3, [r7, #2]
 8003022:	400b      	ands	r3, r1
 8003024:	431a      	orrs	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	611a      	str	r2, [r3, #16]
}
 800302a:	bf00      	nop
 800302c:	3714      	adds	r7, #20
 800302e:	46bd      	mov	sp, r7
 8003030:	bc80      	pop	{r7}
 8003032:	4770      	bx	lr

08003034 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003038:	4b03      	ldr	r3, [pc, #12]	; (8003048 <HAL_PWR_EnableBkUpAccess+0x14>)
 800303a:	2201      	movs	r2, #1
 800303c:	601a      	str	r2, [r3, #0]
}
 800303e:	bf00      	nop
 8003040:	46bd      	mov	sp, r7
 8003042:	bc80      	pop	{r7}
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	420e0020 	.word	0x420e0020

0800304c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e26c      	b.n	8003538 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	f000 8087 	beq.w	800317a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800306c:	4b92      	ldr	r3, [pc, #584]	; (80032b8 <HAL_RCC_OscConfig+0x26c>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f003 030c 	and.w	r3, r3, #12
 8003074:	2b04      	cmp	r3, #4
 8003076:	d00c      	beq.n	8003092 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003078:	4b8f      	ldr	r3, [pc, #572]	; (80032b8 <HAL_RCC_OscConfig+0x26c>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f003 030c 	and.w	r3, r3, #12
 8003080:	2b08      	cmp	r3, #8
 8003082:	d112      	bne.n	80030aa <HAL_RCC_OscConfig+0x5e>
 8003084:	4b8c      	ldr	r3, [pc, #560]	; (80032b8 <HAL_RCC_OscConfig+0x26c>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800308c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003090:	d10b      	bne.n	80030aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003092:	4b89      	ldr	r3, [pc, #548]	; (80032b8 <HAL_RCC_OscConfig+0x26c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d06c      	beq.n	8003178 <HAL_RCC_OscConfig+0x12c>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d168      	bne.n	8003178 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e246      	b.n	8003538 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030b2:	d106      	bne.n	80030c2 <HAL_RCC_OscConfig+0x76>
 80030b4:	4b80      	ldr	r3, [pc, #512]	; (80032b8 <HAL_RCC_OscConfig+0x26c>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a7f      	ldr	r2, [pc, #508]	; (80032b8 <HAL_RCC_OscConfig+0x26c>)
 80030ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030be:	6013      	str	r3, [r2, #0]
 80030c0:	e02e      	b.n	8003120 <HAL_RCC_OscConfig+0xd4>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10c      	bne.n	80030e4 <HAL_RCC_OscConfig+0x98>
 80030ca:	4b7b      	ldr	r3, [pc, #492]	; (80032b8 <HAL_RCC_OscConfig+0x26c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a7a      	ldr	r2, [pc, #488]	; (80032b8 <HAL_RCC_OscConfig+0x26c>)
 80030d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030d4:	6013      	str	r3, [r2, #0]
 80030d6:	4b78      	ldr	r3, [pc, #480]	; (80032b8 <HAL_RCC_OscConfig+0x26c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a77      	ldr	r2, [pc, #476]	; (80032b8 <HAL_RCC_OscConfig+0x26c>)
 80030dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030e0:	6013      	str	r3, [r2, #0]
 80030e2:	e01d      	b.n	8003120 <HAL_RCC_OscConfig+0xd4>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030ec:	d10c      	bne.n	8003108 <HAL_RCC_OscConfig+0xbc>
 80030ee:	4b72      	ldr	r3, [pc, #456]	; (80032b8 <HAL_RCC_OscConfig+0x26c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a71      	ldr	r2, [pc, #452]	; (80032b8 <HAL_RCC_OscConfig+0x26c>)
 80030f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	4b6f      	ldr	r3, [pc, #444]	; (80032b8 <HAL_RCC_OscConfig+0x26c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a6e      	ldr	r2, [pc, #440]	; (80032b8 <HAL_RCC_OscConfig+0x26c>)
 8003100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003104:	6013      	str	r3, [r2, #0]
 8003106:	e00b      	b.n	8003120 <HAL_RCC_OscConfig+0xd4>
 8003108:	4b6b      	ldr	r3, [pc, #428]	; (80032b8 <HAL_RCC_OscConfig+0x26c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a6a      	ldr	r2, [pc, #424]	; (80032b8 <HAL_RCC_OscConfig+0x26c>)
 800310e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003112:	6013      	str	r3, [r2, #0]
 8003114:	4b68      	ldr	r3, [pc, #416]	; (80032b8 <HAL_RCC_OscConfig+0x26c>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a67      	ldr	r2, [pc, #412]	; (80032b8 <HAL_RCC_OscConfig+0x26c>)
 800311a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800311e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d013      	beq.n	8003150 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003128:	f7fe fdca 	bl	8001cc0 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003130:	f7fe fdc6 	bl	8001cc0 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b64      	cmp	r3, #100	; 0x64
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e1fa      	b.n	8003538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003142:	4b5d      	ldr	r3, [pc, #372]	; (80032b8 <HAL_RCC_OscConfig+0x26c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0f0      	beq.n	8003130 <HAL_RCC_OscConfig+0xe4>
 800314e:	e014      	b.n	800317a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003150:	f7fe fdb6 	bl	8001cc0 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003158:	f7fe fdb2 	bl	8001cc0 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b64      	cmp	r3, #100	; 0x64
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e1e6      	b.n	8003538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800316a:	4b53      	ldr	r3, [pc, #332]	; (80032b8 <HAL_RCC_OscConfig+0x26c>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1f0      	bne.n	8003158 <HAL_RCC_OscConfig+0x10c>
 8003176:	e000      	b.n	800317a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003178:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d063      	beq.n	800324e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003186:	4b4c      	ldr	r3, [pc, #304]	; (80032b8 <HAL_RCC_OscConfig+0x26c>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f003 030c 	and.w	r3, r3, #12
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00b      	beq.n	80031aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003192:	4b49      	ldr	r3, [pc, #292]	; (80032b8 <HAL_RCC_OscConfig+0x26c>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f003 030c 	and.w	r3, r3, #12
 800319a:	2b08      	cmp	r3, #8
 800319c:	d11c      	bne.n	80031d8 <HAL_RCC_OscConfig+0x18c>
 800319e:	4b46      	ldr	r3, [pc, #280]	; (80032b8 <HAL_RCC_OscConfig+0x26c>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d116      	bne.n	80031d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031aa:	4b43      	ldr	r3, [pc, #268]	; (80032b8 <HAL_RCC_OscConfig+0x26c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d005      	beq.n	80031c2 <HAL_RCC_OscConfig+0x176>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d001      	beq.n	80031c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e1ba      	b.n	8003538 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c2:	4b3d      	ldr	r3, [pc, #244]	; (80032b8 <HAL_RCC_OscConfig+0x26c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	4939      	ldr	r1, [pc, #228]	; (80032b8 <HAL_RCC_OscConfig+0x26c>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031d6:	e03a      	b.n	800324e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d020      	beq.n	8003222 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031e0:	4b36      	ldr	r3, [pc, #216]	; (80032bc <HAL_RCC_OscConfig+0x270>)
 80031e2:	2201      	movs	r2, #1
 80031e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e6:	f7fe fd6b 	bl	8001cc0 <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ec:	e008      	b.n	8003200 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031ee:	f7fe fd67 	bl	8001cc0 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e19b      	b.n	8003538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003200:	4b2d      	ldr	r3, [pc, #180]	; (80032b8 <HAL_RCC_OscConfig+0x26c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0f0      	beq.n	80031ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800320c:	4b2a      	ldr	r3, [pc, #168]	; (80032b8 <HAL_RCC_OscConfig+0x26c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	4927      	ldr	r1, [pc, #156]	; (80032b8 <HAL_RCC_OscConfig+0x26c>)
 800321c:	4313      	orrs	r3, r2
 800321e:	600b      	str	r3, [r1, #0]
 8003220:	e015      	b.n	800324e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003222:	4b26      	ldr	r3, [pc, #152]	; (80032bc <HAL_RCC_OscConfig+0x270>)
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003228:	f7fe fd4a 	bl	8001cc0 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003230:	f7fe fd46 	bl	8001cc0 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e17a      	b.n	8003538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003242:	4b1d      	ldr	r3, [pc, #116]	; (80032b8 <HAL_RCC_OscConfig+0x26c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1f0      	bne.n	8003230 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0308 	and.w	r3, r3, #8
 8003256:	2b00      	cmp	r3, #0
 8003258:	d03a      	beq.n	80032d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d019      	beq.n	8003296 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003262:	4b17      	ldr	r3, [pc, #92]	; (80032c0 <HAL_RCC_OscConfig+0x274>)
 8003264:	2201      	movs	r2, #1
 8003266:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003268:	f7fe fd2a 	bl	8001cc0 <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003270:	f7fe fd26 	bl	8001cc0 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e15a      	b.n	8003538 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003282:	4b0d      	ldr	r3, [pc, #52]	; (80032b8 <HAL_RCC_OscConfig+0x26c>)
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0f0      	beq.n	8003270 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800328e:	2001      	movs	r0, #1
 8003290:	f000 fad8 	bl	8003844 <RCC_Delay>
 8003294:	e01c      	b.n	80032d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003296:	4b0a      	ldr	r3, [pc, #40]	; (80032c0 <HAL_RCC_OscConfig+0x274>)
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800329c:	f7fe fd10 	bl	8001cc0 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032a2:	e00f      	b.n	80032c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032a4:	f7fe fd0c 	bl	8001cc0 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d908      	bls.n	80032c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e140      	b.n	8003538 <HAL_RCC_OscConfig+0x4ec>
 80032b6:	bf00      	nop
 80032b8:	40021000 	.word	0x40021000
 80032bc:	42420000 	.word	0x42420000
 80032c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032c4:	4b9e      	ldr	r3, [pc, #632]	; (8003540 <HAL_RCC_OscConfig+0x4f4>)
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1e9      	bne.n	80032a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 80a6 	beq.w	800342a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032de:	2300      	movs	r3, #0
 80032e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032e2:	4b97      	ldr	r3, [pc, #604]	; (8003540 <HAL_RCC_OscConfig+0x4f4>)
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10d      	bne.n	800330a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032ee:	4b94      	ldr	r3, [pc, #592]	; (8003540 <HAL_RCC_OscConfig+0x4f4>)
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	4a93      	ldr	r2, [pc, #588]	; (8003540 <HAL_RCC_OscConfig+0x4f4>)
 80032f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032f8:	61d3      	str	r3, [r2, #28]
 80032fa:	4b91      	ldr	r3, [pc, #580]	; (8003540 <HAL_RCC_OscConfig+0x4f4>)
 80032fc:	69db      	ldr	r3, [r3, #28]
 80032fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003302:	60bb      	str	r3, [r7, #8]
 8003304:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003306:	2301      	movs	r3, #1
 8003308:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800330a:	4b8e      	ldr	r3, [pc, #568]	; (8003544 <HAL_RCC_OscConfig+0x4f8>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003312:	2b00      	cmp	r3, #0
 8003314:	d118      	bne.n	8003348 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003316:	4b8b      	ldr	r3, [pc, #556]	; (8003544 <HAL_RCC_OscConfig+0x4f8>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a8a      	ldr	r2, [pc, #552]	; (8003544 <HAL_RCC_OscConfig+0x4f8>)
 800331c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003320:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003322:	f7fe fccd 	bl	8001cc0 <HAL_GetTick>
 8003326:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003328:	e008      	b.n	800333c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800332a:	f7fe fcc9 	bl	8001cc0 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b64      	cmp	r3, #100	; 0x64
 8003336:	d901      	bls.n	800333c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e0fd      	b.n	8003538 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800333c:	4b81      	ldr	r3, [pc, #516]	; (8003544 <HAL_RCC_OscConfig+0x4f8>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003344:	2b00      	cmp	r3, #0
 8003346:	d0f0      	beq.n	800332a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d106      	bne.n	800335e <HAL_RCC_OscConfig+0x312>
 8003350:	4b7b      	ldr	r3, [pc, #492]	; (8003540 <HAL_RCC_OscConfig+0x4f4>)
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	4a7a      	ldr	r2, [pc, #488]	; (8003540 <HAL_RCC_OscConfig+0x4f4>)
 8003356:	f043 0301 	orr.w	r3, r3, #1
 800335a:	6213      	str	r3, [r2, #32]
 800335c:	e02d      	b.n	80033ba <HAL_RCC_OscConfig+0x36e>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10c      	bne.n	8003380 <HAL_RCC_OscConfig+0x334>
 8003366:	4b76      	ldr	r3, [pc, #472]	; (8003540 <HAL_RCC_OscConfig+0x4f4>)
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	4a75      	ldr	r2, [pc, #468]	; (8003540 <HAL_RCC_OscConfig+0x4f4>)
 800336c:	f023 0301 	bic.w	r3, r3, #1
 8003370:	6213      	str	r3, [r2, #32]
 8003372:	4b73      	ldr	r3, [pc, #460]	; (8003540 <HAL_RCC_OscConfig+0x4f4>)
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	4a72      	ldr	r2, [pc, #456]	; (8003540 <HAL_RCC_OscConfig+0x4f4>)
 8003378:	f023 0304 	bic.w	r3, r3, #4
 800337c:	6213      	str	r3, [r2, #32]
 800337e:	e01c      	b.n	80033ba <HAL_RCC_OscConfig+0x36e>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	2b05      	cmp	r3, #5
 8003386:	d10c      	bne.n	80033a2 <HAL_RCC_OscConfig+0x356>
 8003388:	4b6d      	ldr	r3, [pc, #436]	; (8003540 <HAL_RCC_OscConfig+0x4f4>)
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	4a6c      	ldr	r2, [pc, #432]	; (8003540 <HAL_RCC_OscConfig+0x4f4>)
 800338e:	f043 0304 	orr.w	r3, r3, #4
 8003392:	6213      	str	r3, [r2, #32]
 8003394:	4b6a      	ldr	r3, [pc, #424]	; (8003540 <HAL_RCC_OscConfig+0x4f4>)
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	4a69      	ldr	r2, [pc, #420]	; (8003540 <HAL_RCC_OscConfig+0x4f4>)
 800339a:	f043 0301 	orr.w	r3, r3, #1
 800339e:	6213      	str	r3, [r2, #32]
 80033a0:	e00b      	b.n	80033ba <HAL_RCC_OscConfig+0x36e>
 80033a2:	4b67      	ldr	r3, [pc, #412]	; (8003540 <HAL_RCC_OscConfig+0x4f4>)
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	4a66      	ldr	r2, [pc, #408]	; (8003540 <HAL_RCC_OscConfig+0x4f4>)
 80033a8:	f023 0301 	bic.w	r3, r3, #1
 80033ac:	6213      	str	r3, [r2, #32]
 80033ae:	4b64      	ldr	r3, [pc, #400]	; (8003540 <HAL_RCC_OscConfig+0x4f4>)
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	4a63      	ldr	r2, [pc, #396]	; (8003540 <HAL_RCC_OscConfig+0x4f4>)
 80033b4:	f023 0304 	bic.w	r3, r3, #4
 80033b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d015      	beq.n	80033ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033c2:	f7fe fc7d 	bl	8001cc0 <HAL_GetTick>
 80033c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c8:	e00a      	b.n	80033e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ca:	f7fe fc79 	bl	8001cc0 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d8:	4293      	cmp	r3, r2
 80033da:	d901      	bls.n	80033e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e0ab      	b.n	8003538 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e0:	4b57      	ldr	r3, [pc, #348]	; (8003540 <HAL_RCC_OscConfig+0x4f4>)
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d0ee      	beq.n	80033ca <HAL_RCC_OscConfig+0x37e>
 80033ec:	e014      	b.n	8003418 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ee:	f7fe fc67 	bl	8001cc0 <HAL_GetTick>
 80033f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033f4:	e00a      	b.n	800340c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033f6:	f7fe fc63 	bl	8001cc0 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	f241 3288 	movw	r2, #5000	; 0x1388
 8003404:	4293      	cmp	r3, r2
 8003406:	d901      	bls.n	800340c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e095      	b.n	8003538 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800340c:	4b4c      	ldr	r3, [pc, #304]	; (8003540 <HAL_RCC_OscConfig+0x4f4>)
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1ee      	bne.n	80033f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003418:	7dfb      	ldrb	r3, [r7, #23]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d105      	bne.n	800342a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800341e:	4b48      	ldr	r3, [pc, #288]	; (8003540 <HAL_RCC_OscConfig+0x4f4>)
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	4a47      	ldr	r2, [pc, #284]	; (8003540 <HAL_RCC_OscConfig+0x4f4>)
 8003424:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003428:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 8081 	beq.w	8003536 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003434:	4b42      	ldr	r3, [pc, #264]	; (8003540 <HAL_RCC_OscConfig+0x4f4>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f003 030c 	and.w	r3, r3, #12
 800343c:	2b08      	cmp	r3, #8
 800343e:	d061      	beq.n	8003504 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	69db      	ldr	r3, [r3, #28]
 8003444:	2b02      	cmp	r3, #2
 8003446:	d146      	bne.n	80034d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003448:	4b3f      	ldr	r3, [pc, #252]	; (8003548 <HAL_RCC_OscConfig+0x4fc>)
 800344a:	2200      	movs	r2, #0
 800344c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344e:	f7fe fc37 	bl	8001cc0 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003454:	e008      	b.n	8003468 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003456:	f7fe fc33 	bl	8001cc0 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d901      	bls.n	8003468 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e067      	b.n	8003538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003468:	4b35      	ldr	r3, [pc, #212]	; (8003540 <HAL_RCC_OscConfig+0x4f4>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1f0      	bne.n	8003456 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800347c:	d108      	bne.n	8003490 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800347e:	4b30      	ldr	r3, [pc, #192]	; (8003540 <HAL_RCC_OscConfig+0x4f4>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	492d      	ldr	r1, [pc, #180]	; (8003540 <HAL_RCC_OscConfig+0x4f4>)
 800348c:	4313      	orrs	r3, r2
 800348e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003490:	4b2b      	ldr	r3, [pc, #172]	; (8003540 <HAL_RCC_OscConfig+0x4f4>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a19      	ldr	r1, [r3, #32]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	430b      	orrs	r3, r1
 80034a2:	4927      	ldr	r1, [pc, #156]	; (8003540 <HAL_RCC_OscConfig+0x4f4>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034a8:	4b27      	ldr	r3, [pc, #156]	; (8003548 <HAL_RCC_OscConfig+0x4fc>)
 80034aa:	2201      	movs	r2, #1
 80034ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ae:	f7fe fc07 	bl	8001cc0 <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034b4:	e008      	b.n	80034c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034b6:	f7fe fc03 	bl	8001cc0 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e037      	b.n	8003538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034c8:	4b1d      	ldr	r3, [pc, #116]	; (8003540 <HAL_RCC_OscConfig+0x4f4>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d0f0      	beq.n	80034b6 <HAL_RCC_OscConfig+0x46a>
 80034d4:	e02f      	b.n	8003536 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d6:	4b1c      	ldr	r3, [pc, #112]	; (8003548 <HAL_RCC_OscConfig+0x4fc>)
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034dc:	f7fe fbf0 	bl	8001cc0 <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e4:	f7fe fbec 	bl	8001cc0 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e020      	b.n	8003538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034f6:	4b12      	ldr	r3, [pc, #72]	; (8003540 <HAL_RCC_OscConfig+0x4f4>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1f0      	bne.n	80034e4 <HAL_RCC_OscConfig+0x498>
 8003502:	e018      	b.n	8003536 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	69db      	ldr	r3, [r3, #28]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d101      	bne.n	8003510 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e013      	b.n	8003538 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003510:	4b0b      	ldr	r3, [pc, #44]	; (8003540 <HAL_RCC_OscConfig+0x4f4>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	429a      	cmp	r2, r3
 8003522:	d106      	bne.n	8003532 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800352e:	429a      	cmp	r2, r3
 8003530:	d001      	beq.n	8003536 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e000      	b.n	8003538 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3718      	adds	r7, #24
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40021000 	.word	0x40021000
 8003544:	40007000 	.word	0x40007000
 8003548:	42420060 	.word	0x42420060

0800354c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d101      	bne.n	8003560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e0d0      	b.n	8003702 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003560:	4b6a      	ldr	r3, [pc, #424]	; (800370c <HAL_RCC_ClockConfig+0x1c0>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0307 	and.w	r3, r3, #7
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	429a      	cmp	r2, r3
 800356c:	d910      	bls.n	8003590 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800356e:	4b67      	ldr	r3, [pc, #412]	; (800370c <HAL_RCC_ClockConfig+0x1c0>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f023 0207 	bic.w	r2, r3, #7
 8003576:	4965      	ldr	r1, [pc, #404]	; (800370c <HAL_RCC_ClockConfig+0x1c0>)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	4313      	orrs	r3, r2
 800357c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800357e:	4b63      	ldr	r3, [pc, #396]	; (800370c <HAL_RCC_ClockConfig+0x1c0>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0307 	and.w	r3, r3, #7
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	429a      	cmp	r2, r3
 800358a:	d001      	beq.n	8003590 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e0b8      	b.n	8003702 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d020      	beq.n	80035de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d005      	beq.n	80035b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035a8:	4b59      	ldr	r3, [pc, #356]	; (8003710 <HAL_RCC_ClockConfig+0x1c4>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	4a58      	ldr	r2, [pc, #352]	; (8003710 <HAL_RCC_ClockConfig+0x1c4>)
 80035ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80035b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0308 	and.w	r3, r3, #8
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d005      	beq.n	80035cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035c0:	4b53      	ldr	r3, [pc, #332]	; (8003710 <HAL_RCC_ClockConfig+0x1c4>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	4a52      	ldr	r2, [pc, #328]	; (8003710 <HAL_RCC_ClockConfig+0x1c4>)
 80035c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80035ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035cc:	4b50      	ldr	r3, [pc, #320]	; (8003710 <HAL_RCC_ClockConfig+0x1c4>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	494d      	ldr	r1, [pc, #308]	; (8003710 <HAL_RCC_ClockConfig+0x1c4>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d040      	beq.n	800366c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d107      	bne.n	8003602 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035f2:	4b47      	ldr	r3, [pc, #284]	; (8003710 <HAL_RCC_ClockConfig+0x1c4>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d115      	bne.n	800362a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e07f      	b.n	8003702 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	2b02      	cmp	r3, #2
 8003608:	d107      	bne.n	800361a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800360a:	4b41      	ldr	r3, [pc, #260]	; (8003710 <HAL_RCC_ClockConfig+0x1c4>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d109      	bne.n	800362a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e073      	b.n	8003702 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800361a:	4b3d      	ldr	r3, [pc, #244]	; (8003710 <HAL_RCC_ClockConfig+0x1c4>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e06b      	b.n	8003702 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800362a:	4b39      	ldr	r3, [pc, #228]	; (8003710 <HAL_RCC_ClockConfig+0x1c4>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f023 0203 	bic.w	r2, r3, #3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	4936      	ldr	r1, [pc, #216]	; (8003710 <HAL_RCC_ClockConfig+0x1c4>)
 8003638:	4313      	orrs	r3, r2
 800363a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800363c:	f7fe fb40 	bl	8001cc0 <HAL_GetTick>
 8003640:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003642:	e00a      	b.n	800365a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003644:	f7fe fb3c 	bl	8001cc0 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003652:	4293      	cmp	r3, r2
 8003654:	d901      	bls.n	800365a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e053      	b.n	8003702 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800365a:	4b2d      	ldr	r3, [pc, #180]	; (8003710 <HAL_RCC_ClockConfig+0x1c4>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f003 020c 	and.w	r2, r3, #12
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	429a      	cmp	r2, r3
 800366a:	d1eb      	bne.n	8003644 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800366c:	4b27      	ldr	r3, [pc, #156]	; (800370c <HAL_RCC_ClockConfig+0x1c0>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	429a      	cmp	r2, r3
 8003678:	d210      	bcs.n	800369c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800367a:	4b24      	ldr	r3, [pc, #144]	; (800370c <HAL_RCC_ClockConfig+0x1c0>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f023 0207 	bic.w	r2, r3, #7
 8003682:	4922      	ldr	r1, [pc, #136]	; (800370c <HAL_RCC_ClockConfig+0x1c0>)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	4313      	orrs	r3, r2
 8003688:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800368a:	4b20      	ldr	r3, [pc, #128]	; (800370c <HAL_RCC_ClockConfig+0x1c0>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0307 	and.w	r3, r3, #7
 8003692:	683a      	ldr	r2, [r7, #0]
 8003694:	429a      	cmp	r2, r3
 8003696:	d001      	beq.n	800369c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e032      	b.n	8003702 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d008      	beq.n	80036ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036a8:	4b19      	ldr	r3, [pc, #100]	; (8003710 <HAL_RCC_ClockConfig+0x1c4>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	4916      	ldr	r1, [pc, #88]	; (8003710 <HAL_RCC_ClockConfig+0x1c4>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0308 	and.w	r3, r3, #8
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d009      	beq.n	80036da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036c6:	4b12      	ldr	r3, [pc, #72]	; (8003710 <HAL_RCC_ClockConfig+0x1c4>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	490e      	ldr	r1, [pc, #56]	; (8003710 <HAL_RCC_ClockConfig+0x1c4>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036da:	f000 f821 	bl	8003720 <HAL_RCC_GetSysClockFreq>
 80036de:	4602      	mov	r2, r0
 80036e0:	4b0b      	ldr	r3, [pc, #44]	; (8003710 <HAL_RCC_ClockConfig+0x1c4>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	091b      	lsrs	r3, r3, #4
 80036e6:	f003 030f 	and.w	r3, r3, #15
 80036ea:	490a      	ldr	r1, [pc, #40]	; (8003714 <HAL_RCC_ClockConfig+0x1c8>)
 80036ec:	5ccb      	ldrb	r3, [r1, r3]
 80036ee:	fa22 f303 	lsr.w	r3, r2, r3
 80036f2:	4a09      	ldr	r2, [pc, #36]	; (8003718 <HAL_RCC_ClockConfig+0x1cc>)
 80036f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036f6:	4b09      	ldr	r3, [pc, #36]	; (800371c <HAL_RCC_ClockConfig+0x1d0>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7fe fa9e 	bl	8001c3c <HAL_InitTick>

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	40022000 	.word	0x40022000
 8003710:	40021000 	.word	0x40021000
 8003714:	08005d90 	.word	0x08005d90
 8003718:	20000000 	.word	0x20000000
 800371c:	20000004 	.word	0x20000004

08003720 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003720:	b490      	push	{r4, r7}
 8003722:	b08a      	sub	sp, #40	; 0x28
 8003724:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003726:	4b2a      	ldr	r3, [pc, #168]	; (80037d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003728:	1d3c      	adds	r4, r7, #4
 800372a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800372c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003730:	f240 2301 	movw	r3, #513	; 0x201
 8003734:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003736:	2300      	movs	r3, #0
 8003738:	61fb      	str	r3, [r7, #28]
 800373a:	2300      	movs	r3, #0
 800373c:	61bb      	str	r3, [r7, #24]
 800373e:	2300      	movs	r3, #0
 8003740:	627b      	str	r3, [r7, #36]	; 0x24
 8003742:	2300      	movs	r3, #0
 8003744:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003746:	2300      	movs	r3, #0
 8003748:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800374a:	4b22      	ldr	r3, [pc, #136]	; (80037d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	f003 030c 	and.w	r3, r3, #12
 8003756:	2b04      	cmp	r3, #4
 8003758:	d002      	beq.n	8003760 <HAL_RCC_GetSysClockFreq+0x40>
 800375a:	2b08      	cmp	r3, #8
 800375c:	d003      	beq.n	8003766 <HAL_RCC_GetSysClockFreq+0x46>
 800375e:	e02d      	b.n	80037bc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003760:	4b1d      	ldr	r3, [pc, #116]	; (80037d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003762:	623b      	str	r3, [r7, #32]
      break;
 8003764:	e02d      	b.n	80037c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	0c9b      	lsrs	r3, r3, #18
 800376a:	f003 030f 	and.w	r3, r3, #15
 800376e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003772:	4413      	add	r3, r2
 8003774:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003778:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d013      	beq.n	80037ac <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003784:	4b13      	ldr	r3, [pc, #76]	; (80037d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	0c5b      	lsrs	r3, r3, #17
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003792:	4413      	add	r3, r2
 8003794:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003798:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	4a0e      	ldr	r2, [pc, #56]	; (80037d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800379e:	fb02 f203 	mul.w	r2, r2, r3
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a8:	627b      	str	r3, [r7, #36]	; 0x24
 80037aa:	e004      	b.n	80037b6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	4a0b      	ldr	r2, [pc, #44]	; (80037dc <HAL_RCC_GetSysClockFreq+0xbc>)
 80037b0:	fb02 f303 	mul.w	r3, r2, r3
 80037b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80037b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b8:	623b      	str	r3, [r7, #32]
      break;
 80037ba:	e002      	b.n	80037c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037bc:	4b06      	ldr	r3, [pc, #24]	; (80037d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037be:	623b      	str	r3, [r7, #32]
      break;
 80037c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037c2:	6a3b      	ldr	r3, [r7, #32]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3728      	adds	r7, #40	; 0x28
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bc90      	pop	{r4, r7}
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	08005d70 	.word	0x08005d70
 80037d4:	40021000 	.word	0x40021000
 80037d8:	007a1200 	.word	0x007a1200
 80037dc:	003d0900 	.word	0x003d0900

080037e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037e4:	4b02      	ldr	r3, [pc, #8]	; (80037f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80037e6:	681b      	ldr	r3, [r3, #0]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bc80      	pop	{r7}
 80037ee:	4770      	bx	lr
 80037f0:	20000000 	.word	0x20000000

080037f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037f8:	f7ff fff2 	bl	80037e0 <HAL_RCC_GetHCLKFreq>
 80037fc:	4602      	mov	r2, r0
 80037fe:	4b05      	ldr	r3, [pc, #20]	; (8003814 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	0a1b      	lsrs	r3, r3, #8
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	4903      	ldr	r1, [pc, #12]	; (8003818 <HAL_RCC_GetPCLK1Freq+0x24>)
 800380a:	5ccb      	ldrb	r3, [r1, r3]
 800380c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003810:	4618      	mov	r0, r3
 8003812:	bd80      	pop	{r7, pc}
 8003814:	40021000 	.word	0x40021000
 8003818:	08005da0 	.word	0x08005da0

0800381c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003820:	f7ff ffde 	bl	80037e0 <HAL_RCC_GetHCLKFreq>
 8003824:	4602      	mov	r2, r0
 8003826:	4b05      	ldr	r3, [pc, #20]	; (800383c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	0adb      	lsrs	r3, r3, #11
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	4903      	ldr	r1, [pc, #12]	; (8003840 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003832:	5ccb      	ldrb	r3, [r1, r3]
 8003834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003838:	4618      	mov	r0, r3
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40021000 	.word	0x40021000
 8003840:	08005da0 	.word	0x08005da0

08003844 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800384c:	4b0a      	ldr	r3, [pc, #40]	; (8003878 <RCC_Delay+0x34>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a0a      	ldr	r2, [pc, #40]	; (800387c <RCC_Delay+0x38>)
 8003852:	fba2 2303 	umull	r2, r3, r2, r3
 8003856:	0a5b      	lsrs	r3, r3, #9
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	fb02 f303 	mul.w	r3, r2, r3
 800385e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003860:	bf00      	nop
  }
  while (Delay --);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	1e5a      	subs	r2, r3, #1
 8003866:	60fa      	str	r2, [r7, #12]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1f9      	bne.n	8003860 <RCC_Delay+0x1c>
}
 800386c:	bf00      	nop
 800386e:	bf00      	nop
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	bc80      	pop	{r7}
 8003876:	4770      	bx	lr
 8003878:	20000000 	.word	0x20000000
 800387c:	10624dd3 	.word	0x10624dd3

08003880 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003888:	2300      	movs	r3, #0
 800388a:	613b      	str	r3, [r7, #16]
 800388c:	2300      	movs	r3, #0
 800388e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b00      	cmp	r3, #0
 800389a:	d07d      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800389c:	2300      	movs	r3, #0
 800389e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038a0:	4b4f      	ldr	r3, [pc, #316]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038a2:	69db      	ldr	r3, [r3, #28]
 80038a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10d      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ac:	4b4c      	ldr	r3, [pc, #304]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ae:	69db      	ldr	r3, [r3, #28]
 80038b0:	4a4b      	ldr	r2, [pc, #300]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038b6:	61d3      	str	r3, [r2, #28]
 80038b8:	4b49      	ldr	r3, [pc, #292]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ba:	69db      	ldr	r3, [r3, #28]
 80038bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c0:	60bb      	str	r3, [r7, #8]
 80038c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038c4:	2301      	movs	r3, #1
 80038c6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c8:	4b46      	ldr	r3, [pc, #280]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d118      	bne.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038d4:	4b43      	ldr	r3, [pc, #268]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a42      	ldr	r2, [pc, #264]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038e0:	f7fe f9ee 	bl	8001cc0 <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e6:	e008      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038e8:	f7fe f9ea 	bl	8001cc0 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b64      	cmp	r3, #100	; 0x64
 80038f4:	d901      	bls.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e06d      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038fa:	4b3a      	ldr	r3, [pc, #232]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003902:	2b00      	cmp	r3, #0
 8003904:	d0f0      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003906:	4b36      	ldr	r3, [pc, #216]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800390e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d02e      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	429a      	cmp	r2, r3
 8003922:	d027      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003924:	4b2e      	ldr	r3, [pc, #184]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800392c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800392e:	4b2e      	ldr	r3, [pc, #184]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003930:	2201      	movs	r2, #1
 8003932:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003934:	4b2c      	ldr	r3, [pc, #176]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003936:	2200      	movs	r2, #0
 8003938:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800393a:	4a29      	ldr	r2, [pc, #164]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b00      	cmp	r3, #0
 8003948:	d014      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800394a:	f7fe f9b9 	bl	8001cc0 <HAL_GetTick>
 800394e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003950:	e00a      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003952:	f7fe f9b5 	bl	8001cc0 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003960:	4293      	cmp	r3, r2
 8003962:	d901      	bls.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e036      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003968:	4b1d      	ldr	r3, [pc, #116]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0ee      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003974:	4b1a      	ldr	r3, [pc, #104]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	4917      	ldr	r1, [pc, #92]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003982:	4313      	orrs	r3, r2
 8003984:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003986:	7dfb      	ldrb	r3, [r7, #23]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d105      	bne.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800398c:	4b14      	ldr	r3, [pc, #80]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800398e:	69db      	ldr	r3, [r3, #28]
 8003990:	4a13      	ldr	r2, [pc, #76]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003992:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003996:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d008      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039a4:	4b0e      	ldr	r3, [pc, #56]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	490b      	ldr	r1, [pc, #44]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0310 	and.w	r3, r3, #16
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d008      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039c2:	4b07      	ldr	r3, [pc, #28]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	4904      	ldr	r1, [pc, #16]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3718      	adds	r7, #24
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40021000 	.word	0x40021000
 80039e4:	40007000 	.word	0x40007000
 80039e8:	42420440 	.word	0x42420440

080039ec <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80039ec:	b590      	push	{r4, r7, lr}
 80039ee:	b08d      	sub	sp, #52	; 0x34
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80039f4:	4b5a      	ldr	r3, [pc, #360]	; (8003b60 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80039f6:	f107 040c 	add.w	r4, r7, #12
 80039fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a00:	f240 2301 	movw	r3, #513	; 0x201
 8003a04:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003a06:	2300      	movs	r3, #0
 8003a08:	627b      	str	r3, [r7, #36]	; 0x24
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a0e:	2300      	movs	r3, #0
 8003a10:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003a12:	2300      	movs	r3, #0
 8003a14:	61fb      	str	r3, [r7, #28]
 8003a16:	2300      	movs	r3, #0
 8003a18:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2b10      	cmp	r3, #16
 8003a1e:	d00a      	beq.n	8003a36 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b10      	cmp	r3, #16
 8003a24:	f200 8091 	bhi.w	8003b4a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d04c      	beq.n	8003ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d07c      	beq.n	8003b2e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003a34:	e089      	b.n	8003b4a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8003a36:	4b4b      	ldr	r3, [pc, #300]	; (8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003a3c:	4b49      	ldr	r3, [pc, #292]	; (8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f000 8082 	beq.w	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	0c9b      	lsrs	r3, r3, #18
 8003a4e:	f003 030f 	and.w	r3, r3, #15
 8003a52:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003a56:	4413      	add	r3, r2
 8003a58:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003a5c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d018      	beq.n	8003a9a <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a68:	4b3e      	ldr	r3, [pc, #248]	; (8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	0c5b      	lsrs	r3, r3, #17
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003a76:	4413      	add	r3, r2
 8003a78:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003a7c:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00d      	beq.n	8003aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003a88:	4a37      	ldr	r2, [pc, #220]	; (8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	fb02 f303 	mul.w	r3, r2, r3
 8003a96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a98:	e004      	b.n	8003aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a9a:	6a3b      	ldr	r3, [r7, #32]
 8003a9c:	4a33      	ldr	r2, [pc, #204]	; (8003b6c <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8003a9e:	fb02 f303 	mul.w	r3, r2, r3
 8003aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003aa4:	4b2f      	ldr	r3, [pc, #188]	; (8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ab0:	d102      	bne.n	8003ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8003ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003ab6:	e04a      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8003ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aba:	005b      	lsls	r3, r3, #1
 8003abc:	4a2c      	ldr	r2, [pc, #176]	; (8003b70 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8003abe:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac2:	085b      	lsrs	r3, r3, #1
 8003ac4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003ac6:	e042      	b.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8003ac8:	4b26      	ldr	r3, [pc, #152]	; (8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ad4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ad8:	d108      	bne.n	8003aec <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d003      	beq.n	8003aec <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8003ae4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ae8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aea:	e01f      	b.n	8003b2c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003af2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003af6:	d109      	bne.n	8003b0c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8003af8:	4b1a      	ldr	r3, [pc, #104]	; (8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d003      	beq.n	8003b0c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8003b04:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003b08:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b0a:	e00f      	b.n	8003b2c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b16:	d11c      	bne.n	8003b52 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003b18:	4b12      	ldr	r3, [pc, #72]	; (8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d016      	beq.n	8003b52 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8003b24:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003b28:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003b2a:	e012      	b.n	8003b52 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003b2c:	e011      	b.n	8003b52 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003b2e:	f7ff fe75 	bl	800381c <HAL_RCC_GetPCLK2Freq>
 8003b32:	4602      	mov	r2, r0
 8003b34:	4b0b      	ldr	r3, [pc, #44]	; (8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	0b9b      	lsrs	r3, r3, #14
 8003b3a:	f003 0303 	and.w	r3, r3, #3
 8003b3e:	3301      	adds	r3, #1
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b46:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003b48:	e004      	b.n	8003b54 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003b4a:	bf00      	nop
 8003b4c:	e002      	b.n	8003b54 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003b4e:	bf00      	nop
 8003b50:	e000      	b.n	8003b54 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003b52:	bf00      	nop
    }
  }
  return (frequency);
 8003b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3734      	adds	r7, #52	; 0x34
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd90      	pop	{r4, r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	08005d80 	.word	0x08005d80
 8003b64:	40021000 	.word	0x40021000
 8003b68:	007a1200 	.word	0x007a1200
 8003b6c:	003d0900 	.word	0x003d0900
 8003b70:	aaaaaaab 	.word	0xaaaaaaab

08003b74 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e084      	b.n	8003c94 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	7c5b      	ldrb	r3, [r3, #17]
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d105      	bne.n	8003ba0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7fd fe8c 	bl	80018b8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 faf4 	bl	8004194 <HAL_RTC_WaitForSynchro>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d004      	beq.n	8003bbc <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2204      	movs	r2, #4
 8003bb6:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e06b      	b.n	8003c94 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 fbad 	bl	800431c <RTC_EnterInitMode>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d004      	beq.n	8003bd2 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2204      	movs	r2, #4
 8003bcc:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e060      	b.n	8003c94 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 0207 	bic.w	r2, r2, #7
 8003be0:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d005      	beq.n	8003bf6 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003bea:	4b2c      	ldr	r3, [pc, #176]	; (8003c9c <HAL_RTC_Init+0x128>)
 8003bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bee:	4a2b      	ldr	r2, [pc, #172]	; (8003c9c <HAL_RTC_Init+0x128>)
 8003bf0:	f023 0301 	bic.w	r3, r3, #1
 8003bf4:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003bf6:	4b29      	ldr	r3, [pc, #164]	; (8003c9c <HAL_RTC_Init+0x128>)
 8003bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfa:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	4926      	ldr	r1, [pc, #152]	; (8003c9c <HAL_RTC_Init+0x128>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c10:	d003      	beq.n	8003c1a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	e00e      	b.n	8003c38 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003c1a:	2001      	movs	r0, #1
 8003c1c:	f7ff fee6 	bl	80039ec <HAL_RCCEx_GetPeriphCLKFreq>
 8003c20:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d104      	bne.n	8003c32 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2204      	movs	r2, #4
 8003c2c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e030      	b.n	8003c94 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	3b01      	subs	r3, #1
 8003c36:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f023 010f 	bic.w	r1, r3, #15
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	0c1a      	lsrs	r2, r3, #16
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	0c1b      	lsrs	r3, r3, #16
 8003c56:	041b      	lsls	r3, r3, #16
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	b291      	uxth	r1, r2
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6812      	ldr	r2, [r2, #0]
 8003c60:	430b      	orrs	r3, r1
 8003c62:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 fb81 	bl	800436c <RTC_ExitInitMode>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d004      	beq.n	8003c7a <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2204      	movs	r2, #4
 8003c74:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e00c      	b.n	8003c94 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003c92:	2300      	movs	r3, #0
  }
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	40006c00 	.word	0x40006c00

08003ca0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003ca0:	b590      	push	{r4, r7, lr}
 8003ca2:	b087      	sub	sp, #28
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003cac:	2300      	movs	r3, #0
 8003cae:	617b      	str	r3, [r7, #20]
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d002      	beq.n	8003cc0 <HAL_RTC_SetTime+0x20>
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d101      	bne.n	8003cc4 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e080      	b.n	8003dc6 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	7c1b      	ldrb	r3, [r3, #16]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d101      	bne.n	8003cd0 <HAL_RTC_SetTime+0x30>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	e07a      	b.n	8003dc6 <HAL_RTC_SetTime+0x126>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2202      	movs	r2, #2
 8003cda:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d113      	bne.n	8003d0a <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003cec:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	785b      	ldrb	r3, [r3, #1]
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	011b      	lsls	r3, r3, #4
 8003cfa:	1a5b      	subs	r3, r3, r1
 8003cfc:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003cfe:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003d04:	4413      	add	r3, r2
 8003d06:	617b      	str	r3, [r7, #20]
 8003d08:	e01e      	b.n	8003d48 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 fb71 	bl	80043f6 <RTC_Bcd2ToByte>
 8003d14:	4603      	mov	r3, r0
 8003d16:	461a      	mov	r2, r3
 8003d18:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003d1c:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	785b      	ldrb	r3, [r3, #1]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f000 fb66 	bl	80043f6 <RTC_Bcd2ToByte>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	4613      	mov	r3, r2
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	1a9b      	subs	r3, r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003d36:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	789b      	ldrb	r3, [r3, #2]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f000 fb5a 	bl	80043f6 <RTC_Bcd2ToByte>
 8003d42:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003d44:	4423      	add	r3, r4
 8003d46:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003d48:	6979      	ldr	r1, [r7, #20]
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f000 fa7f 	bl	800424e <RTC_WriteTimeCounter>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d007      	beq.n	8003d66 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2204      	movs	r2, #4
 8003d5a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e02f      	b.n	8003dc6 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 0205 	bic.w	r2, r2, #5
 8003d74:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f000 fa90 	bl	800429c <RTC_ReadAlarmCounter>
 8003d7c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d84:	d018      	beq.n	8003db8 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d214      	bcs.n	8003db8 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003d94:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003d98:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003d9a:	6939      	ldr	r1, [r7, #16]
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f000 fa96 	bl	80042ce <RTC_WriteAlarmCounter>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d007      	beq.n	8003db8 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2204      	movs	r2, #4
 8003dac:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e006      	b.n	8003dc6 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
  }
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	371c      	adds	r7, #28
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd90      	pop	{r4, r7, pc}
	...

08003dd0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b088      	sub	sp, #32
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	61bb      	str	r3, [r7, #24]
 8003de0:	2300      	movs	r3, #0
 8003de2:	61fb      	str	r3, [r7, #28]
 8003de4:	2300      	movs	r3, #0
 8003de6:	617b      	str	r3, [r7, #20]
 8003de8:	2300      	movs	r3, #0
 8003dea:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d002      	beq.n	8003df8 <HAL_RTC_GetTime+0x28>
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e0b5      	b.n	8003f68 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f003 0304 	and.w	r3, r3, #4
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e0ac      	b.n	8003f68 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f000 f9ed 	bl	80041ee <RTC_ReadTimeCounter>
 8003e14:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	4a55      	ldr	r2, [pc, #340]	; (8003f70 <HAL_RTC_GetTime+0x1a0>)
 8003e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1e:	0adb      	lsrs	r3, r3, #11
 8003e20:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	4b52      	ldr	r3, [pc, #328]	; (8003f70 <HAL_RTC_GetTime+0x1a0>)
 8003e26:	fba3 1302 	umull	r1, r3, r3, r2
 8003e2a:	0adb      	lsrs	r3, r3, #11
 8003e2c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003e30:	fb01 f303 	mul.w	r3, r1, r3
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	4a4f      	ldr	r2, [pc, #316]	; (8003f74 <HAL_RTC_GetTime+0x1a4>)
 8003e38:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3c:	095b      	lsrs	r3, r3, #5
 8003e3e:	b2da      	uxtb	r2, r3
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	4a4a      	ldr	r2, [pc, #296]	; (8003f70 <HAL_RTC_GetTime+0x1a0>)
 8003e48:	fba2 1203 	umull	r1, r2, r2, r3
 8003e4c:	0ad2      	lsrs	r2, r2, #11
 8003e4e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003e52:	fb01 f202 	mul.w	r2, r1, r2
 8003e56:	1a9a      	subs	r2, r3, r2
 8003e58:	4b46      	ldr	r3, [pc, #280]	; (8003f74 <HAL_RTC_GetTime+0x1a4>)
 8003e5a:	fba3 1302 	umull	r1, r3, r3, r2
 8003e5e:	0959      	lsrs	r1, r3, #5
 8003e60:	460b      	mov	r3, r1
 8003e62:	011b      	lsls	r3, r3, #4
 8003e64:	1a5b      	subs	r3, r3, r1
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	1ad1      	subs	r1, r2, r3
 8003e6a:	b2ca      	uxtb	r2, r1
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	2b17      	cmp	r3, #23
 8003e74:	d955      	bls.n	8003f22 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	4a3f      	ldr	r2, [pc, #252]	; (8003f78 <HAL_RTC_GetTime+0x1a8>)
 8003e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7e:	091b      	lsrs	r3, r3, #4
 8003e80:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8003e82:	6939      	ldr	r1, [r7, #16]
 8003e84:	4b3c      	ldr	r3, [pc, #240]	; (8003f78 <HAL_RTC_GetTime+0x1a8>)
 8003e86:	fba3 2301 	umull	r2, r3, r3, r1
 8003e8a:	091a      	lsrs	r2, r3, #4
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	4413      	add	r3, r2
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	1aca      	subs	r2, r1, r3
 8003e96:	b2d2      	uxtb	r2, r2
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f000 f9fd 	bl	800429c <RTC_ReadAlarmCounter>
 8003ea2:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eaa:	d008      	beq.n	8003ebe <HAL_RTC_GetTime+0xee>
 8003eac:	69fa      	ldr	r2, [r7, #28]
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d904      	bls.n	8003ebe <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8003eb4:	69fa      	ldr	r2, [r7, #28]
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	61fb      	str	r3, [r7, #28]
 8003ebc:	e002      	b.n	8003ec4 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8003ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8003ec2:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	4a2d      	ldr	r2, [pc, #180]	; (8003f7c <HAL_RTC_GetTime+0x1ac>)
 8003ec8:	fb02 f303 	mul.w	r3, r2, r3
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003ed2:	69b9      	ldr	r1, [r7, #24]
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f000 f9ba 	bl	800424e <RTC_WriteTimeCounter>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e041      	b.n	8003f68 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eea:	d00c      	beq.n	8003f06 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8003eec:	69fa      	ldr	r2, [r7, #28]
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003ef4:	69f9      	ldr	r1, [r7, #28]
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f000 f9e9 	bl	80042ce <RTC_WriteAlarmCounter>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00a      	beq.n	8003f18 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e030      	b.n	8003f68 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003f06:	69f9      	ldr	r1, [r7, #28]
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f000 f9e0 	bl	80042ce <RTC_WriteAlarmCounter>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d001      	beq.n	8003f18 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e027      	b.n	8003f68 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8003f18:	6979      	ldr	r1, [r7, #20]
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 fa88 	bl	8004430 <RTC_DateUpdate>
 8003f20:	e003      	b.n	8003f2a <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	b2da      	uxtb	r2, r3
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d01a      	beq.n	8003f66 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f000 fa41 	bl	80043bc <RTC_ByteToBcd2>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	785b      	ldrb	r3, [r3, #1]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 fa38 	bl	80043bc <RTC_ByteToBcd2>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	461a      	mov	r2, r3
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	789b      	ldrb	r3, [r3, #2]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f000 fa2f 	bl	80043bc <RTC_ByteToBcd2>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	461a      	mov	r2, r3
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3720      	adds	r7, #32
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	91a2b3c5 	.word	0x91a2b3c5
 8003f74:	88888889 	.word	0x88888889
 8003f78:	aaaaaaab 	.word	0xaaaaaaab
 8003f7c:	00015180 	.word	0x00015180

08003f80 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b088      	sub	sp, #32
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	61fb      	str	r3, [r7, #28]
 8003f90:	2300      	movs	r3, #0
 8003f92:	61bb      	str	r3, [r7, #24]
 8003f94:	2300      	movs	r3, #0
 8003f96:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d002      	beq.n	8003fa4 <HAL_RTC_SetDate+0x24>
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d101      	bne.n	8003fa8 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e097      	b.n	80040d8 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	7c1b      	ldrb	r3, [r3, #16]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d101      	bne.n	8003fb4 <HAL_RTC_SetDate+0x34>
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	e091      	b.n	80040d8 <HAL_RTC_SetDate+0x158>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10c      	bne.n	8003fe0 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	78da      	ldrb	r2, [r3, #3]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	785a      	ldrb	r2, [r3, #1]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	789a      	ldrb	r2, [r3, #2]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	739a      	strb	r2, [r3, #14]
 8003fde:	e01a      	b.n	8004016 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	78db      	ldrb	r3, [r3, #3]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f000 fa06 	bl	80043f6 <RTC_Bcd2ToByte>
 8003fea:	4603      	mov	r3, r0
 8003fec:	461a      	mov	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	785b      	ldrb	r3, [r3, #1]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 f9fd 	bl	80043f6 <RTC_Bcd2ToByte>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	461a      	mov	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	789b      	ldrb	r3, [r3, #2]
 8004008:	4618      	mov	r0, r3
 800400a:	f000 f9f4 	bl	80043f6 <RTC_Bcd2ToByte>
 800400e:	4603      	mov	r3, r0
 8004010:	461a      	mov	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	7bdb      	ldrb	r3, [r3, #15]
 800401a:	4618      	mov	r0, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	7b59      	ldrb	r1, [r3, #13]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	7b9b      	ldrb	r3, [r3, #14]
 8004024:	461a      	mov	r2, r3
 8004026:	f000 fadf 	bl	80045e8 <RTC_WeekDayNum>
 800402a:	4603      	mov	r3, r0
 800402c:	461a      	mov	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	7b1a      	ldrb	r2, [r3, #12]
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f000 f8d7 	bl	80041ee <RTC_ReadTimeCounter>
 8004040:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	4a26      	ldr	r2, [pc, #152]	; (80040e0 <HAL_RTC_SetDate+0x160>)
 8004046:	fba2 2303 	umull	r2, r3, r2, r3
 800404a:	0adb      	lsrs	r3, r3, #11
 800404c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	2b18      	cmp	r3, #24
 8004052:	d93a      	bls.n	80040ca <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	4a23      	ldr	r2, [pc, #140]	; (80040e4 <HAL_RTC_SetDate+0x164>)
 8004058:	fba2 2303 	umull	r2, r3, r2, r3
 800405c:	091b      	lsrs	r3, r3, #4
 800405e:	4a22      	ldr	r2, [pc, #136]	; (80040e8 <HAL_RTC_SetDate+0x168>)
 8004060:	fb02 f303 	mul.w	r3, r2, r3
 8004064:	69fa      	ldr	r2, [r7, #28]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800406a:	69f9      	ldr	r1, [r7, #28]
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f000 f8ee 	bl	800424e <RTC_WriteTimeCounter>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d007      	beq.n	8004088 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2204      	movs	r2, #4
 800407c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e027      	b.n	80040d8 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f000 f907 	bl	800429c <RTC_ReadAlarmCounter>
 800408e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004096:	d018      	beq.n	80040ca <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	429a      	cmp	r2, r3
 800409e:	d214      	bcs.n	80040ca <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80040a6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80040aa:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80040ac:	69b9      	ldr	r1, [r7, #24]
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f000 f90d 	bl	80042ce <RTC_WriteAlarmCounter>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d007      	beq.n	80040ca <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2204      	movs	r2, #4
 80040be:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e006      	b.n	80040d8 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2201      	movs	r2, #1
 80040ce:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3720      	adds	r7, #32
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	91a2b3c5 	.word	0x91a2b3c5
 80040e4:	aaaaaaab 	.word	0xaaaaaaab
 80040e8:	00015180 	.word	0x00015180

080040ec <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 80040f8:	f107 0314 	add.w	r3, r7, #20
 80040fc:	2100      	movs	r1, #0
 80040fe:	460a      	mov	r2, r1
 8004100:	801a      	strh	r2, [r3, #0]
 8004102:	460a      	mov	r2, r1
 8004104:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d002      	beq.n	8004112 <HAL_RTC_GetDate+0x26>
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e03a      	b.n	800418c <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8004116:	f107 0314 	add.w	r3, r7, #20
 800411a:	2200      	movs	r2, #0
 800411c:	4619      	mov	r1, r3
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f7ff fe56 	bl	8003dd0 <HAL_RTC_GetTime>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e02e      	b.n	800418c <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	7b1a      	ldrb	r2, [r3, #12]
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	7bda      	ldrb	r2, [r3, #15]
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	7b5a      	ldrb	r2, [r3, #13]
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	7b9a      	ldrb	r2, [r3, #14]
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d01a      	beq.n	800418a <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	78db      	ldrb	r3, [r3, #3]
 8004158:	4618      	mov	r0, r3
 800415a:	f000 f92f 	bl	80043bc <RTC_ByteToBcd2>
 800415e:	4603      	mov	r3, r0
 8004160:	461a      	mov	r2, r3
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	785b      	ldrb	r3, [r3, #1]
 800416a:	4618      	mov	r0, r3
 800416c:	f000 f926 	bl	80043bc <RTC_ByteToBcd2>
 8004170:	4603      	mov	r3, r0
 8004172:	461a      	mov	r2, r3
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	789b      	ldrb	r3, [r3, #2]
 800417c:	4618      	mov	r0, r3
 800417e:	f000 f91d 	bl	80043bc <RTC_ByteToBcd2>
 8004182:	4603      	mov	r3, r0
 8004184:	461a      	mov	r2, r3
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3718      	adds	r7, #24
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800419c:	2300      	movs	r3, #0
 800419e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e01d      	b.n	80041e6 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 0208 	bic.w	r2, r2, #8
 80041b8:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80041ba:	f7fd fd81 	bl	8001cc0 <HAL_GetTick>
 80041be:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80041c0:	e009      	b.n	80041d6 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80041c2:	f7fd fd7d 	bl	8001cc0 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041d0:	d901      	bls.n	80041d6 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e007      	b.n	80041e6 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f003 0308 	and.w	r3, r3, #8
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0ee      	beq.n	80041c2 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b087      	sub	sp, #28
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80041f6:	2300      	movs	r3, #0
 80041f8:	827b      	strh	r3, [r7, #18]
 80041fa:	2300      	movs	r3, #0
 80041fc:	823b      	strh	r3, [r7, #16]
 80041fe:	2300      	movs	r3, #0
 8004200:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8004202:	2300      	movs	r3, #0
 8004204:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	69db      	ldr	r3, [r3, #28]
 8004214:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800421e:	8a7a      	ldrh	r2, [r7, #18]
 8004220:	8a3b      	ldrh	r3, [r7, #16]
 8004222:	429a      	cmp	r2, r3
 8004224:	d008      	beq.n	8004238 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8004226:	8a3b      	ldrh	r3, [r7, #16]
 8004228:	041a      	lsls	r2, r3, #16
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	69db      	ldr	r3, [r3, #28]
 8004230:	b29b      	uxth	r3, r3
 8004232:	4313      	orrs	r3, r2
 8004234:	617b      	str	r3, [r7, #20]
 8004236:	e004      	b.n	8004242 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8004238:	8a7b      	ldrh	r3, [r7, #18]
 800423a:	041a      	lsls	r2, r3, #16
 800423c:	89fb      	ldrh	r3, [r7, #14]
 800423e:	4313      	orrs	r3, r2
 8004240:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8004242:	697b      	ldr	r3, [r7, #20]
}
 8004244:	4618      	mov	r0, r3
 8004246:	371c      	adds	r7, #28
 8004248:	46bd      	mov	sp, r7
 800424a:	bc80      	pop	{r7}
 800424c:	4770      	bx	lr

0800424e <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800424e:	b580      	push	{r7, lr}
 8004250:	b084      	sub	sp, #16
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
 8004256:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004258:	2300      	movs	r3, #0
 800425a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 f85d 	bl	800431c <RTC_EnterInitMode>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d002      	beq.n	800426e <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	73fb      	strb	r3, [r7, #15]
 800426c:	e011      	b.n	8004292 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	0c12      	lsrs	r2, r2, #16
 8004276:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	b292      	uxth	r2, r2
 8004280:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f872 	bl	800436c <RTC_ExitInitMode>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004292:	7bfb      	ldrb	r3, [r7, #15]
}
 8004294:	4618      	mov	r0, r3
 8004296:	3710      	adds	r7, #16
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80042a4:	2300      	movs	r3, #0
 80042a6:	81fb      	strh	r3, [r7, #14]
 80042a8:	2300      	movs	r3, #0
 80042aa:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6a1b      	ldr	r3, [r3, #32]
 80042b2:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ba:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80042bc:	89fb      	ldrh	r3, [r7, #14]
 80042be:	041a      	lsls	r2, r3, #16
 80042c0:	89bb      	ldrh	r3, [r7, #12]
 80042c2:	4313      	orrs	r3, r2
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3714      	adds	r7, #20
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bc80      	pop	{r7}
 80042cc:	4770      	bx	lr

080042ce <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b084      	sub	sp, #16
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
 80042d6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042d8:	2300      	movs	r3, #0
 80042da:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 f81d 	bl	800431c <RTC_EnterInitMode>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d002      	beq.n	80042ee <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	73fb      	strb	r3, [r7, #15]
 80042ec:	e011      	b.n	8004312 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	0c12      	lsrs	r2, r2, #16
 80042f6:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	b292      	uxth	r2, r2
 8004300:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f832 	bl	800436c <RTC_ExitInitMode>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004312:	7bfb      	ldrb	r3, [r7, #15]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004324:	2300      	movs	r3, #0
 8004326:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8004328:	f7fd fcca 	bl	8001cc0 <HAL_GetTick>
 800432c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800432e:	e009      	b.n	8004344 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004330:	f7fd fcc6 	bl	8001cc0 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800433e:	d901      	bls.n	8004344 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e00f      	b.n	8004364 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f003 0320 	and.w	r3, r3, #32
 800434e:	2b00      	cmp	r3, #0
 8004350:	d0ee      	beq.n	8004330 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f042 0210 	orr.w	r2, r2, #16
 8004360:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004374:	2300      	movs	r3, #0
 8004376:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	685a      	ldr	r2, [r3, #4]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 0210 	bic.w	r2, r2, #16
 8004386:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004388:	f7fd fc9a 	bl	8001cc0 <HAL_GetTick>
 800438c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800438e:	e009      	b.n	80043a4 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004390:	f7fd fc96 	bl	8001cc0 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800439e:	d901      	bls.n	80043a4 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e007      	b.n	80043b4 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f003 0320 	and.w	r3, r3, #32
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d0ee      	beq.n	8004390 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	4603      	mov	r3, r0
 80043c4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80043c6:	2300      	movs	r3, #0
 80043c8:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80043ca:	e005      	b.n	80043d8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	3301      	adds	r3, #1
 80043d0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80043d2:	79fb      	ldrb	r3, [r7, #7]
 80043d4:	3b0a      	subs	r3, #10
 80043d6:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80043d8:	79fb      	ldrb	r3, [r7, #7]
 80043da:	2b09      	cmp	r3, #9
 80043dc:	d8f6      	bhi.n	80043cc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	011b      	lsls	r3, r3, #4
 80043e4:	b2da      	uxtb	r2, r3
 80043e6:	79fb      	ldrb	r3, [r7, #7]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	b2db      	uxtb	r3, r3
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3714      	adds	r7, #20
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bc80      	pop	{r7}
 80043f4:	4770      	bx	lr

080043f6 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b085      	sub	sp, #20
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	4603      	mov	r3, r0
 80043fe:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004400:	2300      	movs	r3, #0
 8004402:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004404:	79fb      	ldrb	r3, [r7, #7]
 8004406:	091b      	lsrs	r3, r3, #4
 8004408:	b2db      	uxtb	r3, r3
 800440a:	461a      	mov	r2, r3
 800440c:	4613      	mov	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4413      	add	r3, r2
 8004412:	005b      	lsls	r3, r3, #1
 8004414:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8004416:	79fb      	ldrb	r3, [r7, #7]
 8004418:	f003 030f 	and.w	r3, r3, #15
 800441c:	b2da      	uxtb	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	b2db      	uxtb	r3, r3
 8004422:	4413      	add	r3, r2
 8004424:	b2db      	uxtb	r3, r3
}
 8004426:	4618      	mov	r0, r3
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	bc80      	pop	{r7}
 800442e:	4770      	bx	lr

08004430 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800443a:	2300      	movs	r3, #0
 800443c:	617b      	str	r3, [r7, #20]
 800443e:	2300      	movs	r3, #0
 8004440:	613b      	str	r3, [r7, #16]
 8004442:	2300      	movs	r3, #0
 8004444:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8004446:	2300      	movs	r3, #0
 8004448:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	7bdb      	ldrb	r3, [r3, #15]
 800444e:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	7b5b      	ldrb	r3, [r3, #13]
 8004454:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	7b9b      	ldrb	r3, [r3, #14]
 800445a:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 800445c:	2300      	movs	r3, #0
 800445e:	60bb      	str	r3, [r7, #8]
 8004460:	e06f      	b.n	8004542 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d011      	beq.n	800448c <RTC_DateUpdate+0x5c>
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	2b03      	cmp	r3, #3
 800446c:	d00e      	beq.n	800448c <RTC_DateUpdate+0x5c>
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	2b05      	cmp	r3, #5
 8004472:	d00b      	beq.n	800448c <RTC_DateUpdate+0x5c>
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	2b07      	cmp	r3, #7
 8004478:	d008      	beq.n	800448c <RTC_DateUpdate+0x5c>
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	2b08      	cmp	r3, #8
 800447e:	d005      	beq.n	800448c <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	2b0a      	cmp	r3, #10
 8004484:	d002      	beq.n	800448c <RTC_DateUpdate+0x5c>
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	2b0c      	cmp	r3, #12
 800448a:	d117      	bne.n	80044bc <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2b1e      	cmp	r3, #30
 8004490:	d803      	bhi.n	800449a <RTC_DateUpdate+0x6a>
      {
        day++;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	3301      	adds	r3, #1
 8004496:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004498:	e050      	b.n	800453c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	2b0c      	cmp	r3, #12
 800449e:	d005      	beq.n	80044ac <RTC_DateUpdate+0x7c>
        {
          month++;
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	3301      	adds	r3, #1
 80044a4:	613b      	str	r3, [r7, #16]
          day = 1U;
 80044a6:	2301      	movs	r3, #1
 80044a8:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80044aa:	e047      	b.n	800453c <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 80044ac:	2301      	movs	r3, #1
 80044ae:	613b      	str	r3, [r7, #16]
          day = 1U;
 80044b0:	2301      	movs	r3, #1
 80044b2:	60fb      	str	r3, [r7, #12]
          year++;
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	3301      	adds	r3, #1
 80044b8:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 80044ba:	e03f      	b.n	800453c <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	2b04      	cmp	r3, #4
 80044c0:	d008      	beq.n	80044d4 <RTC_DateUpdate+0xa4>
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	2b06      	cmp	r3, #6
 80044c6:	d005      	beq.n	80044d4 <RTC_DateUpdate+0xa4>
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	2b09      	cmp	r3, #9
 80044cc:	d002      	beq.n	80044d4 <RTC_DateUpdate+0xa4>
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	2b0b      	cmp	r3, #11
 80044d2:	d10c      	bne.n	80044ee <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2b1d      	cmp	r3, #29
 80044d8:	d803      	bhi.n	80044e2 <RTC_DateUpdate+0xb2>
      {
        day++;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	3301      	adds	r3, #1
 80044de:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80044e0:	e02c      	b.n	800453c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	3301      	adds	r3, #1
 80044e6:	613b      	str	r3, [r7, #16]
        day = 1U;
 80044e8:	2301      	movs	r3, #1
 80044ea:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80044ec:	e026      	b.n	800453c <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d123      	bne.n	800453c <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2b1b      	cmp	r3, #27
 80044f8:	d803      	bhi.n	8004502 <RTC_DateUpdate+0xd2>
      {
        day++;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	3301      	adds	r3, #1
 80044fe:	60fb      	str	r3, [r7, #12]
 8004500:	e01c      	b.n	800453c <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2b1c      	cmp	r3, #28
 8004506:	d111      	bne.n	800452c <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	b29b      	uxth	r3, r3
 800450c:	4618      	mov	r0, r3
 800450e:	f000 f839 	bl	8004584 <RTC_IsLeapYear>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d003      	beq.n	8004520 <RTC_DateUpdate+0xf0>
        {
          day++;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	3301      	adds	r3, #1
 800451c:	60fb      	str	r3, [r7, #12]
 800451e:	e00d      	b.n	800453c <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	3301      	adds	r3, #1
 8004524:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004526:	2301      	movs	r3, #1
 8004528:	60fb      	str	r3, [r7, #12]
 800452a:	e007      	b.n	800453c <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2b1d      	cmp	r3, #29
 8004530:	d104      	bne.n	800453c <RTC_DateUpdate+0x10c>
      {
        month++;
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	3301      	adds	r3, #1
 8004536:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004538:	2301      	movs	r3, #1
 800453a:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	3301      	adds	r3, #1
 8004540:	60bb      	str	r3, [r7, #8]
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	429a      	cmp	r2, r3
 8004548:	d38b      	bcc.n	8004462 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	b2da      	uxtb	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	b2da      	uxtb	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	b2da      	uxtb	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	b2db      	uxtb	r3, r3
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	b2d2      	uxtb	r2, r2
 800456a:	4619      	mov	r1, r3
 800456c:	6978      	ldr	r0, [r7, #20]
 800456e:	f000 f83b 	bl	80045e8 <RTC_WeekDayNum>
 8004572:	4603      	mov	r3, r0
 8004574:	461a      	mov	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	731a      	strb	r2, [r3, #12]
}
 800457a:	bf00      	nop
 800457c:	3718      	adds	r7, #24
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
	...

08004584 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	4603      	mov	r3, r0
 800458c:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800458e:	88fb      	ldrh	r3, [r7, #6]
 8004590:	f003 0303 	and.w	r3, r3, #3
 8004594:	b29b      	uxth	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800459a:	2300      	movs	r3, #0
 800459c:	e01d      	b.n	80045da <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800459e:	88fb      	ldrh	r3, [r7, #6]
 80045a0:	4a10      	ldr	r2, [pc, #64]	; (80045e4 <RTC_IsLeapYear+0x60>)
 80045a2:	fba2 1203 	umull	r1, r2, r2, r3
 80045a6:	0952      	lsrs	r2, r2, #5
 80045a8:	2164      	movs	r1, #100	; 0x64
 80045aa:	fb01 f202 	mul.w	r2, r1, r2
 80045ae:	1a9b      	subs	r3, r3, r2
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <RTC_IsLeapYear+0x36>
  {
    return 1U;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e00f      	b.n	80045da <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 80045ba:	88fb      	ldrh	r3, [r7, #6]
 80045bc:	4a09      	ldr	r2, [pc, #36]	; (80045e4 <RTC_IsLeapYear+0x60>)
 80045be:	fba2 1203 	umull	r1, r2, r2, r3
 80045c2:	09d2      	lsrs	r2, r2, #7
 80045c4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80045c8:	fb01 f202 	mul.w	r2, r1, r2
 80045cc:	1a9b      	subs	r3, r3, r2
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d101      	bne.n	80045d8 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e000      	b.n	80045da <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80045d8:	2300      	movs	r3, #0
  }
}
 80045da:	4618      	mov	r0, r3
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	bc80      	pop	{r7}
 80045e2:	4770      	bx	lr
 80045e4:	51eb851f 	.word	0x51eb851f

080045e8 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	460b      	mov	r3, r1
 80045f2:	70fb      	strb	r3, [r7, #3]
 80045f4:	4613      	mov	r3, r2
 80045f6:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80045f8:	2300      	movs	r3, #0
 80045fa:	60bb      	str	r3, [r7, #8]
 80045fc:	2300      	movs	r3, #0
 80045fe:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8004606:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8004608:	78fb      	ldrb	r3, [r7, #3]
 800460a:	2b02      	cmp	r3, #2
 800460c:	d82d      	bhi.n	800466a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800460e:	78fa      	ldrb	r2, [r7, #3]
 8004610:	4613      	mov	r3, r2
 8004612:	005b      	lsls	r3, r3, #1
 8004614:	4413      	add	r3, r2
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	1a9b      	subs	r3, r3, r2
 800461a:	4a2c      	ldr	r2, [pc, #176]	; (80046cc <RTC_WeekDayNum+0xe4>)
 800461c:	fba2 2303 	umull	r2, r3, r2, r3
 8004620:	085a      	lsrs	r2, r3, #1
 8004622:	78bb      	ldrb	r3, [r7, #2]
 8004624:	441a      	add	r2, r3
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	441a      	add	r2, r3
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	3b01      	subs	r3, #1
 800462e:	089b      	lsrs	r3, r3, #2
 8004630:	441a      	add	r2, r3
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	3b01      	subs	r3, #1
 8004636:	4926      	ldr	r1, [pc, #152]	; (80046d0 <RTC_WeekDayNum+0xe8>)
 8004638:	fba1 1303 	umull	r1, r3, r1, r3
 800463c:	095b      	lsrs	r3, r3, #5
 800463e:	1ad2      	subs	r2, r2, r3
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	3b01      	subs	r3, #1
 8004644:	4922      	ldr	r1, [pc, #136]	; (80046d0 <RTC_WeekDayNum+0xe8>)
 8004646:	fba1 1303 	umull	r1, r3, r1, r3
 800464a:	09db      	lsrs	r3, r3, #7
 800464c:	4413      	add	r3, r2
 800464e:	1d1a      	adds	r2, r3, #4
 8004650:	4b20      	ldr	r3, [pc, #128]	; (80046d4 <RTC_WeekDayNum+0xec>)
 8004652:	fba3 1302 	umull	r1, r3, r3, r2
 8004656:	1ad1      	subs	r1, r2, r3
 8004658:	0849      	lsrs	r1, r1, #1
 800465a:	440b      	add	r3, r1
 800465c:	0899      	lsrs	r1, r3, #2
 800465e:	460b      	mov	r3, r1
 8004660:	00db      	lsls	r3, r3, #3
 8004662:	1a5b      	subs	r3, r3, r1
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	60fb      	str	r3, [r7, #12]
 8004668:	e029      	b.n	80046be <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800466a:	78fa      	ldrb	r2, [r7, #3]
 800466c:	4613      	mov	r3, r2
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	4413      	add	r3, r2
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	1a9b      	subs	r3, r3, r2
 8004676:	4a15      	ldr	r2, [pc, #84]	; (80046cc <RTC_WeekDayNum+0xe4>)
 8004678:	fba2 2303 	umull	r2, r3, r2, r3
 800467c:	085a      	lsrs	r2, r3, #1
 800467e:	78bb      	ldrb	r3, [r7, #2]
 8004680:	441a      	add	r2, r3
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	441a      	add	r2, r3
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	089b      	lsrs	r3, r3, #2
 800468a:	441a      	add	r2, r3
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	4910      	ldr	r1, [pc, #64]	; (80046d0 <RTC_WeekDayNum+0xe8>)
 8004690:	fba1 1303 	umull	r1, r3, r1, r3
 8004694:	095b      	lsrs	r3, r3, #5
 8004696:	1ad2      	subs	r2, r2, r3
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	490d      	ldr	r1, [pc, #52]	; (80046d0 <RTC_WeekDayNum+0xe8>)
 800469c:	fba1 1303 	umull	r1, r3, r1, r3
 80046a0:	09db      	lsrs	r3, r3, #7
 80046a2:	4413      	add	r3, r2
 80046a4:	1c9a      	adds	r2, r3, #2
 80046a6:	4b0b      	ldr	r3, [pc, #44]	; (80046d4 <RTC_WeekDayNum+0xec>)
 80046a8:	fba3 1302 	umull	r1, r3, r3, r2
 80046ac:	1ad1      	subs	r1, r2, r3
 80046ae:	0849      	lsrs	r1, r1, #1
 80046b0:	440b      	add	r3, r1
 80046b2:	0899      	lsrs	r1, r3, #2
 80046b4:	460b      	mov	r3, r1
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	1a5b      	subs	r3, r3, r1
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	b2db      	uxtb	r3, r3
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bc80      	pop	{r7}
 80046ca:	4770      	bx	lr
 80046cc:	38e38e39 	.word	0x38e38e39
 80046d0:	51eb851f 	.word	0x51eb851f
 80046d4:	24924925 	.word	0x24924925

080046d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e041      	b.n	800476e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d106      	bne.n	8004704 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f7fd f8fe 	bl	8001900 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2202      	movs	r2, #2
 8004708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	3304      	adds	r3, #4
 8004714:	4619      	mov	r1, r3
 8004716:	4610      	mov	r0, r2
 8004718:	f000 fc28 	bl	8004f6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3708      	adds	r7, #8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
	...

08004778 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004786:	b2db      	uxtb	r3, r3
 8004788:	2b01      	cmp	r3, #1
 800478a:	d001      	beq.n	8004790 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e03a      	b.n	8004806 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2202      	movs	r2, #2
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68da      	ldr	r2, [r3, #12]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f042 0201 	orr.w	r2, r2, #1
 80047a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a18      	ldr	r2, [pc, #96]	; (8004810 <HAL_TIM_Base_Start_IT+0x98>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d00e      	beq.n	80047d0 <HAL_TIM_Base_Start_IT+0x58>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ba:	d009      	beq.n	80047d0 <HAL_TIM_Base_Start_IT+0x58>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a14      	ldr	r2, [pc, #80]	; (8004814 <HAL_TIM_Base_Start_IT+0x9c>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d004      	beq.n	80047d0 <HAL_TIM_Base_Start_IT+0x58>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a13      	ldr	r2, [pc, #76]	; (8004818 <HAL_TIM_Base_Start_IT+0xa0>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d111      	bne.n	80047f4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f003 0307 	and.w	r3, r3, #7
 80047da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2b06      	cmp	r3, #6
 80047e0:	d010      	beq.n	8004804 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f042 0201 	orr.w	r2, r2, #1
 80047f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047f2:	e007      	b.n	8004804 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f042 0201 	orr.w	r2, r2, #1
 8004802:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3714      	adds	r7, #20
 800480a:	46bd      	mov	sp, r7
 800480c:	bc80      	pop	{r7}
 800480e:	4770      	bx	lr
 8004810:	40012c00 	.word	0x40012c00
 8004814:	40000400 	.word	0x40000400
 8004818:	40000800 	.word	0x40000800

0800481c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e041      	b.n	80048b2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d106      	bne.n	8004848 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f839 	bl	80048ba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2202      	movs	r2, #2
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	3304      	adds	r3, #4
 8004858:	4619      	mov	r1, r3
 800485a:	4610      	mov	r0, r2
 800485c:	f000 fb86 	bl	8004f6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b083      	sub	sp, #12
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80048c2:	bf00      	nop
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bc80      	pop	{r7}
 80048ca:	4770      	bx	lr

080048cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d109      	bne.n	80048f0 <HAL_TIM_PWM_Start+0x24>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	bf14      	ite	ne
 80048e8:	2301      	movne	r3, #1
 80048ea:	2300      	moveq	r3, #0
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	e022      	b.n	8004936 <HAL_TIM_PWM_Start+0x6a>
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	2b04      	cmp	r3, #4
 80048f4:	d109      	bne.n	800490a <HAL_TIM_PWM_Start+0x3e>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b01      	cmp	r3, #1
 8004900:	bf14      	ite	ne
 8004902:	2301      	movne	r3, #1
 8004904:	2300      	moveq	r3, #0
 8004906:	b2db      	uxtb	r3, r3
 8004908:	e015      	b.n	8004936 <HAL_TIM_PWM_Start+0x6a>
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	2b08      	cmp	r3, #8
 800490e:	d109      	bne.n	8004924 <HAL_TIM_PWM_Start+0x58>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b01      	cmp	r3, #1
 800491a:	bf14      	ite	ne
 800491c:	2301      	movne	r3, #1
 800491e:	2300      	moveq	r3, #0
 8004920:	b2db      	uxtb	r3, r3
 8004922:	e008      	b.n	8004936 <HAL_TIM_PWM_Start+0x6a>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800492a:	b2db      	uxtb	r3, r3
 800492c:	2b01      	cmp	r3, #1
 800492e:	bf14      	ite	ne
 8004930:	2301      	movne	r3, #1
 8004932:	2300      	moveq	r3, #0
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e05e      	b.n	80049fc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d104      	bne.n	800494e <HAL_TIM_PWM_Start+0x82>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2202      	movs	r2, #2
 8004948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800494c:	e013      	b.n	8004976 <HAL_TIM_PWM_Start+0xaa>
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	2b04      	cmp	r3, #4
 8004952:	d104      	bne.n	800495e <HAL_TIM_PWM_Start+0x92>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2202      	movs	r2, #2
 8004958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800495c:	e00b      	b.n	8004976 <HAL_TIM_PWM_Start+0xaa>
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	2b08      	cmp	r3, #8
 8004962:	d104      	bne.n	800496e <HAL_TIM_PWM_Start+0xa2>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2202      	movs	r2, #2
 8004968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800496c:	e003      	b.n	8004976 <HAL_TIM_PWM_Start+0xaa>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2202      	movs	r2, #2
 8004972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2201      	movs	r2, #1
 800497c:	6839      	ldr	r1, [r7, #0]
 800497e:	4618      	mov	r0, r3
 8004980:	f000 fd74 	bl	800546c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a1e      	ldr	r2, [pc, #120]	; (8004a04 <HAL_TIM_PWM_Start+0x138>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d107      	bne.n	800499e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800499c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a18      	ldr	r2, [pc, #96]	; (8004a04 <HAL_TIM_PWM_Start+0x138>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d00e      	beq.n	80049c6 <HAL_TIM_PWM_Start+0xfa>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b0:	d009      	beq.n	80049c6 <HAL_TIM_PWM_Start+0xfa>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a14      	ldr	r2, [pc, #80]	; (8004a08 <HAL_TIM_PWM_Start+0x13c>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d004      	beq.n	80049c6 <HAL_TIM_PWM_Start+0xfa>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a12      	ldr	r2, [pc, #72]	; (8004a0c <HAL_TIM_PWM_Start+0x140>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d111      	bne.n	80049ea <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f003 0307 	and.w	r3, r3, #7
 80049d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2b06      	cmp	r3, #6
 80049d6:	d010      	beq.n	80049fa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f042 0201 	orr.w	r2, r2, #1
 80049e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049e8:	e007      	b.n	80049fa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f042 0201 	orr.w	r2, r2, #1
 80049f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	40012c00 	.word	0x40012c00
 8004a08:	40000400 	.word	0x40000400
 8004a0c:	40000800 	.word	0x40000800

08004a10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d122      	bne.n	8004a6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	f003 0302 	and.w	r3, r3, #2
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d11b      	bne.n	8004a6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f06f 0202 	mvn.w	r2, #2
 8004a3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2201      	movs	r2, #1
 8004a42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	f003 0303 	and.w	r3, r3, #3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 fa6f 	bl	8004f36 <HAL_TIM_IC_CaptureCallback>
 8004a58:	e005      	b.n	8004a66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 fa62 	bl	8004f24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 fa71 	bl	8004f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	f003 0304 	and.w	r3, r3, #4
 8004a76:	2b04      	cmp	r3, #4
 8004a78:	d122      	bne.n	8004ac0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	f003 0304 	and.w	r3, r3, #4
 8004a84:	2b04      	cmp	r3, #4
 8004a86:	d11b      	bne.n	8004ac0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f06f 0204 	mvn.w	r2, #4
 8004a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2202      	movs	r2, #2
 8004a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 fa45 	bl	8004f36 <HAL_TIM_IC_CaptureCallback>
 8004aac:	e005      	b.n	8004aba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 fa38 	bl	8004f24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 fa47 	bl	8004f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	f003 0308 	and.w	r3, r3, #8
 8004aca:	2b08      	cmp	r3, #8
 8004acc:	d122      	bne.n	8004b14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	f003 0308 	and.w	r3, r3, #8
 8004ad8:	2b08      	cmp	r3, #8
 8004ada:	d11b      	bne.n	8004b14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f06f 0208 	mvn.w	r2, #8
 8004ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2204      	movs	r2, #4
 8004aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	f003 0303 	and.w	r3, r3, #3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d003      	beq.n	8004b02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 fa1b 	bl	8004f36 <HAL_TIM_IC_CaptureCallback>
 8004b00:	e005      	b.n	8004b0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 fa0e 	bl	8004f24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 fa1d 	bl	8004f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	f003 0310 	and.w	r3, r3, #16
 8004b1e:	2b10      	cmp	r3, #16
 8004b20:	d122      	bne.n	8004b68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	f003 0310 	and.w	r3, r3, #16
 8004b2c:	2b10      	cmp	r3, #16
 8004b2e:	d11b      	bne.n	8004b68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f06f 0210 	mvn.w	r2, #16
 8004b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2208      	movs	r2, #8
 8004b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	69db      	ldr	r3, [r3, #28]
 8004b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d003      	beq.n	8004b56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 f9f1 	bl	8004f36 <HAL_TIM_IC_CaptureCallback>
 8004b54:	e005      	b.n	8004b62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 f9e4 	bl	8004f24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 f9f3 	bl	8004f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d10e      	bne.n	8004b94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	f003 0301 	and.w	r3, r3, #1
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d107      	bne.n	8004b94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f06f 0201 	mvn.w	r2, #1
 8004b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f7fc fbb6 	bl	8001300 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b9e:	2b80      	cmp	r3, #128	; 0x80
 8004ba0:	d10e      	bne.n	8004bc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bac:	2b80      	cmp	r3, #128	; 0x80
 8004bae:	d107      	bne.n	8004bc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 fce1 	bl	8005582 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bca:	2b40      	cmp	r3, #64	; 0x40
 8004bcc:	d10e      	bne.n	8004bec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd8:	2b40      	cmp	r3, #64	; 0x40
 8004bda:	d107      	bne.n	8004bec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 f9b7 	bl	8004f5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	f003 0320 	and.w	r3, r3, #32
 8004bf6:	2b20      	cmp	r3, #32
 8004bf8:	d10e      	bne.n	8004c18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	f003 0320 	and.w	r3, r3, #32
 8004c04:	2b20      	cmp	r3, #32
 8004c06:	d107      	bne.n	8004c18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f06f 0220 	mvn.w	r2, #32
 8004c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 fcac 	bl	8005570 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c18:	bf00      	nop
 8004c1a:	3708      	adds	r7, #8
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d101      	bne.n	8004c3a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004c36:	2302      	movs	r3, #2
 8004c38:	e0ac      	b.n	8004d94 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2b0c      	cmp	r3, #12
 8004c46:	f200 809f 	bhi.w	8004d88 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004c4a:	a201      	add	r2, pc, #4	; (adr r2, 8004c50 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c50:	08004c85 	.word	0x08004c85
 8004c54:	08004d89 	.word	0x08004d89
 8004c58:	08004d89 	.word	0x08004d89
 8004c5c:	08004d89 	.word	0x08004d89
 8004c60:	08004cc5 	.word	0x08004cc5
 8004c64:	08004d89 	.word	0x08004d89
 8004c68:	08004d89 	.word	0x08004d89
 8004c6c:	08004d89 	.word	0x08004d89
 8004c70:	08004d07 	.word	0x08004d07
 8004c74:	08004d89 	.word	0x08004d89
 8004c78:	08004d89 	.word	0x08004d89
 8004c7c:	08004d89 	.word	0x08004d89
 8004c80:	08004d47 	.word	0x08004d47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68b9      	ldr	r1, [r7, #8]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 f9d0 	bl	8005030 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	699a      	ldr	r2, [r3, #24]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f042 0208 	orr.w	r2, r2, #8
 8004c9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	699a      	ldr	r2, [r3, #24]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f022 0204 	bic.w	r2, r2, #4
 8004cae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6999      	ldr	r1, [r3, #24]
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	691a      	ldr	r2, [r3, #16]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	619a      	str	r2, [r3, #24]
      break;
 8004cc2:	e062      	b.n	8004d8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68b9      	ldr	r1, [r7, #8]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 fa16 	bl	80050fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	699a      	ldr	r2, [r3, #24]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	699a      	ldr	r2, [r3, #24]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6999      	ldr	r1, [r3, #24]
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	021a      	lsls	r2, r3, #8
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	619a      	str	r2, [r3, #24]
      break;
 8004d04:	e041      	b.n	8004d8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68b9      	ldr	r1, [r7, #8]
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f000 fa5f 	bl	80051d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	69da      	ldr	r2, [r3, #28]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f042 0208 	orr.w	r2, r2, #8
 8004d20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	69da      	ldr	r2, [r3, #28]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f022 0204 	bic.w	r2, r2, #4
 8004d30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	69d9      	ldr	r1, [r3, #28]
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	691a      	ldr	r2, [r3, #16]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	430a      	orrs	r2, r1
 8004d42:	61da      	str	r2, [r3, #28]
      break;
 8004d44:	e021      	b.n	8004d8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68b9      	ldr	r1, [r7, #8]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f000 faa9 	bl	80052a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	69da      	ldr	r2, [r3, #28]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	69da      	ldr	r2, [r3, #28]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	69d9      	ldr	r1, [r3, #28]
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	021a      	lsls	r2, r3, #8
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	61da      	str	r2, [r3, #28]
      break;
 8004d86:	e000      	b.n	8004d8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004d88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3710      	adds	r7, #16
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d101      	bne.n	8004db4 <HAL_TIM_ConfigClockSource+0x18>
 8004db0:	2302      	movs	r3, #2
 8004db2:	e0b3      	b.n	8004f1c <HAL_TIM_ConfigClockSource+0x180>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004dd2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dda:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dec:	d03e      	beq.n	8004e6c <HAL_TIM_ConfigClockSource+0xd0>
 8004dee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004df2:	f200 8087 	bhi.w	8004f04 <HAL_TIM_ConfigClockSource+0x168>
 8004df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dfa:	f000 8085 	beq.w	8004f08 <HAL_TIM_ConfigClockSource+0x16c>
 8004dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e02:	d87f      	bhi.n	8004f04 <HAL_TIM_ConfigClockSource+0x168>
 8004e04:	2b70      	cmp	r3, #112	; 0x70
 8004e06:	d01a      	beq.n	8004e3e <HAL_TIM_ConfigClockSource+0xa2>
 8004e08:	2b70      	cmp	r3, #112	; 0x70
 8004e0a:	d87b      	bhi.n	8004f04 <HAL_TIM_ConfigClockSource+0x168>
 8004e0c:	2b60      	cmp	r3, #96	; 0x60
 8004e0e:	d050      	beq.n	8004eb2 <HAL_TIM_ConfigClockSource+0x116>
 8004e10:	2b60      	cmp	r3, #96	; 0x60
 8004e12:	d877      	bhi.n	8004f04 <HAL_TIM_ConfigClockSource+0x168>
 8004e14:	2b50      	cmp	r3, #80	; 0x50
 8004e16:	d03c      	beq.n	8004e92 <HAL_TIM_ConfigClockSource+0xf6>
 8004e18:	2b50      	cmp	r3, #80	; 0x50
 8004e1a:	d873      	bhi.n	8004f04 <HAL_TIM_ConfigClockSource+0x168>
 8004e1c:	2b40      	cmp	r3, #64	; 0x40
 8004e1e:	d058      	beq.n	8004ed2 <HAL_TIM_ConfigClockSource+0x136>
 8004e20:	2b40      	cmp	r3, #64	; 0x40
 8004e22:	d86f      	bhi.n	8004f04 <HAL_TIM_ConfigClockSource+0x168>
 8004e24:	2b30      	cmp	r3, #48	; 0x30
 8004e26:	d064      	beq.n	8004ef2 <HAL_TIM_ConfigClockSource+0x156>
 8004e28:	2b30      	cmp	r3, #48	; 0x30
 8004e2a:	d86b      	bhi.n	8004f04 <HAL_TIM_ConfigClockSource+0x168>
 8004e2c:	2b20      	cmp	r3, #32
 8004e2e:	d060      	beq.n	8004ef2 <HAL_TIM_ConfigClockSource+0x156>
 8004e30:	2b20      	cmp	r3, #32
 8004e32:	d867      	bhi.n	8004f04 <HAL_TIM_ConfigClockSource+0x168>
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d05c      	beq.n	8004ef2 <HAL_TIM_ConfigClockSource+0x156>
 8004e38:	2b10      	cmp	r3, #16
 8004e3a:	d05a      	beq.n	8004ef2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004e3c:	e062      	b.n	8004f04 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6818      	ldr	r0, [r3, #0]
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	6899      	ldr	r1, [r3, #8]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	685a      	ldr	r2, [r3, #4]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	f000 faee 	bl	800542e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e60:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	609a      	str	r2, [r3, #8]
      break;
 8004e6a:	e04e      	b.n	8004f0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6818      	ldr	r0, [r3, #0]
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	6899      	ldr	r1, [r3, #8]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	685a      	ldr	r2, [r3, #4]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f000 fad7 	bl	800542e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689a      	ldr	r2, [r3, #8]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e8e:	609a      	str	r2, [r3, #8]
      break;
 8004e90:	e03b      	b.n	8004f0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6818      	ldr	r0, [r3, #0]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	6859      	ldr	r1, [r3, #4]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	f000 fa4e 	bl	8005340 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2150      	movs	r1, #80	; 0x50
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 faa5 	bl	80053fa <TIM_ITRx_SetConfig>
      break;
 8004eb0:	e02b      	b.n	8004f0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6818      	ldr	r0, [r3, #0]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	6859      	ldr	r1, [r3, #4]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	f000 fa6c 	bl	800539c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2160      	movs	r1, #96	; 0x60
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 fa95 	bl	80053fa <TIM_ITRx_SetConfig>
      break;
 8004ed0:	e01b      	b.n	8004f0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6818      	ldr	r0, [r3, #0]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	6859      	ldr	r1, [r3, #4]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	461a      	mov	r2, r3
 8004ee0:	f000 fa2e 	bl	8005340 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2140      	movs	r1, #64	; 0x40
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 fa85 	bl	80053fa <TIM_ITRx_SetConfig>
      break;
 8004ef0:	e00b      	b.n	8004f0a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4619      	mov	r1, r3
 8004efc:	4610      	mov	r0, r2
 8004efe:	f000 fa7c 	bl	80053fa <TIM_ITRx_SetConfig>
        break;
 8004f02:	e002      	b.n	8004f0a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004f04:	bf00      	nop
 8004f06:	e000      	b.n	8004f0a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004f08:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bc80      	pop	{r7}
 8004f34:	4770      	bx	lr

08004f36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b083      	sub	sp, #12
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f3e:	bf00      	nop
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bc80      	pop	{r7}
 8004f46:	4770      	bx	lr

08004f48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f50:	bf00      	nop
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bc80      	pop	{r7}
 8004f58:	4770      	bx	lr

08004f5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b083      	sub	sp, #12
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f62:	bf00      	nop
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bc80      	pop	{r7}
 8004f6a:	4770      	bx	lr

08004f6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a29      	ldr	r2, [pc, #164]	; (8005024 <TIM_Base_SetConfig+0xb8>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d00b      	beq.n	8004f9c <TIM_Base_SetConfig+0x30>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f8a:	d007      	beq.n	8004f9c <TIM_Base_SetConfig+0x30>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a26      	ldr	r2, [pc, #152]	; (8005028 <TIM_Base_SetConfig+0xbc>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d003      	beq.n	8004f9c <TIM_Base_SetConfig+0x30>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a25      	ldr	r2, [pc, #148]	; (800502c <TIM_Base_SetConfig+0xc0>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d108      	bne.n	8004fae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a1c      	ldr	r2, [pc, #112]	; (8005024 <TIM_Base_SetConfig+0xb8>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d00b      	beq.n	8004fce <TIM_Base_SetConfig+0x62>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fbc:	d007      	beq.n	8004fce <TIM_Base_SetConfig+0x62>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a19      	ldr	r2, [pc, #100]	; (8005028 <TIM_Base_SetConfig+0xbc>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d003      	beq.n	8004fce <TIM_Base_SetConfig+0x62>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a18      	ldr	r2, [pc, #96]	; (800502c <TIM_Base_SetConfig+0xc0>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d108      	bne.n	8004fe0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	689a      	ldr	r2, [r3, #8]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a07      	ldr	r2, [pc, #28]	; (8005024 <TIM_Base_SetConfig+0xb8>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d103      	bne.n	8005014 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	691a      	ldr	r2, [r3, #16]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	615a      	str	r2, [r3, #20]
}
 800501a:	bf00      	nop
 800501c:	3714      	adds	r7, #20
 800501e:	46bd      	mov	sp, r7
 8005020:	bc80      	pop	{r7}
 8005022:	4770      	bx	lr
 8005024:	40012c00 	.word	0x40012c00
 8005028:	40000400 	.word	0x40000400
 800502c:	40000800 	.word	0x40000800

08005030 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005030:	b480      	push	{r7}
 8005032:	b087      	sub	sp, #28
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	f023 0201 	bic.w	r2, r3, #1
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800505e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f023 0303 	bic.w	r3, r3, #3
 8005066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	4313      	orrs	r3, r2
 8005070:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f023 0302 	bic.w	r3, r3, #2
 8005078:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	4313      	orrs	r3, r2
 8005082:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a1c      	ldr	r2, [pc, #112]	; (80050f8 <TIM_OC1_SetConfig+0xc8>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d10c      	bne.n	80050a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	f023 0308 	bic.w	r3, r3, #8
 8005092:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	4313      	orrs	r3, r2
 800509c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f023 0304 	bic.w	r3, r3, #4
 80050a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a13      	ldr	r2, [pc, #76]	; (80050f8 <TIM_OC1_SetConfig+0xc8>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d111      	bne.n	80050d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	685a      	ldr	r2, [r3, #4]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	697a      	ldr	r2, [r7, #20]
 80050ea:	621a      	str	r2, [r3, #32]
}
 80050ec:	bf00      	nop
 80050ee:	371c      	adds	r7, #28
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bc80      	pop	{r7}
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	40012c00 	.word	0x40012c00

080050fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	f023 0210 	bic.w	r2, r3, #16
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800512a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005132:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	021b      	lsls	r3, r3, #8
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	4313      	orrs	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	f023 0320 	bic.w	r3, r3, #32
 8005146:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	011b      	lsls	r3, r3, #4
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	4313      	orrs	r3, r2
 8005152:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a1d      	ldr	r2, [pc, #116]	; (80051cc <TIM_OC2_SetConfig+0xd0>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d10d      	bne.n	8005178 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005162:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	011b      	lsls	r3, r3, #4
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	4313      	orrs	r3, r2
 800516e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005176:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a14      	ldr	r2, [pc, #80]	; (80051cc <TIM_OC2_SetConfig+0xd0>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d113      	bne.n	80051a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005186:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800518e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	695b      	ldr	r3, [r3, #20]
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	4313      	orrs	r3, r2
 800519a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	621a      	str	r2, [r3, #32]
}
 80051c2:	bf00      	nop
 80051c4:	371c      	adds	r7, #28
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bc80      	pop	{r7}
 80051ca:	4770      	bx	lr
 80051cc:	40012c00 	.word	0x40012c00

080051d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b087      	sub	sp, #28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	69db      	ldr	r3, [r3, #28]
 80051f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f023 0303 	bic.w	r3, r3, #3
 8005206:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	4313      	orrs	r3, r2
 8005210:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005218:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	021b      	lsls	r3, r3, #8
 8005220:	697a      	ldr	r2, [r7, #20]
 8005222:	4313      	orrs	r3, r2
 8005224:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a1d      	ldr	r2, [pc, #116]	; (80052a0 <TIM_OC3_SetConfig+0xd0>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d10d      	bne.n	800524a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005234:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	021b      	lsls	r3, r3, #8
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	4313      	orrs	r3, r2
 8005240:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005248:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a14      	ldr	r2, [pc, #80]	; (80052a0 <TIM_OC3_SetConfig+0xd0>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d113      	bne.n	800527a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005258:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005260:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	011b      	lsls	r3, r3, #4
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	4313      	orrs	r3, r2
 800526c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	011b      	lsls	r3, r3, #4
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	4313      	orrs	r3, r2
 8005278:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	685a      	ldr	r2, [r3, #4]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	621a      	str	r2, [r3, #32]
}
 8005294:	bf00      	nop
 8005296:	371c      	adds	r7, #28
 8005298:	46bd      	mov	sp, r7
 800529a:	bc80      	pop	{r7}
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	40012c00 	.word	0x40012c00

080052a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b087      	sub	sp, #28
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	69db      	ldr	r3, [r3, #28]
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	021b      	lsls	r3, r3, #8
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	031b      	lsls	r3, r3, #12
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a0f      	ldr	r2, [pc, #60]	; (800533c <TIM_OC4_SetConfig+0x98>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d109      	bne.n	8005318 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800530a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	695b      	ldr	r3, [r3, #20]
 8005310:	019b      	lsls	r3, r3, #6
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	4313      	orrs	r3, r2
 8005316:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	621a      	str	r2, [r3, #32]
}
 8005332:	bf00      	nop
 8005334:	371c      	adds	r7, #28
 8005336:	46bd      	mov	sp, r7
 8005338:	bc80      	pop	{r7}
 800533a:	4770      	bx	lr
 800533c:	40012c00 	.word	0x40012c00

08005340 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005340:	b480      	push	{r7}
 8005342:	b087      	sub	sp, #28
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	f023 0201 	bic.w	r2, r3, #1
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800536a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	011b      	lsls	r3, r3, #4
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	4313      	orrs	r3, r2
 8005374:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	f023 030a 	bic.w	r3, r3, #10
 800537c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	4313      	orrs	r3, r2
 8005384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	693a      	ldr	r2, [r7, #16]
 800538a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	621a      	str	r2, [r3, #32]
}
 8005392:	bf00      	nop
 8005394:	371c      	adds	r7, #28
 8005396:	46bd      	mov	sp, r7
 8005398:	bc80      	pop	{r7}
 800539a:	4770      	bx	lr

0800539c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800539c:	b480      	push	{r7}
 800539e:	b087      	sub	sp, #28
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6a1b      	ldr	r3, [r3, #32]
 80053ac:	f023 0210 	bic.w	r2, r3, #16
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	031b      	lsls	r3, r3, #12
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80053d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	011b      	lsls	r3, r3, #4
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	621a      	str	r2, [r3, #32]
}
 80053f0:	bf00      	nop
 80053f2:	371c      	adds	r7, #28
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bc80      	pop	{r7}
 80053f8:	4770      	bx	lr

080053fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053fa:	b480      	push	{r7}
 80053fc:	b085      	sub	sp, #20
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
 8005402:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005410:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	4313      	orrs	r3, r2
 8005418:	f043 0307 	orr.w	r3, r3, #7
 800541c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	609a      	str	r2, [r3, #8]
}
 8005424:	bf00      	nop
 8005426:	3714      	adds	r7, #20
 8005428:	46bd      	mov	sp, r7
 800542a:	bc80      	pop	{r7}
 800542c:	4770      	bx	lr

0800542e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800542e:	b480      	push	{r7}
 8005430:	b087      	sub	sp, #28
 8005432:	af00      	add	r7, sp, #0
 8005434:	60f8      	str	r0, [r7, #12]
 8005436:	60b9      	str	r1, [r7, #8]
 8005438:	607a      	str	r2, [r7, #4]
 800543a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005448:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	021a      	lsls	r2, r3, #8
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	431a      	orrs	r2, r3
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	4313      	orrs	r3, r2
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	4313      	orrs	r3, r2
 800545a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	609a      	str	r2, [r3, #8]
}
 8005462:	bf00      	nop
 8005464:	371c      	adds	r7, #28
 8005466:	46bd      	mov	sp, r7
 8005468:	bc80      	pop	{r7}
 800546a:	4770      	bx	lr

0800546c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800546c:	b480      	push	{r7}
 800546e:	b087      	sub	sp, #28
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	f003 031f 	and.w	r3, r3, #31
 800547e:	2201      	movs	r2, #1
 8005480:	fa02 f303 	lsl.w	r3, r2, r3
 8005484:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6a1a      	ldr	r2, [r3, #32]
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	43db      	mvns	r3, r3
 800548e:	401a      	ands	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6a1a      	ldr	r2, [r3, #32]
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	f003 031f 	and.w	r3, r3, #31
 800549e:	6879      	ldr	r1, [r7, #4]
 80054a0:	fa01 f303 	lsl.w	r3, r1, r3
 80054a4:	431a      	orrs	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	621a      	str	r2, [r3, #32]
}
 80054aa:	bf00      	nop
 80054ac:	371c      	adds	r7, #28
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bc80      	pop	{r7}
 80054b2:	4770      	bx	lr

080054b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b085      	sub	sp, #20
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d101      	bne.n	80054cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054c8:	2302      	movs	r3, #2
 80054ca:	e046      	b.n	800555a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2202      	movs	r2, #2
 80054d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a16      	ldr	r2, [pc, #88]	; (8005564 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d00e      	beq.n	800552e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005518:	d009      	beq.n	800552e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a12      	ldr	r2, [pc, #72]	; (8005568 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d004      	beq.n	800552e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a10      	ldr	r2, [pc, #64]	; (800556c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d10c      	bne.n	8005548 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005534:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	68ba      	ldr	r2, [r7, #8]
 800553c:	4313      	orrs	r3, r2
 800553e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68ba      	ldr	r2, [r7, #8]
 8005546:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	bc80      	pop	{r7}
 8005562:	4770      	bx	lr
 8005564:	40012c00 	.word	0x40012c00
 8005568:	40000400 	.word	0x40000400
 800556c:	40000800 	.word	0x40000800

08005570 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	bc80      	pop	{r7}
 8005580:	4770      	bx	lr

08005582 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005582:	b480      	push	{r7}
 8005584:	b083      	sub	sp, #12
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800558a:	bf00      	nop
 800558c:	370c      	adds	r7, #12
 800558e:	46bd      	mov	sp, r7
 8005590:	bc80      	pop	{r7}
 8005592:	4770      	bx	lr

08005594 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e03f      	b.n	8005626 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d106      	bne.n	80055c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f7fc fa1e 	bl	80019fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2224      	movs	r2, #36	; 0x24
 80055c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68da      	ldr	r2, [r3, #12]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 faeb 	bl	8005bb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	691a      	ldr	r2, [r3, #16]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	695a      	ldr	r2, [r3, #20]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68da      	ldr	r2, [r3, #12]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800560c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2220      	movs	r2, #32
 8005618:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2220      	movs	r2, #32
 8005620:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3708      	adds	r7, #8
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800562e:	b480      	push	{r7}
 8005630:	b085      	sub	sp, #20
 8005632:	af00      	add	r7, sp, #0
 8005634:	60f8      	str	r0, [r7, #12]
 8005636:	60b9      	str	r1, [r7, #8]
 8005638:	4613      	mov	r3, r2
 800563a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005642:	b2db      	uxtb	r3, r3
 8005644:	2b20      	cmp	r3, #32
 8005646:	d130      	bne.n	80056aa <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d002      	beq.n	8005654 <HAL_UART_Transmit_IT+0x26>
 800564e:	88fb      	ldrh	r3, [r7, #6]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d101      	bne.n	8005658 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e029      	b.n	80056ac <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800565e:	2b01      	cmp	r3, #1
 8005660:	d101      	bne.n	8005666 <HAL_UART_Transmit_IT+0x38>
 8005662:	2302      	movs	r3, #2
 8005664:	e022      	b.n	80056ac <HAL_UART_Transmit_IT+0x7e>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2201      	movs	r2, #1
 800566a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	68ba      	ldr	r2, [r7, #8]
 8005672:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	88fa      	ldrh	r2, [r7, #6]
 8005678:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	88fa      	ldrh	r2, [r7, #6]
 800567e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2221      	movs	r2, #33	; 0x21
 800568a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68da      	ldr	r2, [r3, #12]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80056a4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80056a6:	2300      	movs	r3, #0
 80056a8:	e000      	b.n	80056ac <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80056aa:	2302      	movs	r3, #2
  }
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3714      	adds	r7, #20
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bc80      	pop	{r7}
 80056b4:	4770      	bx	lr

080056b6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b085      	sub	sp, #20
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	60f8      	str	r0, [r7, #12]
 80056be:	60b9      	str	r1, [r7, #8]
 80056c0:	4613      	mov	r3, r2
 80056c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2b20      	cmp	r3, #32
 80056ce:	d140      	bne.n	8005752 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d002      	beq.n	80056dc <HAL_UART_Receive_IT+0x26>
 80056d6:	88fb      	ldrh	r3, [r7, #6]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d101      	bne.n	80056e0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e039      	b.n	8005754 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d101      	bne.n	80056ee <HAL_UART_Receive_IT+0x38>
 80056ea:	2302      	movs	r3, #2
 80056ec:	e032      	b.n	8005754 <HAL_UART_Receive_IT+0x9e>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	88fa      	ldrh	r2, [r7, #6]
 8005700:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	88fa      	ldrh	r2, [r7, #6]
 8005706:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2222      	movs	r2, #34	; 0x22
 8005712:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68da      	ldr	r2, [r3, #12]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800572c:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	695a      	ldr	r2, [r3, #20]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f042 0201 	orr.w	r2, r2, #1
 800573c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68da      	ldr	r2, [r3, #12]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f042 0220 	orr.w	r2, r2, #32
 800574c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800574e:	2300      	movs	r3, #0
 8005750:	e000      	b.n	8005754 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005752:	2302      	movs	r3, #2
  }
}
 8005754:	4618      	mov	r0, r3
 8005756:	3714      	adds	r7, #20
 8005758:	46bd      	mov	sp, r7
 800575a:	bc80      	pop	{r7}
 800575c:	4770      	bx	lr
	...

08005760 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b088      	sub	sp, #32
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005780:	2300      	movs	r3, #0
 8005782:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005784:	2300      	movs	r3, #0
 8005786:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	f003 030f 	and.w	r3, r3, #15
 800578e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10d      	bne.n	80057b2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	f003 0320 	and.w	r3, r3, #32
 800579c:	2b00      	cmp	r3, #0
 800579e:	d008      	beq.n	80057b2 <HAL_UART_IRQHandler+0x52>
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	f003 0320 	and.w	r3, r3, #32
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 f982 	bl	8005ab4 <UART_Receive_IT>
      return;
 80057b0:	e0d0      	b.n	8005954 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f000 80b0 	beq.w	800591a <HAL_UART_IRQHandler+0x1ba>
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	f003 0301 	and.w	r3, r3, #1
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d105      	bne.n	80057d0 <HAL_UART_IRQHandler+0x70>
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	f000 80a5 	beq.w	800591a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00a      	beq.n	80057f0 <HAL_UART_IRQHandler+0x90>
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d005      	beq.n	80057f0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e8:	f043 0201 	orr.w	r2, r3, #1
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	f003 0304 	and.w	r3, r3, #4
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00a      	beq.n	8005810 <HAL_UART_IRQHandler+0xb0>
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	2b00      	cmp	r3, #0
 8005802:	d005      	beq.n	8005810 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005808:	f043 0202 	orr.w	r2, r3, #2
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	f003 0302 	and.w	r3, r3, #2
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00a      	beq.n	8005830 <HAL_UART_IRQHandler+0xd0>
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	2b00      	cmp	r3, #0
 8005822:	d005      	beq.n	8005830 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005828:	f043 0204 	orr.w	r2, r3, #4
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	f003 0308 	and.w	r3, r3, #8
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00f      	beq.n	800585a <HAL_UART_IRQHandler+0xfa>
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	f003 0320 	and.w	r3, r3, #32
 8005840:	2b00      	cmp	r3, #0
 8005842:	d104      	bne.n	800584e <HAL_UART_IRQHandler+0xee>
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	2b00      	cmp	r3, #0
 800584c:	d005      	beq.n	800585a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005852:	f043 0208 	orr.w	r2, r3, #8
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800585e:	2b00      	cmp	r3, #0
 8005860:	d077      	beq.n	8005952 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	f003 0320 	and.w	r3, r3, #32
 8005868:	2b00      	cmp	r3, #0
 800586a:	d007      	beq.n	800587c <HAL_UART_IRQHandler+0x11c>
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	f003 0320 	and.w	r3, r3, #32
 8005872:	2b00      	cmp	r3, #0
 8005874:	d002      	beq.n	800587c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f91c 	bl	8005ab4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005886:	2b00      	cmp	r3, #0
 8005888:	bf14      	ite	ne
 800588a:	2301      	movne	r3, #1
 800588c:	2300      	moveq	r3, #0
 800588e:	b2db      	uxtb	r3, r3
 8005890:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005896:	f003 0308 	and.w	r3, r3, #8
 800589a:	2b00      	cmp	r3, #0
 800589c:	d102      	bne.n	80058a4 <HAL_UART_IRQHandler+0x144>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d031      	beq.n	8005908 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 f86d 	bl	8005984 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	695b      	ldr	r3, [r3, #20]
 80058b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d023      	beq.n	8005900 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	695a      	ldr	r2, [r3, #20]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058c6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d013      	beq.n	80058f8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d4:	4a21      	ldr	r2, [pc, #132]	; (800595c <HAL_UART_IRQHandler+0x1fc>)
 80058d6:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058dc:	4618      	mov	r0, r3
 80058de:	f7fc ff3b 	bl	8002758 <HAL_DMA_Abort_IT>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d016      	beq.n	8005916 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80058f2:	4610      	mov	r0, r2
 80058f4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058f6:	e00e      	b.n	8005916 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 f83a 	bl	8005972 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058fe:	e00a      	b.n	8005916 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 f836 	bl	8005972 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005906:	e006      	b.n	8005916 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 f832 	bl	8005972 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005914:	e01d      	b.n	8005952 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005916:	bf00      	nop
    return;
 8005918:	e01b      	b.n	8005952 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005920:	2b00      	cmp	r3, #0
 8005922:	d008      	beq.n	8005936 <HAL_UART_IRQHandler+0x1d6>
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800592a:	2b00      	cmp	r3, #0
 800592c:	d003      	beq.n	8005936 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 f859 	bl	80059e6 <UART_Transmit_IT>
    return;
 8005934:	e00e      	b.n	8005954 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593c:	2b00      	cmp	r3, #0
 800593e:	d009      	beq.n	8005954 <HAL_UART_IRQHandler+0x1f4>
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005946:	2b00      	cmp	r3, #0
 8005948:	d004      	beq.n	8005954 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 f89a 	bl	8005a84 <UART_EndTransmit_IT>
    return;
 8005950:	e000      	b.n	8005954 <HAL_UART_IRQHandler+0x1f4>
    return;
 8005952:	bf00      	nop
  }
}
 8005954:	3720      	adds	r7, #32
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	080059bf 	.word	0x080059bf

08005960 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005968:	bf00      	nop
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	bc80      	pop	{r7}
 8005970:	4770      	bx	lr

08005972 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005972:	b480      	push	{r7}
 8005974:	b083      	sub	sp, #12
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800597a:	bf00      	nop
 800597c:	370c      	adds	r7, #12
 800597e:	46bd      	mov	sp, r7
 8005980:	bc80      	pop	{r7}
 8005982:	4770      	bx	lr

08005984 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68da      	ldr	r2, [r3, #12]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800599a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	695a      	ldr	r2, [r3, #20]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f022 0201 	bic.w	r2, r2, #1
 80059aa:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2220      	movs	r2, #32
 80059b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bc80      	pop	{r7}
 80059bc:	4770      	bx	lr

080059be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059be:	b580      	push	{r7, lr}
 80059c0:	b084      	sub	sp, #16
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f7ff ffca 	bl	8005972 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059de:	bf00      	nop
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80059e6:	b480      	push	{r7}
 80059e8:	b085      	sub	sp, #20
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b21      	cmp	r3, #33	; 0x21
 80059f8:	d13e      	bne.n	8005a78 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a02:	d114      	bne.n	8005a2e <UART_Transmit_IT+0x48>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d110      	bne.n	8005a2e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a1b      	ldr	r3, [r3, #32]
 8005a10:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	881b      	ldrh	r3, [r3, #0]
 8005a16:	461a      	mov	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a20:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	1c9a      	adds	r2, r3, #2
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	621a      	str	r2, [r3, #32]
 8005a2c:	e008      	b.n	8005a40 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	1c59      	adds	r1, r3, #1
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	6211      	str	r1, [r2, #32]
 8005a38:	781a      	ldrb	r2, [r3, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	3b01      	subs	r3, #1
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d10f      	bne.n	8005a74 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68da      	ldr	r2, [r3, #12]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a62:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68da      	ldr	r2, [r3, #12]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a72:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a74:	2300      	movs	r3, #0
 8005a76:	e000      	b.n	8005a7a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005a78:	2302      	movs	r3, #2
  }
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3714      	adds	r7, #20
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bc80      	pop	{r7}
 8005a82:	4770      	bx	lr

08005a84 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68da      	ldr	r2, [r3, #12]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a9a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f7ff ff5b 	bl	8005960 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3708      	adds	r7, #8
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	2b22      	cmp	r3, #34	; 0x22
 8005ac6:	d170      	bne.n	8005baa <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ad0:	d117      	bne.n	8005b02 <UART_Receive_IT+0x4e>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d113      	bne.n	8005b02 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8005ada:	2300      	movs	r3, #0
 8005adc:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae2:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005afa:	1c9a      	adds	r2, r3, #2
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	629a      	str	r2, [r3, #40]	; 0x28
 8005b00:	e026      	b.n	8005b50 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b06:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b14:	d007      	beq.n	8005b26 <UART_Receive_IT+0x72>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d10a      	bne.n	8005b34 <UART_Receive_IT+0x80>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d106      	bne.n	8005b34 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	b2da      	uxtb	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	701a      	strb	r2, [r3, #0]
 8005b32:	e008      	b.n	8005b46 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b40:	b2da      	uxtb	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b4a:	1c5a      	adds	r2, r3, #1
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	3b01      	subs	r3, #1
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d120      	bne.n	8005ba6 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68da      	ldr	r2, [r3, #12]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f022 0220 	bic.w	r2, r2, #32
 8005b72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68da      	ldr	r2, [r3, #12]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	695a      	ldr	r2, [r3, #20]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f022 0201 	bic.w	r2, r2, #1
 8005b92:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2220      	movs	r2, #32
 8005b98:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f7fb fb81 	bl	80012a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	e002      	b.n	8005bac <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	e000      	b.n	8005bac <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8005baa:	2302      	movs	r3, #2
  }
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	68da      	ldr	r2, [r3, #12]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	689a      	ldr	r2, [r3, #8]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	695b      	ldr	r3, [r3, #20]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005bee:	f023 030c 	bic.w	r3, r3, #12
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	6812      	ldr	r2, [r2, #0]
 8005bf6:	68b9      	ldr	r1, [r7, #8]
 8005bf8:	430b      	orrs	r3, r1
 8005bfa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	699a      	ldr	r2, [r3, #24]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a2c      	ldr	r2, [pc, #176]	; (8005cc8 <UART_SetConfig+0x114>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d103      	bne.n	8005c24 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005c1c:	f7fd fdfe 	bl	800381c <HAL_RCC_GetPCLK2Freq>
 8005c20:	60f8      	str	r0, [r7, #12]
 8005c22:	e002      	b.n	8005c2a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005c24:	f7fd fde6 	bl	80037f4 <HAL_RCC_GetPCLK1Freq>
 8005c28:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	4413      	add	r3, r2
 8005c32:	009a      	lsls	r2, r3, #2
 8005c34:	441a      	add	r2, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c40:	4a22      	ldr	r2, [pc, #136]	; (8005ccc <UART_SetConfig+0x118>)
 8005c42:	fba2 2303 	umull	r2, r3, r2, r3
 8005c46:	095b      	lsrs	r3, r3, #5
 8005c48:	0119      	lsls	r1, r3, #4
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4413      	add	r3, r2
 8005c52:	009a      	lsls	r2, r3, #2
 8005c54:	441a      	add	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c60:	4b1a      	ldr	r3, [pc, #104]	; (8005ccc <UART_SetConfig+0x118>)
 8005c62:	fba3 0302 	umull	r0, r3, r3, r2
 8005c66:	095b      	lsrs	r3, r3, #5
 8005c68:	2064      	movs	r0, #100	; 0x64
 8005c6a:	fb00 f303 	mul.w	r3, r0, r3
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	011b      	lsls	r3, r3, #4
 8005c72:	3332      	adds	r3, #50	; 0x32
 8005c74:	4a15      	ldr	r2, [pc, #84]	; (8005ccc <UART_SetConfig+0x118>)
 8005c76:	fba2 2303 	umull	r2, r3, r2, r3
 8005c7a:	095b      	lsrs	r3, r3, #5
 8005c7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c80:	4419      	add	r1, r3
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	4613      	mov	r3, r2
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	4413      	add	r3, r2
 8005c8a:	009a      	lsls	r2, r3, #2
 8005c8c:	441a      	add	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c98:	4b0c      	ldr	r3, [pc, #48]	; (8005ccc <UART_SetConfig+0x118>)
 8005c9a:	fba3 0302 	umull	r0, r3, r3, r2
 8005c9e:	095b      	lsrs	r3, r3, #5
 8005ca0:	2064      	movs	r0, #100	; 0x64
 8005ca2:	fb00 f303 	mul.w	r3, r0, r3
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	011b      	lsls	r3, r3, #4
 8005caa:	3332      	adds	r3, #50	; 0x32
 8005cac:	4a07      	ldr	r2, [pc, #28]	; (8005ccc <UART_SetConfig+0x118>)
 8005cae:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb2:	095b      	lsrs	r3, r3, #5
 8005cb4:	f003 020f 	and.w	r2, r3, #15
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	440a      	add	r2, r1
 8005cbe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005cc0:	bf00      	nop
 8005cc2:	3710      	adds	r7, #16
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	40013800 	.word	0x40013800
 8005ccc:	51eb851f 	.word	0x51eb851f

08005cd0 <__libc_init_array>:
 8005cd0:	b570      	push	{r4, r5, r6, lr}
 8005cd2:	2600      	movs	r6, #0
 8005cd4:	4d0c      	ldr	r5, [pc, #48]	; (8005d08 <__libc_init_array+0x38>)
 8005cd6:	4c0d      	ldr	r4, [pc, #52]	; (8005d0c <__libc_init_array+0x3c>)
 8005cd8:	1b64      	subs	r4, r4, r5
 8005cda:	10a4      	asrs	r4, r4, #2
 8005cdc:	42a6      	cmp	r6, r4
 8005cde:	d109      	bne.n	8005cf4 <__libc_init_array+0x24>
 8005ce0:	f000 f822 	bl	8005d28 <_init>
 8005ce4:	2600      	movs	r6, #0
 8005ce6:	4d0a      	ldr	r5, [pc, #40]	; (8005d10 <__libc_init_array+0x40>)
 8005ce8:	4c0a      	ldr	r4, [pc, #40]	; (8005d14 <__libc_init_array+0x44>)
 8005cea:	1b64      	subs	r4, r4, r5
 8005cec:	10a4      	asrs	r4, r4, #2
 8005cee:	42a6      	cmp	r6, r4
 8005cf0:	d105      	bne.n	8005cfe <__libc_init_array+0x2e>
 8005cf2:	bd70      	pop	{r4, r5, r6, pc}
 8005cf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cf8:	4798      	blx	r3
 8005cfa:	3601      	adds	r6, #1
 8005cfc:	e7ee      	b.n	8005cdc <__libc_init_array+0xc>
 8005cfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d02:	4798      	blx	r3
 8005d04:	3601      	adds	r6, #1
 8005d06:	e7f2      	b.n	8005cee <__libc_init_array+0x1e>
 8005d08:	08005da8 	.word	0x08005da8
 8005d0c:	08005da8 	.word	0x08005da8
 8005d10:	08005da8 	.word	0x08005da8
 8005d14:	08005dac 	.word	0x08005dac

08005d18 <memset>:
 8005d18:	4603      	mov	r3, r0
 8005d1a:	4402      	add	r2, r0
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d100      	bne.n	8005d22 <memset+0xa>
 8005d20:	4770      	bx	lr
 8005d22:	f803 1b01 	strb.w	r1, [r3], #1
 8005d26:	e7f9      	b.n	8005d1c <memset+0x4>

08005d28 <_init>:
 8005d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d2a:	bf00      	nop
 8005d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d2e:	bc08      	pop	{r3}
 8005d30:	469e      	mov	lr, r3
 8005d32:	4770      	bx	lr

08005d34 <_fini>:
 8005d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d36:	bf00      	nop
 8005d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d3a:	bc08      	pop	{r3}
 8005d3c:	469e      	mov	lr, r3
 8005d3e:	4770      	bx	lr
